{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u524d\u8a00","text":""},{"location":"#_2","title":"\u5173\u4e8e\u6211","text":"<p>SYSU \u8f6f\u4ef6\u5de5\u7a0b\u7855\u58eb\u7814\u7a76\u751f\u5728\u8bfb\uff0c\u7814\u7a76\u65b9\u5411\u4e3a\u4e91\u8ba1\u7b97\u3002</p> <p>\u672c\u79d1\u671f\u95f4\u6beb\u65e0\u89c4\u5212\uff0c\u5728\u8ba1\u7b97\u673a\u5404\u4e2a\u65b9\u5411\u91cc\u53cd\u590d\u6a2a\u8df3\uff0c\u6df7\u8fc7 ACM\u3001\u6253\u8fc7\u8d85\u7b97\u3001\u5199\u8fc7\u5b89\u5353\u5f00\u53d1\u3001\u505a\u8fc7\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\u3001\u590d\u73b0\u8fc7\u8054\u90a6\u5b66\u4e60\u8bba\u6587\uff0c\u751a\u81f3\u4e13\u4e1a\u8fd8\u662f\u641e\u5b89\u5168\u7684\uff08\u4f46\u4e00\u76f4\u5230\u6bd5\u4e1a\u8fd8\u662f\u8fde\u6316\u4e2a\u6d1e\u90fd\u4e0d\u4f1a\uff09\uff0c\u603b\u4e4b\u5c31\u662f\u5565\u5565\u90fd\u78b0\u8fc7\uff0c\u5565\u5565\u90fd\u4e0d\u7cbe\u3002</p> <p>\u4f46\u662f\u5e7f\u6cdb\u63a5\u89e6\u5404\u9886\u57df\u4ee5\u8ba4\u8bc6\u81ea\u5df1\u7684\u5174\u8da3\u6240\u5728\u53c8\u4f55\u5c1d\u4e0d\u662f\u4e00\u79cd\u89c4\u5212\u5462\uff08\u4e50</p> <p>\u597d\u5728\u6536\u83b7\u8fd8\u662f\u6709\u7684\uff0c\u90a3\u5c31\u662f\u786e\u5b9a\u81ea\u5df1\u4e00\u6765\u641e\u4e0d\u52a8\u5b89\u5168\uff0c\u4e8c\u6765\u4e0d\u559c AI\uff0c\u4e09\u6765 HPC \u4e0d\u662f\u6211\u80fd\u78b0\u7684\uff0c\u6700\u540e\u603b\u7b97\u94c1\u4e86\u5fc3\uff0c\u641e\u5f00\u53d1\uff01\u4e8e\u662f\u8003\u4e86\u8f6f\u5de5\u3002</p> <p>\u6700\u540e\u8bfb\u7814\u65b9\u5411\u8fd8\u662f\u672c\u79d1\u5b8c\u5168\u6ca1\u78b0\u8fc7\u7684\u4e91\u8ba1\u7b97\u3002</p> <p>\u6211\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u201c\u6ca1\u6709\u522b\u7684\u7231\u597d\u4f46\u552f\u72ec\u5750\u5728\u7535\u8111\u524d\u5199\u5199\u4ee3\u7801\u6363\u9f13\u4e00\u4e9b\u65b0\u4e1c\u897f\u5c31\u4f1a\u5f88\u5f00\u5fc3\u201d\u7684\u4eba\uff0c\u4f46\u53c8\u5982\u524d\u6587\u6240\u8ff0\uff0c\u8981\u5177\u4f53\u6df1\u5165\u5230\u8ba1\u7b97\u673a\u7684\u67d0\u4e2a\u65b9\u5411\u65f6\u6211\u53c8\u663e\u5f97\u6ca1\u6709\u522b\u4eba\u90a3\u4e48\u6709\u70ed\u60c5\uff0c\u6240\u4ee5\u4e00\u76f4\u5230\u7814\u7a76\u751f\u62df\u5f55\u53d6\u7684\u5982\u4eca\uff0c\u6211\u4ecd\u5904\u4e8e\u8e0c\u8e87\u4e4b\u4e2d\u3002</p> <p>\u4f46\u7559\u7ed9\u6211\u7684\u65f6\u95f4\u5df2\u7ecf\u4e0d\u591a\u4e86\uff0c\u6211\u5df2\u82b1\u4e86\u56db\u5e74\u65f6\u95f4\u5728\u6478\u7d22\u9053\u8def\u4e0a\uff0c\u603b\u8be5\u9009\u62e9\u4e00\u6761\u8def\u5f80\u524d\u8d70\u4e86\u3002</p>"},{"location":"#_3","title":"\u5173\u4e8e\u8fd9\u4e2a\u7f51\u7ad9","text":"<p>\u535a\u5ba2\u7528\u4e86\u8bb8\u591a\uff0c\u90fd\u4e0d\u592a\u6ee1\u610f\uff0c\u81ea\u5df1\u5199\u4e00\u4e2a\u535a\u5ba2\u6846\u67b6\u53c8\u529b\u6709\u4e0d\u902e\uff08\u6ca1\u5b66\u8fc7\u524d\u7aef\uff09\u3002\u5176\u6b21\u53c8\u611f\u89c9\u535a\u6587\u8fd8\u662f\u8f83\u4e3a\u96f6\u6563\uff08\u5373\u4f7f\u6709\u5206\u7c7b\u548c\u6807\u7b7e\u529f\u80fd\uff09\uff0c\u8003\u8651\u5230\u81ea\u5df1\u76ee\u524d\u6240\u5b66\u7684\u90fd\u662f\u6210\u4f53\u7cfb\u7684\u4e1c\u897f\uff08e.g. \u8bfe\u7a0b Lab\uff09\uff0c\u6700\u540e\u8fd8\u662f\u51b3\u5b9a\u7528 MkDocs \u6210\u4f53\u7cfb\u5730\u5c55\u793a\u3002\u8fd9\u79cd\u65b9\u5f0f\u5176\u5b9e\u4e5f\u8d77\u5230\u76d1\u7763\u81ea\u5df1\u5b66\u4e60\u8fdb\u5ea6\u7684\u4f5c\u7528\uff0c\u6bd5\u7adf\u4e00\u770b\u76ee\u5f55\u5c31\u77e5\u9053\u8fd8\u6709\u4e00\u5806\u7b49\u5f85\u586b\u5145\u7684\u5185\u5bb9\u3002</p> <p>\u300c\u5929\u95ee\u4e4b\u8def\u300d\u8fd9\u4e2a\u540d\u5b57\u6e90\u4e8e\u300a\u5929\u542f\u9884\u62a5\u300b\uff08\u98ce\u6708\u8457\uff09\u4e2d\u4e3b\u89d2\u69d0\u8bd7\u7684\u5347\u7ea7\u9014\u5f84\u3002\u4e66\u662f\u597d\u4e66\uff0c\u7470\u4e3d\u4e07\u5206\u7684\u67b6\u7a7a\u4e16\u754c\u89c2\u8bbe\u5b9a\u662f\u6211\u5341\u4e09\u56db\u5c81\u65f6\u68a6\u60f3\u5199\u51fa\u6765\u7684\u7c7b\u578b\uff0c\u4f46\u6211\u81ea\u5df1\u65e0\u8bba\u662f\u60f3\u8c61\u529b\u8fd8\u662f\u7b14\u529b\u90fd\u968f\u7740\u5e74\u5c81\u6e10\u957f\u800c\u96ea\u5d29\u5f0f\u4e0b\u6ed1\uff0c\u73b0\u5728\u5374\u731b\u7136\u53d1\u73b0\u539f\u6765\u771f\u7684\u6709\u4eba\u80fd\u5199\u51fa\u6765\u3002\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u4e0a\u800c\u8a00\uff0c\u8bf4\u300a\u5929\u542f\u9884\u62a5\u300b\u662f\u68a6\u4e2d\u60c5\u4e66\u4e5f\u4e0d\u4e3a\u8fc7\uff0c\u5728\u6b64\u5f3a\u70c8\u5b89\u5229\uff1a\u4f20\u9001\u95e8\u3002</p>"},{"location":"%E5%91%A8%E8%AE%B0%E5%BD%95/","title":"\u5929\u95ee\u4e4b\u8def","text":""},{"location":"%E5%91%A8%E8%AE%B0%E5%BD%95/#week-1-2023522-2023528","title":"Week 1 2023.5.22-2023.5.28","text":""},{"location":"CMU15-213/Lab2%20bombLab/","title":"Lab2\uff1a BombLab","text":"<p>\u67e5\u770b\u6240\u6709\u5bc4\u5b58\u5668\uff1alayout regs</p> <p>\u8c03\u8bd5\u8fc7\u7a0b\u663e\u793a\u6c47\u7f16\u4ee3\u7801\uff1adisplay /i $pc</p>"},{"location":"CMU15-213/Lab2%20bombLab/#phase-1","title":"Phase 1","text":""},{"location":"CMU15-213/Lab2%20bombLab/#_1","title":"\u89e3\u6790\u8fc7\u7a0b","text":"<p>Phase 1 \u4f5c\u4e3a\u7b2c\u4e00\u5173\uff0c\u5176\u53cd\u6c47\u7f16\u4ee3\u7801\u4e5f\u662f\u6700\u77ed\u7684\uff0c\u7b97\u662f\u5c0f\u70ed\u8eab\uff0c\u7701\u5f97\u4e00\u4e0a\u6765\u628a\u4eba\u5413\u9000\u4e86\uff08</p> <p>\u5148\u770b\u548c\u70b8\u5f39\u76f8\u5173\u7684\u90e8\u5206\uff1a</p> <pre><code>0000000000400ee0 &lt;phase_1&gt;:\n...\n400ee4: be 00 24 40 00          mov    $0x402400,%esi # \u8fd9\u4e2a\u8d4b\u503c\u663e\u7136\u6709\u7279\u6b8a\u7528\u610f\uff0c\u4f46\u5148\u4e0d\u7ba1\n...\n400eee: 85 c0                   test   %eax,%eax\n400ef0: 74 05                   je     400ef7 &lt;phase_1+0x17&gt; ; \u5f53eax\u4e3a0\u65f6\u4f1a\u8df3\u8fc7\u51fd\u6570explode_bomb\uff0c\u5373\u70b8\u5f39\u89e3\u9664\n400ef2: e8 43 05 00 00          call   40143a &lt;explode_bomb&gt;\n...\n</code></pre> <p>\u90a3\u4e48<code>%eax</code>\u7684\u503c\u53c8\u662f\u54ea\u91cc\u6765\u7684\u5462\uff1f\u6ce8\u610f\u5230\u524d\u4e00\u884c\u6709<code>call</code>\u51fd\u6570\u8c03\u7528\uff0c\u8bf4\u660e<code>%eax</code>\u5927\u6982\u7387\u5c31\u662f\u8fd9\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002</p> <p>\u6211\u4eec\u9700\u8981\u77e5\u9053\u8fd9\u4e2a<code>strings_not_equal()</code>\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f1a\u8fd4\u56de 0 \uff08\u867d\u7136\u987e\u540d\u601d\u4e49\u5f88\u663e\u7136\u5c31\u662f\u4e24\u5b57\u7b26\u4e32\u76f8\u7b49\u7684\u65f6\u5019\u2026\u2026\uff09\uff0c\u518d\u6765\u770b\u4e00\u4e0b\u5b83\u7684\u6c47\u7f16\uff1a</p> <pre><code>0000000000401338 &lt;strings_not_equal&gt;:\n...\n40133c:   48 89 fb                mov    %rdi,%rbx\n40133f:   48 89 f5                mov    %rsi,%rbp 401342:   e8 d4 ff ff ff          call   40131b &lt;string_length&gt;\n401347:   41 89 c4                mov    %eax,%r12d\n40134a:   48 89 ef                mov    %rbp,%rdi\n40134d:   e8 c9 ff ff ff          call   40131b &lt;string_length&gt;\n401352:   ba 01 00 00 00          mov    $0x1,%edx\n401357:   41 39 c4                cmp    %eax,%r12d\n40135a:   75 3f                   jne    40139b &lt;strings_not_equal+0x63&gt;\n; \u5982\u679c\u8fd9\u4e00\u6b65\u8df3\u8f6c\u88ab\u6267\u884c\uff0c\u51fd\u6570\u5c06\u8fd4\u56de\uff0c\u6b64\u65f6%eax\u4e0d\u4e3a0\uff0c\u70b8\u5f39\u7206\u70b8\n; \u6240\u4ee5\u8981\u6c42 %eax \u5fc5\u987b\u4e0e %r12d \u76f8\u7b49\n...\n</code></pre> <p>\u770b\u5230\u4e24\u4e2a<code>string_length</code>\u5c31\u5f88\u81ea\u7136\u77e5\u9053\uff0c\u9996\u5148\u6bd4\u8f83\u4e86\u4e24\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u7ed3\u5408\u540e\u9762\u4ee3\u7801\uff0c\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u4e0d\u76f8\u7b49\u5219\u7206\u70b8\uff0c\u90a3\u4e48<code>401357</code>\u5904\u7684<code>%eax</code>\u548c<code>%r12d</code>\u80af\u5b9a\u5404\u81ea\u5bf9\u5e94\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u548c\u7b54\u6848\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002</p> <p>\u8981\u641e\u6e05\u695a\u5bf9\u5e94\u5173\u7cfb\uff0c\u6700\u5feb\u65b9\u6cd5\u8fd8\u662f\u7528\u4e00\u4e2a\u6d4b\u8bd5\u5b57\u7b26\u4e32\u53bb\u8fdb\u884c GDB \u8c03\u8bd5\uff1a</p> <pre><code>$ gdb bomb\n(gdb) b *0x401357\nBreakpoint 1 at 0x401357\n(gdb) r\n...\nwhich to blow yourself up. Have a nice day!\n123 # \u6d4b\u8bd5\u5b57\u7b26\u4e32\n\nBreakpoint 1, 0x0000000000401357 in strings_not_equal ()\n(gdb) p $eax\n$1 = 52\n(gdb) p $r12d\n$2 = 3\n</code></pre> <p>\u663e\u7136\u7b54\u6848\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e3a 52\uff0c\u5e76\u4e14\u53ef\u4ee5\u786e\u5b9a\u7b54\u6848\u5b57\u7b26\u4e32\u7684\u5730\u5740\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u662f\u53d1\u751f\u5728<code>40134a</code>\u5904\u3002\u5f80\u524d\u63a8\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u5730\u5740\u6765\u81ea\u4e8e<code>%rsi</code>\uff0c\u5b83\u662f\u5728<code>phase_1</code>\u4e2d\u88ab\u8d4b\u503c\u7684\uff0c\u8fd9\u4e2a\u503c\u5c31\u662f<code>0x402400</code>\u3002</p> <p>\u77e5\u9053\u4e86\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u4e8c\u8fdb\u5236\u6587\u4ef6\u6765\u627e\u51fa\u8fd9\u6bb5\u5b57\u7b26\u4e32\u4e86\u3002\u5b57\u7b26\u4e32\u7684\u5b58\u50a8\u4f4d\u7f6e\u53ef\u80fd\u5728<code>.rodata</code>\u6bb5\u3001<code>.data</code>\u6bb5\u4e43\u81f3\u5728\u6808\u5e27\u4e0a\uff0c\u4f46\u8003\u8651\u5230\u8fd9\u53ea\u662f\u7b2c\u4e00\u5173\uff0c\u7b54\u6848\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5e38\u91cf\u5b58\u50a8\u5728<code>.rodata</code>\u6bb5\u662f\u6700\u6709\u53ef\u80fd\u7684\u3002</p> <pre><code>$ objdump -s -j .rodata bomb # \u67e5\u770b.rodata \u6bb5\u7684\u5168\u90e8\u5185\u5bb9\n...\n402400 426f7264 65722072 656c6174 696f6e73  Border relations\n402410 20776974 68204361 6e616461 20686176   with Canada hav\n402420 65206e65 76657220 6265656e 20626574  e never been bet\n402430 7465722e 00000000 576f7721 20596f75  ter.....Wow! You\n402440 27766520 64656675 73656420 74686520  've defused the 402450 73656372 65742073 74616765 2100666c  secret stage!\n...\n</code></pre> <p>\u663e\u7136\u7b54\u6848\u5b57\u7b26\u4e32\u5c31\u662f\uff1a</p> <pre><code>Border relations with Canada have never been better.\n</code></pre> <p>\u7b97\u4e0a\u4e00\u4e2a\u53e5\u53f7\u6b63\u597d 52 \u4e2a\u5b57\u7b26\u3002</p>"},{"location":"CMU15-213/Lab2%20bombLab/#phase-2","title":"Phase 2","text":""},{"location":"CMU15-213/Lab2%20bombLab/#_2","title":"\u89e3\u6790\u8fc7\u7a0b","text":"<p>\u6ce8\u610f\u5230<code>phase_2()</code>\u51fd\u6570\u7684\u53cd\u6c47\u7f16\u7ed3\u679c\u4e2d\u8c03\u7528\u4e86<code>read_six_numbers()</code>\u51fd\u6570\uff1a</p> <pre><code>0000000000400efc &lt;phase_2&gt;:\n400efc:   55                      push   %rbp\n400efd:   53                      push   %rbx\n400efe:   48 83 ec 28             sub    $0x28,%rsp ; \u5f00\u8f9f40\u4e2a\u5b57\u8282\u7684\u6808\u7a7a\u95f4\uff0c\u53735\u4e2a\u5143\u7d20\n400f02:   48 89 e6                mov    %rsp,%rsi\n; \u5c06\u6808\u9876\u5730\u5740\u4fdd\u5b58\u5728%rsi\u4e2d\n400f05:   e8 52 05 00 00          call   40145c &lt;read_six_numbers&gt;\n</code></pre> <p>\u731c\u6d4b\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\u7531 6 \u4e2a\u6570\u5b57\u6784\u6210\u3002</p> <p>\u5206\u6790<code>read_six_numbers()</code>\u7684\u53cd\u6c47\u7f16\u4ee3\u7801\uff0c\u53ef\u4ee5\u770b\u5230\u6709\u4e00\u884c<code>sscanf()</code>\u7684\u8c03\u7528\uff0c\u5176\u8fd4\u56de\u503c\u4e3a\u6210\u529f\u8d4b\u503c\u7684\u5b57\u6bb5\u4e2a\u6570\uff0c\u540e\u9762\u7d27\u63a5\u7740\u5c06\u8fd4\u56de\u503c\u4e0e<code>0x5</code>\u8fdb\u884c\u6bd4\u8f83\uff0c\u82e5\u8fd4\u56de\u503c\u4e0d\u5927\u4e8e 5\uff0c\u5c06\u4f1a\u6267\u884c<code>call 40143a &lt;explode_bomb&gt;</code>\uff0c\u70b8\u5f39\u7206\u70b8\u3002\u6240\u4ee5\u8be5\u51fd\u6570\u7684\u529f\u80fd\u5c31\u662f\u5224\u65ad\u8f93\u5165\u5b57\u7b26\u4e32\u662f\u5426\u5305\u542b6\u4e2a\u6570\u5b57\uff0c\u5426\u5219\u7206\u70b8\u3002</p> <p>\u7ee7\u7eed\u770b<code>phase_2()</code>\uff1a</p> <p>\u9996\u5148\u6ce8\u610f\u5230\u8c03\u7528\u8fd4\u56de\u4e4b\u540e\u53d1\u751f\u4e86\u4e0e<code>(%rsp)</code>\u7684\u6bd4\u8f83\uff1a</p> <pre><code>400f05: e8 52 05 00 00          call   40145c &lt;read_six_numbers&gt;\n400f0a: 83 3c 24 01             cmpl   $0x1,(%rsp)\n400f0e: 74 20                   je     400f30 &lt;phase_2+0x34&gt; ;\u5982\u679c(%rsp)\u4e0d\u4e3a1\uff0c\u7206\u70b8\n</code></pre> <p>\u8fd9\u91cc\u8981\u6c42<code>(%rsp)</code>\u8981\u7b49\u4e8e 1\uff0c\u8fd9\u5e94\u8be5\u662f\u516d\u4e2a\u6570\u5b57\u7684\u5176\u4e2d\u4e00\u4e2a\uff0c\u4f46\u8fd8\u4e0d\u80fd\u786e\u5b9a\u7b2c\u51e0\u4e2a\u6570\u5b57\u4f1a\u5199\u5165<code>(%rsp)</code>\u3002</p> <p>\u5982\u679c\u8eb2\u8fc7\u8fd9\u6b21\u7206\u70b8\uff0c\u4f1a\u8df3\u8f6c\u5230<code>400f30</code>\u5904\uff1a</p> <pre><code>400f30: 48 8d 5c 24 04          lea    0x4(%rsp),%rbx ;rbx=rsp+4\n400f35: 48 8d 6c 24 18          lea    0x18(%rsp),%rbp ;rbp=rsp+24\n</code></pre> <p>\u4fee\u6539\u5b8c\u4e4b\u540e\u56de\u5230<code>400f17</code>\u5904\uff1a</p> <pre><code>400f17: 8b 43 fc                mov    -0x4(%rbx),%eax \n; \u5c06%rbx\u5bc4\u5b58\u5668\u7684\u503c-4\uff0c\u5e76\u89c6\u4e3a\u4e00\u4e2a\u5730\u5740\uff08\u5176\u5b9e\u662f%rsp\uff09\uff0c\u4ece\u4e2d\u8bfb\u53d6\u6570\u636e\u8d4b\u7ed9%eax\u3002\u7b49\u4ef7\u4e8emov (%rsp),%eax\n; \u6ce8\u610f\uff0c\u4e0a\u9762\u7684-4\u64cd\u4f5c\u5e76\u6ca1\u6709\u5b9e\u9645\u4fee\u6539%rbx\u7684\u503c\uff0crbx\u4ecd\u7136\u662frsp+4\n400f1a: 01 c0                   add    %eax,%eax ; %eax*2\n400f1c: 39 03                   cmp    %eax,(%rbx)\n400f1e: 74 05                   je     400f25 &lt;phase_2+0x29&gt; ;\u5982\u679c%eax\u4e0d\u7b49\u4e8e(%rbx)\uff0c\u7206\u70b8\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u603b\u4f53\u7684\u610f\u56fe\u662f\uff0c\u8981\u6c42<code>(%rsp)</code>\u76842\u500d\u7b49\u4e8e<code>(%rbx)</code>\u3002\u524d\u9762\u53ef\u77e5<code>(%rsp)</code>\u4e3a1\uff0c\u5219<code>(%rbx)</code>\u9700\u8981\u4e3a2\u3002\u6ce8\u610f\u5230<code>%rbx</code>\u6070\u4e3a<code>%rsp+4</code>\uff0c\u5373\u4e0a\u8ff0\u4e24\u4e2a\u6574\u6570 1 \u548c 2 \u7684\u5b58\u50a8\u5730\u5740\u5b9e\u9645\u4e0a\u662f\u76f8\u90bb\u7684\u3002</p> <p>\u5982\u679c\u8eb2\u8fc7\u8fd9\u6b21\u7206\u70b8\uff0c\u4f1a\u8df3\u8f6c\u81f3<code>400f25</code>\u5904\uff1a</p> <pre><code>400f25: 48 83 c3 04             add    $0x4,%rbx ; rbx=rsp+8\n400f29: 48 39 eb                cmp    %rbp,%rbx ; rbp=rsp+24\n400f2c: 75 e9                   jne    400f17 &lt;phase_2+0x1b&gt;\n</code></pre> <p>\u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\u6765\uff0c<code>400f17</code>\u548c<code>400f25</code>\u4e24\u5904\u7684\u4ee3\u7801\u5171\u540c\u6784\u6210\u4e86\u4e00\u4e2a<code>for</code>\u5faa\u73af\uff0c\u5728\u8fd9\u4e2a\u5faa\u73af\u4e2d\uff0c<code>%rbx</code>\u7684\u521d\u59cb\u503c\u4e3a<code>%rsp+4</code>\uff0c\u5e76\u5728\u5faa\u73af\u672b\u5c3e\u9012\u589e<code>4</code>\uff0c\u76f4\u5230<code>%rbx == %rsp+24</code>\u65f6\u7ed3\u675f\u3002\u5373\u76f8\u5f53\u4e8e\u4ee5\u4e0b C \u8bed\u8a00\u4ee3\u7801\uff1a</p> <pre><code>a[0] = 1; // (%rsp)\u4e3a1\nfor(int i = 1;i &lt; 6;i++){\nif(a[i - 1] + a[i - 1] != a[i])\nexplode_bomb(); //\u7206\u70b8\n}\n</code></pre> <p>\u90a3\u4e48\u8fd9\u516d\u4e2a\u6570\u5b57\u4e2d\u9664\u7b2c\u4e00\u4e2a\u6570\u4ee5\u5916\uff0c\u5176\u4ed6\u6bcf\u4e00\u4e2a\u6570\u90fd\u5e94\u8be5\u662f\u524d\u4e00\u4e2a\u6570\u7684 2 \u500d\uff0c\u56e0\u6b64\u7b54\u6848\u5b57\u7b26\u4e32\u4e3a\uff1a</p> <pre><code>1 2 4 8 16 32\n</code></pre>"},{"location":"CMU15-213/Lab2%20bombLab/#_3","title":"\u8c03\u8bd5\u6280\u5de7","text":"<p>\u770b\u6c47\u7f16\u4ee3\u7801\u53ef\u4ee5\u5f88\u5feb\u53d1\u73b0\u4e0a\u9762\u6240\u8bf4\u7684\u6709\u4e00\u6bb5\u6765\u56de\u5012\u817e\u7684\u7591\u4f3c\u5faa\u73af\u7684\u8fc7\u7a0b\uff0c\u4e14\u5730\u5740\u4e0e<code>%rsp</code>\u76f8\u5173\u3002\u53c8\u5df2\u77e5\u8f93\u5165\u5b57\u7b26\u4e32\u662f\u516d\u4e2a\u6574\u6570\uff0c\u8981\u731c\u6d4b\u8f93\u5165\u7684\u6574\u6570\u548c\u5730\u5740\u7684\u5173\u7cfb\uff0c\u5176\u5b9e\u53ef\u4ee5\u628a\u65ad\u70b9\u6253\u5728<code>400f0a: 83 3c 24 01 cmpl  $0x1,(%rsp)</code>\u5904\uff0c\u7136\u540e\u67e5\u770b\u4ece<code>%rsp</code>\u5f00\u59cb\u7684\u8fde\u7eed 6 \u4e2a\u5b57\u957f\u7684\u5185\u5b58\u5730\u5740\u4e2d\u7684\u503c\uff1a</p> <pre><code>$ gdb bomb\n(gdb) b *0x400f0a\nBreakpoint 1 at 0x400f0a\n(gdb) r\n...\nPhase 1 defused. How about the next one?\n1 2 3 4 5 6 # \u6d4b\u8bd5\u8f93\u5165\n\nBreakpoint 1, 0x0000000000400f0a in phase_2 ()\n(gdb) p $rsp # \u67e5\u770b%rsp\u5b58\u50a8\u7684\u5730\u5740\n$1 = (void *) 0x7fffffffdc50\n(gdb) x/6wd 0x7fffffffdc50 # x/6wd \u4e2d\u7684w\u8868\u793a\u4ee54\u5b57\u8282\u4e3a\u4e00\u4e2a\u5355\u4f4d\uff0c\u6253\u5370\u516d\u4e2a\u5355\u4f4d\u7684\u503c\uff0cd\u8868\u793a\u4ee5\u5341\u8fdb\u5236\u683c\u5f0f\u8f93\u51fa\u503c\n0x7fffffffdc50: 1       2       3       4\n0x7fffffffdc60: 5       6\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u7684\u8f93\u5165\u88ab\u4f9d\u6b21\u5b58\u653e\u5728\u4e86\u5185\u5b58\u5730\u5740<code>%rsp</code>\u3001<code>%rsp+4</code>\u3001<code>%rsp+8</code>\u2026\u2026<code>%rsp+20</code>\u5904\u3002</p>"},{"location":"CMU15-213/Lab2%20bombLab/#phase-3","title":"Phase 3","text":""},{"location":"CMU15-213/Lab2%20bombLab/#_4","title":"\u89e3\u6790\u8fc7\u7a0b","text":"<p>\u5148\u770b\u7206\u70b8\u6761\u4ef6\uff1a</p> <pre><code>0000000000400f43 &lt;phase_3&gt;:\n  ...\n  400f47:   48 8d 4c 24 0c          lea    0xc(%rsp),%rcx ;rcx=rsp+12\n  400f4c:   48 8d 54 24 08          lea    0x8(%rsp),%rdx ;rdx=rsp+8\n  400f5b:   e8 90 fc ff ff          call   400bf0 &lt;__isoc99_sscanf@plt&gt;\n  400f60:   83 f8 01                cmp    $0x1,%eax\n  400f63:   7f 05                   jg     400f6a &lt;phase_3+0x27&gt;\n  400f65:   e8 d0 04 00 00          call   40143a &lt;explode_bomb&gt;\n  ; \u5982\u679csscanf\u8d4b\u503c\u7684\u5b57\u6bb5\u6570&lt;=1\uff0c\u7206\u70b8\n  400f6a:   83 7c 24 08 07          cmpl   $0x7,0x8(%rsp)\n  400f6f:   77 3c                   ja     400fad &lt;phase_3+0x6a&gt;\n  ; \u5982\u679c0x8(%rsp)&gt;7\uff08\u4ec5\u6bd4\u8f83\u4f4e4\u5b57\u8282\uff09\uff0c\u7206\u70b8\n  ...\n  400fad:   e8 88 04 00 00          call   40143a &lt;explode_bomb&gt;\n  ...\n  400fbe:   3b 44 24 0c             cmp    0xc(%rsp),%eax\n  400fc2:   74 05                   je     400fc9 &lt;phase_3+0x86&gt;\n  400fc4:   e8 71 04 00 00          call   40143a &lt;explode_bomb&gt;\n  ; \u5982\u679ceax\u2260(rsp+12)\uff0c\u7206\u70b8\n  ...\n</code></pre> <p>\u524d 6 \u6761\u6307\u4ee4\u662f\u6211\u4eec\u5728 Phase 2 \u4e2d\u6253\u8fc7\u4ea4\u9053\u7684<code>sscanf</code>\uff0c\u67e5\u770b<code>.rodata</code>\u6bb5\u7684<code>0x4025cf</code>\u5904\u7684\u5b57\u7b26\u4e32\u5c31\u80fd\u786e\u5b9a\u8f93\u5165\u7684\u683c\u5f0f\u662f\u4ec0\u4e48\uff1a</p> <pre><code>4025c0 702e0025 64202564 20256420 25642025  p..%d %d %d %d %  \n4025d0 64202564 00457272 6f723a20 5072656d  d %d.Error: Prem\n# \u6700\u540e\u7684\u767e\u5206\u53f7\u624d\u662f\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5b57\u7b26\n</code></pre> <p>\u8fd9\u6837\u5c31\u786e\u5b9a\u4e86\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u662f<code>\"%d %d\"</code>\uff0c\u53c8\u56e0\u4e3a<code>sscanf</code>\u7684\u8fd4\u56de\u503c\u22641\u5c31\u7206\u70b8\uff0c\u6240\u4ee5\u53ef\u4ee5\u786e\u5b9a\u8981\u8f93\u5165\u7684\u5c31\u662f 2 \u4e2a<code>int</code>\u6574\u6570\u3002\u5e76\u4e14\u8fd9\u4e24\u4e2a\u6574\u6570\u4f1a\u88ab\u4f9d\u6b21\u4fdd\u5b58\u5230<code>rsp+8</code>\u548c<code>rsp+12</code>\u3002</p> <p>\u90a3\u4e48<code>cmpl $0x7,0x8(%rsp)</code>\u7684\u542b\u4e49\u4e5f\u4e00\u5e76\u660e\u786e\u4e86\uff1a\u5982\u679c\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u7684\u4f4e4\u5b57\u8282\uff1e7\uff0c\u7206\u70b8\u3002\uff08\u7ed3\u5408\u4e0b\u9762\u7684\u5206\u6790\u8fd8\u53ef\u4ee5\u77e5\u9053\uff0c\u8fd9\u91cc\u5176\u5b9e\u662f\u4e3a\u4e86\u9650\u5236<code>switch</code>\u8df3\u8f6c\u8868\u4e0b\u6807\u7684\u53d6\u503c\uff0c\u56e0\u4e3a\u603b\u5171\u53ea\u6709 8 \u4e2a\u5206\u652f\uff09</p> <p>\u53e6\u5916\u6ce8\u610f\u5230<code>phase_3</code>\u4e2d\u6709\u8fde\u7eed\u7684 8 \u7ec4\u6307\u4ee4\u5177\u6709\u76f8\u4f3c\u7684\u7ed3\u6784\uff08\u90fd\u662f\u4e00\u6761<code>mov</code>\u548c\u4e00\u6761<code>jmp</code>\uff09\uff0c\u8fd9\u5176\u5b9e\u662f<code>switch</code>\u7684\u7279\u5f81\u3002\u90a3\u4e48\u4e00\u5171 8 \u4e2a<code>case</code>\uff0c\u6bcf\u4e00\u4e2a\u90fd\u662f\u4e3a<code>%eax</code> \u8d4b\u503c\u540e\u518d\u4e0e\u6211\u4eec\u8f93\u5165\u7684\u7b2c\u4e8c\u4e2a\u6574\u6570\u6bd4\u8f83\uff08<code>400fbe</code>\u5904\u7684\u4ee3\u7801\uff09\u82e5\u4e0d\u76f8\u7b49\u5219\u7206\u70b8\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u53ea\u8981\u786e\u5b9a\u54ea\u4e2a<code>case</code>\u4f1a\u88ab\u6267\u884c\uff0c\u5c31\u80fd\u786e\u5b9a\u7b2c\u4e8c\u4e2a\u6574\u6570\u7684\u503c\u3002</p> <p>\u5982\u4f55\u786e\u5b9a\u5462\uff1f\u5728\u8fd9 8 \u7ec4\u6307\u4ee4\u4e4b\u524d\uff0c\u8fd8\u6709\u4e24\u884c\u672a\u5206\u6790\u7684\u4ee3\u7801\uff1a</p> <pre><code>400f71: 8b 44 24 08             mov    0x8(%rsp),%eax ;\u5c06\u7b2c\u4e00\u4e2a\u6570\u4fdd\u5b58\u5230eax\n400f75: ff 24 c5 70 24 40 00    jmp    *0x402470(,%rax,8) ;\u8df3\u8f6c\u5230(0x402470+8*%rax)\u5904\n</code></pre> <p>\u8fd9\u91cc\u7684<code>jmp</code>\u7279\u5f81\u5c31\u6bd4\u8f83\u660e\u663e\u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u5229\u7528<code>switch</code>\u8df3\u8f6c\u8868\u8fdb\u884c\u8df3\u8f6c\u3002\u8df3\u8f6c\u8868\u4f4d\u4e8e<code>0x402470</code>\u5904\uff0c\u800c<code>%rax</code>\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u4f5c\u4e3a\u8df3\u8f6c\u8868\u7684\u4e0b\u6807\uff08\u8865\u5145\uff1a\u8df3\u8f6c\u8868\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6307\u9488\u6570\u7ec4\uff0c\u800c\u6307\u9488\u5927\u5c0f\u4e3a 8 \u5b57\u8282\uff0c\u6240\u4ee5\u8fd9\u91cc\u8981\u5199<code>8*%rax</code>\u4f5c\u4e3a\u5730\u5740\u504f\u79fb\u91cf\uff09\u3002</p> <p>\u8df3\u8f6c\u8868\u4e5f\u4fdd\u5b58\u5728<code>.rodata</code>\u6bb5\uff0c\u6240\u4ee5\u67e5\u770b<code>0x402470</code>\u5904\u7684\u5b57\u7b26\u4e32\uff1a</p> <pre><code>402470 7c0f4000 00000000 b90f4000 00000000  |.@.......@.....\n402480 830f4000 00000000 8a0f4000 00000000  ..@.......@.....\n402490 910f4000 00000000 980f4000 00000000  ..@.......@.....\n4024a0 9f0f4000 00000000 a60f4000 00000000  ..@.......@.....\n</code></pre> <p>\u8fd9\u91cc\u6709\u6bcf\u4e2a\u4e0b\u6807\u6240\u5bf9\u5e94\u7684\u8df3\u8f6c\u5730\u5740\uff0c\u4e14\u53ef\u4ee5\u770b\u51fa\u6765\u662f\u7528\u5c0f\u7aef\u6cd5\u4fdd\u5b58\u7684\uff0c\u5982<code>7c0f4000</code>\u5176\u5b9e\u662f\u5730\u5740<code>400f7c</code>\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u5e76\u4e14\u53ef\u4ee5\u770b\u51fa\u4e0b\u6807\u548c\u8df3\u8f6c\u5206\u652f\u5730\u5740\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a</p> \u4e0b\u6807 \u8df3\u8f6c\u5206\u652f\u5730\u5740 0 400f7c 1 400fb9 2 400f83 3 400f8a 4 400f91 5 400f98 6 400f9f 7 400fa6 <p>\u8fd9\u91cc\u4f3c\u4e4e\u8bbe\u4e86\u4e2a\u5c0f\u5751\uff0c\u56e0\u4e3a\u4e4d\u773c\u4e00\u770b\u8df3\u8f6c\u5206\u652f\u5730\u5740\u7684\u987a\u5e8f\u5dee\u4e0d\u591a\u5c31\u662f\u5728\u6c47\u7f16\u4ee3\u7801\u4e2d\u7684\u51fa\u73b0\u987a\u5e8f\uff0c\u4f46\u552f\u72ec<code>case 1</code>\u662f\u4e2a\u4f8b\u5916\u3002</p> <p>\u8fdb\u4e00\u6b65\u5730\uff0c\u53ef\u4ee5\u7528 GDB \u8c03\u8bd5\u9a8c\u8bc1\u4e00\u4e0b\uff1a</p> <pre><code>(gdb) b *0x400f75\n(gdb) r\n...\n0  207 #\u6d4b\u8bd5\u8f93\u5165\n\nBreakpoint 1, 0x0000000000400f75 in phase_3 ()\n(gdb) display /i $pc\n=&gt; 0x400f75 &lt;phase_3+50&gt;:   jmp    *0x402470(,%rax,8)\n(gdb) si\n0x400f7c in phase_3()\n1: x/i $pc\n=&gt; 0x400f7c &lt;phase_3+57&gt;:   mov $0xcf,%eax #eax=207\n</code></pre> <p>\u7531\u4e0a\u8ff0\u7ed3\u679c\u53ef\u4ee5\u786e\u5b9a\uff0c<code>0  207</code>\u8fd9\u4e2a\u8f93\u5165\u662f\u6b63\u786e\u7684\u3002</p> <p>\u6211\u4eec\u4e4b\u524d\u8bf4\u53ea\u8981\u77e5\u9053\u8df3\u8f6c\u5230\u4e86\u54ea\u91cc\u3001\u786e\u5b9a\u4e86<code>%eax</code>\u7684\u503c\uff0c\u5c31\u80fd\u77e5\u9053\u7b2c\u4e8c\u4e2a\u6574\u6570\u5e94\u8be5\u8f93\u5165\u4ec0\u4e48\u3002\u800c\u8df3\u8f6c\u5230\u54ea\u91cc\u5b9e\u9645\u4e0a\u662f\u7531\u7b2c\u4e00\u4e2a\u6574\u6570\u51b3\u5b9a\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4ee5\u4e0b\u6bcf\u884c\u8f93\u5165\u5176\u5b9e\u90fd\u662f\u7b54\u6848\uff1a</p> <pre><code>0 207\n1 311\n2 707\n3 256\n4 389\n5 206\n6 682\n7 327\n</code></pre>"},{"location":"CMU15-213/Lab2%20bombLab/#_5","title":"\u6e90\u7801\u8fd8\u539f","text":"<p>\u6211\u4eec\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8fd8\u539f\u51fa<code>phase_3</code>\u7684\u6e90\u7801\u5927\u81f4\u7ed3\u6784\uff1a</p> <pre><code>void phase_3(char* input){\nint num1, num2, n=0;\nn = sscanf(input, \"%d %d\", &amp;num1, &amp;num2);\nif(n&lt;=1){\nexplode_bomb();\n}\nif(num1&gt;7){\nexplode_bomb();\n}\nint x;\nswitch(num1):\ncase 0:\nx = 207; // mov    $0xcf,%eax\nbreak;\ncase 1: // \u6ce8\u610f\u8df3\u8f6c\u5230\u4e86400fb9\u5904\u7684\u4ee3\u7801\nx = 311; // mov    $0x137,%eax\nbreak;\ncase 2:\nx = 707; // mov    $0x2c3,%eax\nbreak;\ncase 3:\nx = 256; // mov    $0x100,%eax\nbreak;\ncase 4:\nx = 389; // mov    $0x185,%eax\nbreak;\ncase 5:\nx = 206; // mov    $0xce,%eax\nbreak;\ncase 6:\nx = 682; // mov    $0x2aa,%eax\nbreak;\ncase 7:\nx = 327; // mov    $0x147,%eax\nbreak;\nif(x != num2){ explode_bomb();\n}\nreturn;\n}\n</code></pre>"},{"location":"CMU15-213/Lab2%20bombLab/#phase-4","title":"Phase 4","text":"<p>\u8fd9\u4e00\u5173\u8003\u7684\u662f\u9012\u5f52\u7684\u673a\u5668\u7ea7\u8868\u793a\uff0c\u4f46\u62c6\u5f39\u8fc7\u7a0b\u672c\u8eab\u6bd4\u524d\u4e24\u5173\u8fd8\u7b80\u5355\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ece\u6c47\u7f16\u4ee3\u7801\u91cc\u77aa\u51fa\u6765\uff1a</p> <pre><code>000000000040100c &lt;phase_4&gt;:\n  ...\n  40102c:   75 07                   jne    401035 &lt;phase_4+0x29&gt; ; \u8f93\u5165\u4e24\u4e2a\u6574\u6570\uff0c\u5426\u5219\u7206\u70b8\n  40102e:   83 7c 24 08 0e          cmpl   $0xe,0x8(%rsp) \n  401033:   76 05                   jbe    40103a &lt;phase_4+0x2e&gt; ; \u7b2c\u4e00\u4e2a\u6570\u8981\u226414\uff0c\u5426\u5219\u7206\u70b8\n  401035:   e8 00 04 00 00          call   40143a &lt;explode_bomb&gt;\n  40103a:   ba 0e 00 00 00          mov    $0xe,%edx ;\u53c2\u65703\u4e3a14\n  40103f:   be 00 00 00 00          mov    $0x0,%esi ;\u53c2\u65702\u4e3a0\n  401044:   8b 7c 24 08             mov    0x8(%rsp),%edi ;\u53c2\u65701\u4e3a\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u6570\n  401048:   e8 81 ff ff ff          call   400fce &lt;func4&gt;\n  40104d:   85 c0                   test   %eax,%eax\n  40104f:   75 07                   jne    401058 &lt;phase_4+0x4c&gt; ;eax\u8981\u4e3a0\uff0c\u5426\u5219\u7206\u70b8\n  401051:   83 7c 24 0c 00          cmpl   $0x0,0xc(%rsp) ;\u8f93\u5165\u7684\u7b2c\u4e8c\u4e2a\u6570\u8981\u4e3a0\uff0c\u5426\u5219\u7206\u70b8\n  401056:   74 05                   je     40105d &lt;phase_4+0x51&gt;\n  401058:   e8 dd 03 00 00          call   40143a &lt;explode_bomb&gt;\n  40105d:   48 83 c4 18             add    $0x18,%rsp\n  401061:   c3                      ret    \n</code></pre> <p>\u5982\u6ce8\u91ca\uff0c\u53ef\u4ee5\u4ece<code>phase_4</code>\u786e\u5b9a<code>num2</code>\u5e94\u4e3a0.</p> <p>\u5bf9\u4e8e<code>fun4</code>\uff1a</p> <pre><code>0000000000400fce &lt;func4&gt;:\n  400fce:   48 83 ec 08             sub    $0x8,%rsp\n  400fd2:   89 d0                   mov    %edx,%eax ;eax=14\n  400fd4:   29 f0                   sub    %esi,%eax ;eax=14\n  400fd6:   89 c1                   mov    %eax,%ecx ;ecx=14\n  400fd8:   c1 e9 1f                shr    $0x1f,%ecx ;\u53f3\u79fb31\u4f4d\uff0c\u76f8\u5f53\u4e8e\u53d6ecx\u7684\u7b26\u53f7\u4f4d\uff0c\u4e3a0\n  400fdb:   01 c8                   add    %ecx,%eax ;eax=14\n  400fdd:   d1 f8                   sar    %eax ;\u53f3\u79fb1\u4f4d\uff0c\u76f8\u5f53\u4e8e\u9664\u4ee52\uff0ceax=7\n  400fdf:   8d 0c 30                lea    (%rax,%rsi,1),%ecx ;ecx=7+esi=7\n  400fe2:   39 f9                   cmp    %edi,%ecx ;\u5982\u679cecx&gt;=edi\uff0c\u8df3\u8f6c\u5230400ff2\uff0cedi\u4e3a\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u6570\n  400fe4:   7e 0c                   jle    400ff2 &lt;func4+0x24&gt;\n  400fe6:   8d 51 ff                lea    -0x1(%rcx),%edx ;\u5982\u679cecx&lt;edi\uff0cedx=ecx-1=6\n  400fe9:   e8 e0 ff ff ff          call   400fce &lt;func4&gt; ;\u9012\u5f52\n  400fee:   01 c0                   add    %eax,%eax \n  400ff0:   eb 15                   jmp    401007 &lt;func4+0x39&gt;\n  400ff2:   b8 00 00 00 00          mov    $0x0,%eax ;eax=0\n  400ff7:   39 f9                   cmp    %edi,%ecx ;\u5982\u679cecx&lt;=edi, \u8df3\u8f6c\u5230401007\n  400ff9:   7d 0c                   jge    401007 &lt;func4+0x39&gt;\n  400ffb:   8d 71 01                lea    0x1(%rcx),%esi\n  400ffe:   e8 cb ff ff ff          call   400fce &lt;func4&gt;\n  401003:   8d 44 00 01             lea    0x1(%rax,%rax,1),%eax\n  401007:   48 83 c4 08             add    $0x8,%rsp ;\u82e5ecx=edi=7\uff0c\u4f1a\u5728\u8fd9\u91cc\u8fd4\u56de\n  40100b:   c3                      ret    \n</code></pre> <p>\u82e5<code>ecx==edi</code>\u6210\u7acb\uff0c\u5219\u4ee3\u7801\u4ece<code>400fe2</code>\u5f00\u59cb\u7684\u8df3\u8f6c\u987a\u5e8f\u4e3a\uff1a<code>400fe2</code>\u2192<code>400ff2</code>\uff08<code>%eax=0</code>\uff09\u2192<code>401007</code>\u2192<code>fun4</code>\u5b89\u5168\u8fd4\u56de\u3002\u53c8\u7531<code>400fdf</code>\u53ef\u77e5\uff0c<code>ecx</code>\u4e3a 7 \u3002\u53c8<code>edi</code>\u6765\u81ea\u4e8e\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\uff0c\u56e0\u6b64\u4ee5\u4e0b\u7b54\u6848\u662f\u53ef\u4ee5\u5b89\u5168\u62c6\u5f39\u7684\uff1a</p> <pre><code>7 0\n</code></pre> <p>\u8fdb\u4e00\u6b65\u7684\u9012\u5f52\u5206\u6790\u6709\u5f85\u586b\u5751\u3002</p>"},{"location":"CMU15-213/Lab2%20bombLab/#phase-5","title":"Phase 5","text":"<p>\u8fd9\u4e00\u5173\u8003\u7684\u662f\u6570\u7ec4\u5206\u914d\u548c\u8bbf\u95ee\u7684\u673a\u5668\u7ea7\u8868\u793a\uff0c\u5bf9\u5e94\u5185\u5bb9\u4e3a CS: APP \u7b2c\u4e00\u90e8\u5206 3.8 \u8282\u3002</p>"},{"location":"CMU15-213/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E9%93%BE%E6%8E%A5/","title":"CS:APP \u7b2c\u4e03\u7ae0 \u94fe\u63a5","text":""},{"location":"CMU15-213/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E9%93%BE%E6%8E%A5/#7-1","title":"7-1 \u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f","text":"<p>\u7a0b\u5e8f\u4ece\u6e90\u6587\u4ef6\u5230\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684\u7ffb\u8bd1\u6d41\u7a0b\uff1a\u9884\u5904\u7406\u2192\u7f16\u8bd1\u2192\u6c47\u7f16\u2192\u94fe\u63a5</p> <p>\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f\uff08compiler driver\uff09\uff1a\u5728\u7528\u6237\u9700\u8981\u65f6\u8c03\u7528\u9884\u5904\u7406\u5668\u3001\u7f16\u8bd1\u5668\u3001\u6c47\u7f16\u5668\u3001\u94fe\u63a5\u5668\u3002\u5982<code>gcc</code>\u547d\u4ee4\u5c31\u662f\u4e00\u4e2a compiler driver \u3002</p> <p>\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4ee5\u4e0b\u6e90\u6587\u4ef6\uff1a</p> <pre><code>// main.c\nint sum(int *a, int n);\nint array[2] = {1,2};\n\nint main(){\nint val = sum(array, 2);\nreturn val;\n}\n</code></pre> <pre><code>// sum.c\nint sum(int * a, int n){\nint i, s = 0;\nfor(i = 0; i &lt; n; i++){\ns += a[i];\n}\nreturn s;\n}\n</code></pre> <p><code>main.c</code>\u6267\u884c\u6570\u7ec4\u6c42\u548c\uff0c\u6c42\u548c\u51fd\u6570<code>sum</code>\u5b9a\u4e49\u5728<code>sum.c</code>\u4e2d\u3002\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u5c06\u4e0a\u8ff0\u6e90\u6587\u4ef6\u7ffb\u8bd1\u4e3a\u53ef\u6267\u884c\u6587\u4ef6<code>prog</code>\uff1a</p> <pre><code>linux&gt; gcc -Og -o prog main.c sum.c\n# gcc \u4e3a complier driver\n# -Og \u4e3a\u4f18\u5316\u7ea7\u522b\uff0c\u8be5\u7ea7\u522b\u5728O1\u7ea7\u522b\u4f18\u5316\u7684\u57fa\u7840\u4e0a\u53bb\u9664\u4e86\u5f71\u54cd\u8c03\u8bd5\u7684\u4f18\u5316\n# -o \u6307\u5b9a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u4e3a a.out\n</code></pre> <p>\u4e0a\u8ff0\u547d\u4ee4\u7684\u8be6\u7ec6\u6267\u884c\u6d41\u7a0b\uff1a</p> <ol> <li>\u8c03\u7528C\u9884\u5904\u7406\u5668<code>cpp</code>\uff1a<code>main.c</code>\u2192<code>/tmp/main.i</code></li> <li>\u8c03\u7528C\u7f16\u8bd1\u5668<code>ccl</code>\uff1a<code>/tmp/mian.i</code>\u2192<code>/tmp/main.s</code>\uff0c\u5176\u4e2d<code>main.s</code>\u662f ASCII \u6c47\u7f16\u8bed\u8a00\u6587\u4ef6</li> <li></li> </ol>"},{"location":"CMU15-213/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E9%93%BE%E6%8E%A5/#7-2","title":"7-2  \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6","text":"<pre><code>#include &lt;stdio.h&gt;\nint count = 10;\nint value;\n\nvoid func(int sum){\nprintf(\"sum is: %d\\n\", sum);\n}\n\nint main(){\nstatic int a = 1;\nstatic int b = 0;\nint x = 1;\nfunc(a + b + x);\nreturn 0;\n}\n</code></pre> <p>\u5373 ELF \u6587\u4ef6</p>"},{"location":"CMU15-213/%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E9%93%BE%E6%8E%A5/#7-3","title":"7-3 \u7b26\u53f7\u548c\u7b26\u53f7\u8868","text":"<p>\u4e3a\u4e86\u80fd\u5c06\u4e0d\u540c\u7a0b\u5e8f\u751f\u6210\u7684\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\u5230\u4e00\u8d77\uff0c\u9700\u8981\u57fa\u4e8e\u7b26\u53f7\u3002</p> <p>ELF \u6587\u4ef6\u4e2d\uff0c<code>.symtab</code>\u6bb5\u5b58\u50a8\u7b26\u53f7\u8868\uff1a<code>readelf -s main.o</code></p> <ul> <li>COMMON \u6bb5\uff1a\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf</li> <li>.bss\uff1a\u672a\u521d\u59cb\u5316\u7684\u9759\u6001\u53d8\u91cf\u3001\u521d\u59cb\u5316\u4e3a0\u7684\u5168\u5c40\u6216\u9759\u6001\u53d8\u91cf</li> </ul>"},{"location":"CMU15-213/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/","title":"3.8 \u6570\u7ec4","text":""},{"location":"CMU15-213/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/#381","title":"3.8.1 \u673a\u5668\u4e2d\u6570\u7ec4\u7684\u904d\u5386\u4e0e\u8bbf\u95ee","text":"<p>\u5728\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406\u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u8fc7\u6307\u4ee4\u7cfb\u7edf\u4e2d\u7684\u591a\u79cd CPU \u5bfb\u5740\u65b9\u5f0f\u3002\u91cd\u70b9\u590d\u4e60\u4ee5\u4e0b\u4e24\u79cd\uff1a</p> <ul> <li> <p>\u57fa\u5740\u5bfb\u5740</p> <p>\u5c06\u57fa\u5740\u5bc4\u5b58\u5668\uff08BX\uff09\u4e2d\u7684\u5185\u5bb9\uff0c\u52a0\u4e0a\u6307\u4ee4\u5b57\u4e2d\u7684\u5f62\u5f0f\u5730\u5740 A \uff0c\u5f62\u6210\u64cd\u4f5c\u6570\u7684\u6709\u6548\u5730\u5740\u3002</p> <p>\u5373 EA = (BX) + A</p> </li> </ul> <ul> <li> <p>\u53d8\u5740\u5bfb\u5740</p> <p>\u5c06\u53d8\u5740\u5bc4\u5b58\u5668\uff08IX\uff09\u4e2d\u7684\u5185\u5bb9\uff0c\u52a0\u4e0a\u6307\u4ee4\u5b57\u4e2d\u7684\u5f62\u5f0f\u5730\u5740 A \uff0c\u5f62\u6210\u64cd\u4f5c\u6570\u7684\u6709\u6548\u5730\u5740\u3002</p> <p>\u4e0e\u57fa\u5740\u5bfb\u5740\u7684\u533a\u522b\u5728\u4e8e\uff0c\u6307\u4ee4\u5b57\u4e2d\u7684 A \u662f\u56fa\u5b9a\u7684\uff0c\u800c IX \u7684\u5185\u5bb9\u4f1a\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d8\u5316\u3002</p> <p>\u5982\u5b9e\u73b0<code>int</code>\u7c7b\u578b\uff084 \u5b57\u8282\uff09\u6570\u7ec4<code>E</code>\u7684\u904d\u5386\u7d2f\u52a0\uff0c\u53ea\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u6307\u4ee4\uff08\u7701\u53bb\u4e86\u6570\u7ec4\u8fb9\u754c\u5224\u65ad\uff09\uff1a</p> <pre><code>1: mov IX+A, %eax ;\u5c06\u5f53\u524d\u5143\u7d20\u7684\u5185\u5b58\u5730\u5740\u5199\u5165%eax\n2: add (%eax), %ebx ;%ebx\u7d2f\u52a0\u5f53\u524d\u5143\u7d20\n3: add 0x4, %IX ;\u5730\u5740\u9012\u589e\u5230\u4e0b\u4e00\u5143\u7d20\n4: jmp 1 ;\u8df3\u8f6c\u56de\u7b2c1\u6761\u6307\u4ee4\n</code></pre> </li> </ul> <p>\u5f53\u4e00\u4e2a\u7a0b\u5e8f\u88ab\u8f7d\u5165\u5185\u5b58\u65f6\uff0c\u5176\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u5b58\u653e\u4e8e\u57fa\u5740\u5bc4\u5b58\u5668\u4e2d\u3002\u7531\u4e8e\u5206\u6bb5\u673a\u5236\uff0c\u7a0b\u5e8f\u4e2d\u6240\u58f0\u660e\u7684\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u9996\u5730\u5740\u76f8\u5bf9\u4e8e\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u7684\u504f\u79fb\u91cf\u53ef\u4ee5\u662f\u56fa\u5b9a\u7684\uff0c\u4ee4\u8fd9\u4e2a\u504f\u79fb\u91cf\u4e3a A\uff0c\u5c31\u53ef\u901a\u8fc7\u57fa\u5740\u5bfb\u5740\u7684\u65b9\u5f0f\uff0c\u627e\u5230\u8fd9\u4e2a\u6570\u7ec4\u3002</p> <p>\u6570\u7ec4\u6240\u5360\u636e\u7684\u5185\u5b58\u662f\u8fde\u7eed\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u53d8\u5740\u5bfb\u5740\u7684\u65b9\u5f0f\u8fdb\u4e00\u6b65\u904d\u5386\u8fd9\u4e2a\u6570\u7ec4\u3002</p> <p>\u552f\u4e00\u8981\u6ce8\u610f\u7684\u662f\u5730\u5740\u9012\u589e\u7684\u91cf\u3002\u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c\u7531\u4e8e\u6570\u7ec4\u662f<code>int</code>\u7c7b\u578b\uff0c\u6bcf\u4e2a\u5143\u7d20\u6240\u5360\u5185\u5b58\u4e3a 4 \u5b57\u8282\uff0c\u56e0\u6b64<code>%IX</code>\u6bcf\u6b21\u9012\u589e\u4e5f\u662f\u4ee5 4 \u4e3a\u5355\u4f4d\u3002</p> <p>\u540c\u7406\uff0c\u5982\u679c\u9700\u8981\u76f4\u63a5\u8bbf\u95ee\u67d0\u4e00\u5143\u7d20<code>E[i]</code>\uff0c\u4f7f\u7528\u6307\u4ee4\uff1a</p> <pre><code>movl i, %IX\nmovl (%BX, %IX, 4), %eax\n</code></pre> <p>\u8fd9\u5c06\u8ba1\u7b97\u51fa\u4e00\u4e2a\u5730\u5740<code>%BX+i*4</code>\uff0c\u5e76\u8bfb\u53d6\u8fd9\u4e2a\u5185\u5b58\u4f4d\u7f6e\u7684\u503c\uff0c\u5c06\u7ed3\u679c\u653e\u5230\u5bc4\u5b58\u5668<code>%eax</code>\u4e2d\u3002</p>"},{"location":"CMU15-213/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/#382","title":"3.8.2 \u6307\u9488\u8fd0\u7b97","text":"<p>\u5728 C \u8bed\u8a00\u4e2d\uff0c\u6307\u9488\u7684\u8fd0\u7b97\u770b\u4e0a\u53bb\u6709\u4e9b\u4e0d\u5408\u76f4\u89c9\uff1a\u6307\u9488\u662f\u5b58\u50a8\u4e86\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u7684\u53d8\u91cf\uff0c\u800c\u5f53\u4e00\u4e2a\u6307\u9488\u8fdb\u884c<code>+1</code>\u3001<code>-1</code>\u64cd\u4f5c\u65f6\uff0c\u5185\u5b58\u5730\u5740\u5374\u5e76\u6ca1\u6709\u771f\u7684<code>+1</code>\u3001<code>-1</code>\u2014\u2014\u5b9e\u9645\u4e0a\uff0c\u5185\u5b58\u5730\u5740\u7684\u53d8\u5316\u91cf\u662f\u7531\u7c7b\u578b\u51b3\u5b9a\u7684\u3002\u5f53\u4e00\u4e2a<code>int</code>\u6307\u9488\u8fdb\u884c<code>+1</code>\u3001<code>-1</code>\u65f6\uff0c\u5176\u5b9e\u5bf9\u5e94\u7684\u662f\u4e0b\u4e00\u4e2a<code>int</code>\u53d8\u91cf\u7684\u5730\u5740\u3001\u4e0a\u4e00\u4e2a<code>int</code>\u53d8\u91cf\u7684\u5730\u5740\u3002</p> <p>\u62bd\u8c61\u6765\u8bf4\uff0c\u5982\u679c\u6307\u9488<code>p</code>\u6307\u5411\u4e86\u4e00\u4e2a\u7c7b\u578b<code>T</code>\u7684\u53d8\u91cf\uff0c\u5176\u503c\uff08\u5185\u5b58\u5730\u5740\uff09\u4e3a $x_p$\uff0c\u800c\u7c7b\u578b<code>T</code>\u6240\u5360\u5b57\u8282\u6570\u4e3a $L$\uff0c\u5219<code>p+i</code>\u7684\u503c\u4e3a $x_p+L\\cdot i$\uff0c\u800c\u975e\u76f4\u89c9\u4e0a\u7684 $x_p+i$\u3002</p> <p>\u4e0b\u9762\u719f\u6089\u4e00\u4e0b\u5404\u79cd C \u8bed\u8a00\u7684\u8868\u8fbe\u5f0f\u3001\u5b83\u4eec\u7684\u7c7b\u578b\u3001\u503c\u4e0e\u6c47\u7f16\u4ee3\u7801\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u5982\u679c\u5728\u5b66\u4e60 C \u8bed\u8a00\u65f6\u5bf9\u6307\u9488\u65b9\u9762\u7684\u5185\u5bb9\u611f\u5230\u56f0\u96be\uff0c\u719f\u6089\u4e0b\u9762\u7684\u8868\u683c\u80fd\u591f\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5e2e\u52a9\u7406\u89e3\u6307\u9488\u3002</p> <p>\u6ce8\uff1a</p> <ul> <li><code>%rdx</code>\u5b58\u653e\u6570\u7ec4<code>E</code>\u7684\u9996\u5730\u5740\uff0c<code>%rcx</code>\u5b58\u653e\u7d22\u5f15<code>i</code>\uff0c<code>%eax</code>\u548c<code>%rax</code>\u5b58\u653e\u8868\u8fbe\u5f0f\u7ed3\u679c\uff1b</li> <li>$M[addr]$\u8868\u793a\u5185\u5b58\u4f4d\u7f6e<code>addr</code>\u5904\u7684\u503c\uff1b</li> <li><code>movl</code>\u5f3a\u8c03 4 \u5b57\u8282\u64cd\u4f5c\uff0c<code>movq</code>\u3001<code>leaq</code>\u5f3a\u8c03 8 \u5b57\u8282\u64cd\u4f5c\uff1b</li> <li>\u6700\u540e\u4e00\u884c\u8868\u660e\uff0c\u4e24\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u6307\u9488\u4e4b\u5dee\uff0c\u5176\u7ed3\u679c\u7c7b\u578b\u4e3a<code>long</code>\uff0c\u503c\u4e3a\u5730\u5740\u4e4b\u5dee/\u7c7b\u578b\u5927\u5c0f\u3002</li> </ul> \u8868\u8fbe\u5f0f \u7c7b\u578b \u503c \u6c47\u7f16\u4ee3\u7801 E int* $x_E$ <code>movq\u00a0%rdx,\u00a0%rax</code> E[0] int $M[x_E]$ <code>movl\u00a0(%rdx),\u00a0%rax</code> E[i] int $M[x_e+4i]$ <code>movl\u00a0(%rdx, %rcx, 4),\u00a0%eax</code> &amp;E[2] int* $x_E+4\\cdot2$ <code>leaq\u00a08(%rdx),\u00a0%rax</code> E+i-1 int* $x_E+4\\cdot i-4$ <code>leaq\u00a0-4(%rdx, %rcx, 4),\u00a0%eax</code> *(E+i-3) int $M[x_E+4\\cdot i-4\\cdot 3]$ <code>movl\u00a0-12(%rdx, %rcx, 4),\u00a0%eax</code> &amp;E[i]-E long $i$ <code>movq %rcx,\u00a0%rax</code>"},{"location":"CMU15-213/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/#383","title":"3.8.3 \u5d4c\u5957\u6570\u7ec4/\u591a\u7ef4\u6570\u7ec4","text":"<p>\u5f53\u6211\u4eec\u58f0\u660e\u4e86\u8fd9\u6837\u4e00\u4e2a\u6570\u7ec4\uff1a</p> <pre><code>int A[5][3];\n</code></pre> <p>\u53ef\u4ee5\u89c6\u4e3a\u662f\u4e00\u4e2a\u542b 5 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4 A \uff0c\u6bcf\u4e2a\u5143\u7d20\u53c8\u5404\u662f\u4e00\u4e2a\u542b 3 \u4e2a\u6574\u6570\u7684\u6570\u7ec4\uff0c\u5373\u6570\u7ec4\u7684\u5143\u7d20\u4e5f\u662f\u6570\u7ec4\uff0c\u5d4c\u5957\u6570\u7ec4\uff1b\u4e5f\u53ef\u4ee5\u89c6\u4e3a\u4e00\u4e2a 5 \u884c 3 \u5217\u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5171 15 \u4e2a\u6574\u6570\u5143\u7d20\uff0c\u5728\u5185\u5b58\u4e2d\u6309<code>A[0][0]</code>\u3001<code>A[0][1]</code>\u3001\u2026\u2026\u3001<code>A[4][1]\u3001A[4][2]</code>\u7684\u987a\u5e8f\u4f9d\u6b21\u6392\u5217\u3002</p>"},{"location":"CMU15-213/%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B/","title":"CMU 15-213 \u8ba1\u7b97\u673a\u7cfb\u7edf\u5bfc\u8bba","text":"<p>\u8bfe\u7a0b\u7f51\u7ad9\uff1ahttp://csapp.cs.cmu.edu/3e/home.html</p>"},{"location":"CS149/Note/","title":"Stanford CS149 \u5e76\u884c\u8ba1\u7b97 \u7b14\u8bb0","text":""},{"location":"CS149/Note/#01-why-parallelism","title":"01. Why Parallelism?","text":"<p>\uff08\u521d\u770b slides \u8fd8\u4ee5\u4e3a\u91cc\u9762\u7684 Demo \u662f\u4e00\u4e9b\u7a0b\u5e8f\u4ee3\u7801\uff0c\u7ed3\u679c\u6ca1\u627e\u7740\uff0c\u7ffb\u53bb\u770b\u8fd9\u95e8\u8bfe\u5728 CMU \u65f6\u7684\u5f55\u50cf\uff0c\u53d1\u73b0\u539f\u6765\u662f\u73b0\u573a\u8ba9\u5b66\u751f\u4e0a\u53f0\u6f14\u793a\u5bf9\u4e00\u4e9b\u5361\u7247\u4e0a\u7684\u6570\u5b57\u6c42\u548c\u2026\u2026\uff09</p>"},{"location":"CS149/Note/#_1","title":"\u5e76\u884c\u8ba1\u7b97\u7684\u76ee\u6807","text":"<p>\u5e76\u884c\u8ba1\u7b97\u7684\u4e3b\u8981\u76ee\u6807\u5c31\u662f\u52a0\u901f\u7a0b\u5e8f\u8fd0\u884c\u3002\u4f46\u52a0\u901f\u7684\u6700\u5927\u6548\u679c\u53d7\u4ee5\u4e0b\u56e0\u7d20\u9650\u5236\uff1a - \u901a\u4fe1\u5f00\u9500\uff1a\u8981\u6700\u5c0f\u5316\u901a\u4fe1\u5f00\u9500 - \u8d1f\u8f7d\u4e0d\u5747\u8861\uff1a\u8981\u7ed9\u8fdb\u7a0b\u5408\u7406\u5206\u53d1\u8ba1\u7b97\u4efb\u52a1</p> <p>\u7531\u4e8e\u6469\u5c14\u5b9a\u5f8b\u7684\u5b58\u5728\uff0c\u8fc7\u53bb\u8ba4\u4e3a\u505a\u5e76\u884c\u5904\u7406\u7684\u6027\u4ef7\u6bd4\u662f\u4e0d\u9ad8\u7684\u3002\u4e00\u76f4\u5230\u5341\u4e94\u5e74\u4ee5\u524d\uff0c\u5904\u7406\u5668\u6027\u80fd\u63d0\u5347\u6709\u4e24\u4e2a\u91cd\u8981\u56e0\u7d20\uff1a - \u5229\u7528\u6307\u4ee4\u7ea7\u5e76\u884c\uff08\u8d85\u6807\u91cf\u6267\u884c\uff09 - \u63d0\u5347CPU\u65f6\u949f\u9891\u7387</p> <p>\u8d85\u6807\u91cf\u6267\u884c\u5728\u5904\u7406\u5668\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u53d1\u5c04\u6307\u4ee4\u6570\u4ece1\u63d0\u5347\u52304\u65f6\uff0c\u7a0b\u5e8f\u52a0\u901f\u975e\u5e38\u663e\u8457\uff0c\u4f46\u4ece4\u5f00\u59cb\u7ee7\u7eed\u589e\u52a0\uff0c\u52a0\u901f\u5c31\u5f88\u5c0f\u4ee5\u81f3\u4e8e\u51e0\u4e4e\u6ca1\u6709\u4e86\u3002</p> <p>CPU\u65f6\u949f\u9891\u7387\u7684\u63d0\u5347\u4e5f\u5728\u8fd1\u5341\u5e74\u6765\u9677\u5165\u74f6\u9888\uff0c\u51e0\u4e4e\u505c\u6ede\uff0c\u8fd9\u56e0\u4e3a\u53d7\u8017\u80fd\u6240\u9650\uff0c\u8017\u80fd\u4f1a\u968f\u7740\u9891\u7387\u7684\u63d0\u9ad8\u800c\u589e\u52a0\u3002</p> <p>\u7efc\u4e0a\uff0c\u5355\u6307\u4ee4\u6d41\u7684\u6027\u80fd\u63d0\u5347\u5df2\u7ecf\u5230\u9876\u4e86\u3002\u76ee\u524d\u67b6\u6784\u5e08\u901a\u8fc7\u589e\u52a0\u6267\u884c\u5355\u5143\u6765\u63d0\u5347\u5904\u7406\u5668\u901f\u5ea6\uff0c\u5373\u8981\u6c42\u5e76\u884c\u5316\u3002</p>"},{"location":"CS149/Note/#cpu","title":"CPU\u5982\u4f55\u6267\u884c\u6307\u4ee4","text":"<p>\u5b66\u8fc7\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406\u7684\u4e00\u822c\u90fd\u6e05\u695a\uff1a\u53d6\u6307\u2192\u53d6\u6570\u2192\u8ba1\u7b97\u2192\u5b58\u6570\u3002\u4e0b\u9762\u8fd9\u5f20\u56fe\u4e5f\u753b\u5f97\u975e\u5e38\u6e05\u6670\uff1a</p> <p></p>"},{"location":"CS149/Note/#_2","title":"\u5199\u5e76\u884c\u7a0b\u5e8f\u9700\u8981\u8003\u8651\u7684","text":"<ul> <li>\u95ee\u9898\u5206\u89e3</li> <li>\u901a\u4fe1</li> <li>\u540c\u6b65</li> </ul>"},{"location":"CS149/Note/#02-a-modern-multi-core-processor","title":"02. A Modern Multi-Core Processor","text":""},{"location":"CS149/%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B/","title":"Stanford CS149 \u5e76\u884c\u8ba1\u7b97","text":"<p>\u8bfe\u7a0b\u7f51\u7ad9\uff1ahttps://gfxcourses.stanford.edu/cs149/fall22</p>"},{"location":"LaTeX/1.1%20%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","title":"\u73af\u5883\u914d\u7f6e","text":""},{"location":"LaTeX/1.1%20%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#overleaf","title":"\u4f7f\u7528 Overleaf \u5728\u7ebf\u7f16\u8f91","text":"<p>Overleaf \u5b98\u7f51\uff1ahttps://www.overleaf.com/project</p> <p>\u6253\u5f00\u5373\u7528\uff0c\u652f\u6301 LaTeX \u6587\u6863\u7684\u5b9e\u65f6\u9884\u89c8\uff08\u5b9e\u9645\u4e0a\u662f\u81ea\u52a8\u7f16\u8bd1\uff09\u3001\u591a\u4eba\u534f\u4f5c\u3001\u4e91\u7aef\u5b58\u50a8\u7b49\u3002</p> <p></p>"},{"location":"LaTeX/1.1%20%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","title":"\u4f7f\u7528 VsCode \u672c\u5730\u7f16\u8f91","text":"<p>\u53c2\u8003\uff1ahttps://zhuanlan.zhihu.com/p/38178015</p>"},{"location":"MIT6.824/%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B/","title":"MIT 6.824 \u5206\u5e03\u5f0f\u7cfb\u7edf","text":""},{"location":"MIT6.828/Environment%20Setup/","title":"\u73af\u5883\u914d\u7f6e","text":"<p>MIT6.828\u8fd9\u95e8\u8bfe\u7a0b\u57282018\u5e74\u4e4b\u540e\u5df2\u7ecf\u6539\u7ec4\u6210\u5176\u4ed6\u8bfe\u7a0b\uff08MITS6.081\uff09\uff0c\u8bfe\u7a0b\u5b9e\u9a8c\u7684\u66f4\u65b0\u4e5f\u505c\u6b62\u57282018\u5e74\uff0c\u56e0\u6b64\u73af\u5883\u914d\u7f6e\u65b9\u9762\u53ef\u80fd\u4f1a\u51fa\u73b0\u5404\u79cd\u5404\u6837\u7684\u95ee\u9898\uff0c\u4e0b\u9762\u4e3a2023\u5e741\u6708\u8fdb\u884c\u7684\u914d\u7f6e\u6d41\u7a0b\u3002 \u73af\u5883\uff1aVMWare\u865a\u62df\u673a Ubuntu 22.04LTS x86_64</p>"},{"location":"MIT6.828/Environment%20Setup/#1","title":"1. \u7f16\u8bd1\u5668\u5de5\u5177\u94fe\u68c0\u67e5","text":"<ol> <li><code>bash    objdump -i    # \u7b2c\u4e8c\u884c\u5e94\u663e\u793aelf32-i386</code></li> <li>\u5b89\u88c5GCC\u7b49\u4e00\u7cfb\u5217\u7f16\u8bd1\u5de5\u5177\u94fe    <pre><code>sudo apt-get install build-essential gdb\n</code></pre></li> <li> <pre><code>gcc -m32 -print-libgcc-file-name\n# \u5e94\u663e\u793a\u6709/usr/lib/gcc/x86_64-linux-gnu/version/32/libgcc.a\n</code></pre> </li> <li>\u5bf9\u4e8e64\u4f4d\u7cfb\u7edf\uff0c\u8fd8\u9700\u8981\u5b89\u88c532\u4f4d\u652f\u6301\uff1a    <pre><code>sudo apt-get install gcc-multilib\n</code></pre></li> </ol>"},{"location":"MIT6.828/Environment%20Setup/#2-qemu","title":"2. QEMU\u5b89\u88c5","text":"<p>\u8bfe\u7a0b\u63d0\u4f9b\u4e86\u5b83\u5b9a\u5236\u7684QEMU\u7248\u672c\uff0c\u5e76\u4e14\u5f3a\u70c8\u5efa\u8bae\u5b89\u88c5\u8fd9\u4e00\u7248QEMU\u800c\u4e0d\u662f\u901a\u8fc7\u5305\u7ba1\u7406\u5668\u5b89\u88c5\u7684QEMU\u3002</p> <p>1.\u4e0b\u8f7d\u8bfe\u7a0b\u63d0\u4f9b\u7684\u5b9a\u5236\u7248QEMU\u6e90\u7801    <pre><code>git clone https://github.com/mit-pdos/6.828-qemu.git qemu\n</code></pre> 2.\u5b89\u88c5Python2.7\uff08\u81ea\u5e26\u7684\u592a\u65b0\u4e86\u5b89\u88c5\u7a0b\u5e8f\u4e0d\u8ba4\u2026\u2026\uff09\u53ca\u4e00\u7cfb\u5217\u4f9d\u8d56\u5e93    <pre><code>sudo apt-get install python2.7 &amp;&amp;\nsudo apt-get install libsdl1.2-dev &amp;&amp; \nsudo apt-get install libtool-bin &amp;&amp;\nsudo apt-get install libglib2.0-dev &amp;&amp; \nsudo apt-get install libz-dev &amp;&amp;\nsudo apt-get install libpixman-1-dev </code></pre> 3.\u914d\u7f6e\u5b89\u88c5\u76ee\u5f55    <pre><code>cd qemu &amp;&amp; ./configure --disable-kvm --disable-werror --target-list=\"i386-softmmu x86_64-softmmu\" --python=/usr/bin/python2.7 --prefix=$HOME/MIT6.828Lab/qemu\n#\u9ed8\u8ba4\u5c06qemu\u5b89\u88c5\u5230/usr/local\u76ee\u5f55\u4e0b\n#\u5982\u679c\u9700\u8981\u4fee\u6539\u5b89\u88c5\u76ee\u5f55\uff0c\u5728\u547d\u4ee4\u91cc\u52a0 --prefix=\u5b89\u88c5\u8def\u5f84 \u5373\u53ef\n</code></pre> 4.\u627e\u5230\u6587\u4ef6<code>qemu/qga/commands-posix.c</code>\uff0c\u5728\u6587\u4ef6\u524d\u9762\u589e\u52a0\u4e00\u884c<code>#include &lt;sys/sysmacros.h&gt;</code>\uff0c\u4fdd\u5b58</p> Warning <p>\u5982\u679c\u4e0d\u6267\u884c\u8fd9\u4e00\u6b65\uff0c\u53ef\u80fd\u4f1a\u62a5\u9519: undefined reference to 'major'</p> <p>5.\u7f16\u8bd1\u5b89\u88c5 <pre><code>sudo make &amp;&amp; sudo make install\n#\u4e00\u5b9a\u8981\u6709sudo\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u6743\u9650\u4e0d\u8db3\u62a5\u9519\n</code></pre> 6.\u68c0\u67e5QEMU\u662f\u5426\u5b89\u88c5\u6210\u529f    <pre><code>ls /usr/local/bin | grep qemu # \u8fd9\u91cc\u5047\u8bbeqemu\u5b89\u88c5\u5728\u9ed8\u8ba4\u4f4d\u7f6e\n# \u5e94\u663e\u793a\u4ee5\u4e0b\u7ed3\u679c\uff0c\u5176\u4e2dqemu-system-i386\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684\nqemu-ga\nqemu-img\nqemu-io\nqemu-nbd\nqemu-system-i386\nqemu-system-x86_64\n</code></pre></p>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/","title":"MIT 6.828-Lab 1: Booting a PC","text":""},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#part-1-pc-bootstrap","title":"Part 1: PC Bootstrap","text":""},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#0","title":"0. \u524d\u7f6e\u77e5\u8bc6","text":""},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#x86i386x86-64","title":"x86\u3001i386\u3001x86-64","text":"<p>x86\uff0c\u53c8\u79f0 IA-32\uff08Intel Architecture, 32-bit\uff09\uff0c\u6cdb\u6307\u4e00\u7cfb\u5217\u57fa\u4e8eIntel 8086\u4e14\u5411\u540e\u517c\u5bb9\u7684\u4e2d\u592e\u5904\u7406\u5668\u6307\u4ee4\u96c6\u67b6\u6784\u3002\u8fd9\u4e2a\u540d\u79f0\u6e90\u4e8e\u8fd9\u4e2a\u7cfb\u5217\u65e9\u671f\u7684\u5904\u7406\u5668\u540d\u79f0\uff0c\u5b83\u4eec\u90fd\u662f<code>80x86</code>\u683c\u5f0f\uff0c\u5982<code>8086</code>\u3001<code>80186</code>\u3001<code>80286</code>\u7b49\u3002</p> <p>\u9700\u8981\u7279\u522b\u6307\u51fa\u7684\u662f\uff0cx86\u7cfb\u5217\u7684\u7b2c\u4e00\u6b3e\u82af\u7247<code>8086</code>\u652f\u630116\u4f4d\u8fd0\u7b97\uff08\u5373\u8fd0\u7b97\u5668\u4e00\u6b21\u6700\u591a\u80fd\u5904\u740616\u4f4d\u957f\u7684\u6570\u636e\u3001\u5bc4\u5b58\u5668\u6700\u5927\u957f\u5ea6\u4e3a16\u4f4d\u3001\u5bc4\u5b58\u5668\u548c\u8fd0\u7b97\u5668\u4e4b\u95f4\u7684\u6570\u636e\u901a\u8def\u4e3a16\u4f4d\uff09\uff0c\u4f46\u670920\u4f4d\u5730\u5740\u603b\u7ebf\uff0c\u5373\u53ef\u5bfb\u5740\u5185\u5b58\u5927\u5c0f\u4e3a 1MB\u3002</p> <p>i386 \u662f<code>80386</code>\u5904\u7406\u5668\u7684\u522b\u540d\uff0c\u4f46\u4e00\u822c\u6765\u8bf4\u201d\u9002\u7528\u4e8e i386\u201c\u7b49\u540c\u4e8e\"\u9002\u7528\u4e8ei386\u91c7\u7528\u7684\u67b6\u6784 x86\"\uff0c\u56e0\u6b64\u5728\u76f8\u5173\u8bed\u5883\u4e0b\u5c06 i386 \u89c6\u4e3a\u6307\u4ee3 x86 \u67b6\u6784\u4e5f\u662f\u53ef\u4ee5\u7684</p> <p>x86-64 \u662f\u57fa\u4e8e x86 \u7684 64 \u4f4d\u6269\u5c55\u67b6\u6784\u3002\u4e00\u822c\u8bf4 x86 \u662f 32 \u4f4d\u67b6\u6784\uff08\u867d\u7136\u6700\u521d\u4e24\u4ee3CPU\u662f16\u4f4d\u7684\uff09\uff0c\u5c06\u8be5\u67b6\u6784\u6269\u5c55\u81f3 64 \u4f4d\u662fAMD\u5148\u4e8eIntel\u5b8c\u6210\u7684\uff0c\u5e76\u547d\u540d\u4e3a AMD 64\uff0cIntel\u968f\u540e\u624d\u63a8\u51fa\u4e0e AMD 64 \u67b6\u6784\u517c\u5bb9\u7684\u5904\u7406\u5668\uff0c\u5e76\u547d\u540d\u4e3a Intel 64\uff0c\u5373 x86-64\u3002</p> <p>\uff08\u6ce8\uff1ax86=IA-32\uff0c\u4f46 x86-64\u2260IA-64\uff0cIA-64 \u662f\u5168\u65b0\u7684\u67b6\u6784\uff0c\u4e0e x86 \u5b8c\u5168\u6ca1\u6709\u76f8\u4f3c\u6027\uff09</p>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#att","title":"\u6c47\u7f16\u6307\u4ee4\u683c\u5f0f\uff1aAT&amp;T","text":"<p>\u5b9e\u9a8c\u4e2d GDB \u8c03\u8bd5\u663e\u793a\u7684\u6c47\u7f16\u4ee3\u7801\u90fd\u662f AT&amp;T \u683c\u5f0f\u3002\u5bf9\u4e8e\u672c\u5b9e\u9a8c\u800c\u8a00\uff0c\u6709\u6c47\u7f16\u57fa\u7840\u518d\u597d\u4e0d\u8fc7\uff0c\u4f46\u5982\u679c\u6ca1\u6709\uff0c\u4e5f\u6ca1\u5fc5\u8981\u5b8c\u6574\u5b66\u4e00\u904d\u518d\u6765\uff0c\u5bf9\u4e0b\u5217\u5e38\u7528\u8bed\u6cd5\u683c\u5f0f\u6709\u4e2a\u5927\u81f4\u5370\u8c61\u5c31\u591f\u7528\u4e86\uff0c\u51fa\u73b0\u964c\u751f\u8bed\u6cd5\u518d\u67e5\u3002</p> <pre><code>pushb %eax \n# \u5c06\u5bc4\u5b58\u5668eax\u7684\u503c\u538b\u6808\u3002\u5bc4\u5b58\u5668\u540d\u524d\u8981\u52a0%\uff0c\u540e\u7f00b\u8868\u793a\u64cd\u4f5c\u6570\u5b57\u957f\u4e3a\u4f4e8\u4f4d\npushb $1 # \u5c06\u5341\u516d\u8fdb\u5236\u65701\u538b\u6808\u3002\u76f4\u63a5\u7ed9\u51fa\u6570\u503c\uff08\u79f0\u4e3a\u7acb\u5373\u6570\uff09\u65f6\u8981\u5728\u524d\u9762\u52a0$\n</code></pre> <pre><code>addl $1, %eax \n#\u5c06\u5bc4\u5b58\u5668eax\u7684\u503c+1\u540e\u7ed3\u679c\u5b58\u5165eax\uff0c\u540e\u7f00l\u8868\u793a\u64cd\u4f5c\u6570\u5b57\u957f\u4e3a\u5168\u90e832\u4f4d\nmovw %ebx, %eax\n#\u5c06\u5bc4\u5b58\u5668ebx\u7684\u503c\u8d4b\u7ed9\u5bc4\u5b58\u5668eax\uff0c\u540e\u7f00w\u8868\u793a\u64cd\u4f5c\u6570\u5b57\u957f\u4e3a\u4f4e16\u4f4d\n</code></pre>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#_1","title":"\u5b9e\u6a21\u5f0f\u4e0e\u4fdd\u62a4\u6a21\u5f0f","text":"<p>\u5b9e\u6a21\u5f0f</p> <p>x86 \u7cfb\u5217\u7684\u7b2c\u4e00\u4ee3\u82af\u7247<code>8086</code> \u662f 16 \u4f4d\u5904\u7406\u5668\uff0c\u6709 20 \u6839\u5730\u5740\u7ebf\uff0c\u53ea\u652f\u6301<code>1MB</code>\u5185\u5b58\u7a7a\u95f4\u5bfb\u5740\u3002 x86 \u67b6\u6784\u662f\u5411\u540e\u517c\u5bb9\u7684\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u5f53\u521d\u57fa\u4e8e<code>8086</code>\u8bbe\u8ba1\u7684\u7a0b\u5e8f\u5728\u5982\u4eca\u666e\u904d\u5185\u5b58\u5927\u5c0f\u4e3a<code>4GB</code>\u7684 x86 \u8ba1\u7b97\u673a\u4e2d\u8fd8\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u5fc5\u987b\u5c06\u8fd9\u521d\u59cb\u7684<code>1MB</code>\u4fdd\u7559\u4e0b\u6765\uff0c\u4e14\u5f53\u5e74<code>8086</code>\u5728\u8fd9<code>1MB</code>\u5185\u5b58\u7a7a\u95f4\u91cc\u9075\u5faa\u7684\u4e00\u4e9b\u89c4\u5219\uff0c\u540e\u7eed\u7684 x86 \u7cfb\u5217\u82af\u7247\u4e5f\u5fc5\u987b\u9075\u5faa\u3002</p> <p>\u8fd9<code>1MB</code>\u7a7a\u95f4\u4ee5\u53ca\u5728\u8fd9\u7a7a\u95f4\u5185\u91c7\u7528\u7684\u5bfb\u5740\u65b9\u5f0f\u3001\u5730\u5740\u957f\u5ea6\u7b49\u7b49\u5f53\u5e74<code>8086</code>\u9075\u5faa\u7684\u89c4\u5b9a\uff0c\u5c31\u662f\u5b9e\u6a21\u5f0f\u3002</p> <p>\u663e\u7136\u5f53\u5e74<code>8086</code>\u52a0\u7535\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u53ea\u80fd\u5b58\u50a8\u5728\u8fd9<code>1MB</code>\u4e2d\uff0c\u56e0\u6b64\u540e\u6765\u7684 x86 \u82af\u7247\u52a0\u7535\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u4e5f\u5fc5\u7136\u5b58\u50a8\u5728\u8fd9<code>1MB</code>\u7a7a\u95f4\u4e2d\uff0c\u8fd9\u5df2\u6210\u4e3a\u8bbe\u8ba1\u89c4\u8303\u4ee5\u4fdd\u8bc1\u5411\u540e\u517c\u5bb9\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cx86 \u7cfb\u5217\u82af\u7247\u52a0\u7535\u540e\u90fd\u9996\u5148\u8fdb\u5165\u5b9e\u6a21\u5f0f\uff0c\u5b8c\u6210\u4e0e\u5f53\u5e74<code>8086</code>\u5f00\u673a\u5f15\u5bfc\u7c7b\u4f3c\u7684\u64cd\u4f5c\u540e\uff0c\u518d\u6253\u5f00\u67d0\u4e2a\u5f00\u5173\uff0c\u542f\u7528\u8fd9<code>1MB</code>\u4ee5\u5916\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u4ece\u5b9e\u6a21\u5f0f\u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\u3002</p> <ul> <li> <p>\u5bfb\u5740\u7a7a\u95f4</p> <p>\u5b9e\u6a21\u5f0f\u4e0b\uff0c\u5bfb\u5740\u7a7a\u95f4\u4e3a<code>1MB</code>\uff0c\u5177\u4f53\u7684\u5730\u5740\u8303\u56f4\u4e3a<code>0x00000</code>\u5230<code>0xFFFFF</code>\uff1b</p> </li> </ul> <ul> <li> <p>\u5730\u5740\u8ba1\u7b97\u65b9\u5f0f</p> <p>\u7531\u4e8e<code>8086</code>\u7684\u5bc4\u5b58\u5668\u662f 16 \u4f4d\u957f\u7684\uff0c\u8981\u8868\u793a 20 \u4f4d\u957f\u7684\u5730\u5740\uff0c\u8981\u4f7f\u7528<code>cs</code>\u548c<code>ip</code>\u4e24\u4e2a\u5bc4\u5b58\u5668\uff0c\u5730\u5740\u8ba1\u7b97\u65b9\u5f0f\u5982\u4e0b\uff1a</p> <p>\u7269\u7406\u5730\u5740  = \u6bb5\u57fa\u5740(cs) \u00d7 16 + \u6bb5\u5185\u504f\u79fb\u91cf(ip)</p> <p>\u5373\u4f7f\u540e\u6765\u7684 x86 \u82af\u7247\u7684\u5bc4\u5b58\u5668\u6709 32 \u4f4d\u957f\uff0c\u8db3\u591f\u5b58\u50a8\u5b8c\u6574\u5730\u5740\uff0c\u5728\u5b9e\u6a21\u5f0f\u4e0b\u4e5f\u5fc5\u987b\u6309\u7167\u4e0a\u8ff0\u65b9\u5f0f\u8fdb\u884c\u5730\u5740\u5b58\u50a8\u548c\u8ba1\u7b97\u3002</p> </li> </ul> <ul> <li> <p>\u5bc4\u5b58\u5668</p> <ul> <li> <p>\u901a\u7528\u5bc4\u5b58\u5668</p> <p>x86 \u7cfb\u5217\u82af\u7247\u7684\u901a\u7528\u5bc4\u5b58\u5668\u90fd\u6709 8 \u4e2a\uff0c\u540d\u79f0\u53ca\u7279\u5b9a\u7528\u9014\u90fd\u6cbf\u7528\u81ea\u521d\u4ee3\u82af\u7247<code>8086</code>\u3002\u540e\u6765\u82af\u7247\u4f4d\u6570\u6269\u5c55\u5230 32 \u4f4d\uff0c\u901a\u7528\u5bc4\u5b58\u5668\u4e5f\u76f8\u5e94\u6269\u5c55\u5230 32 \u4f4d\uff0c\u5728\u539f\u6765\u540d\u79f0\u7684\u57fa\u7840\u4e0a\u5f00\u5934\u52a0\u4e86<code>E</code>\uff0c\u4e0e<code>8086</code>\u7684 16 \u4f4d\u5bc4\u5b58\u5668\u76f8\u533a\u522b\u3002</p> <ul> <li>EAX\uff1a\u4e00\u822c\u7528\u4f5c\u7d2f\u52a0\u5668\uff08Add\uff09</li> <li>EBX\uff1a\u4e00\u822c\u7528\u4f5c\u57fa\u5740\u5bc4\u5b58\u5668\uff08Base\uff09</li> <li>ECX\uff1a\u4e00\u822c\u7528\u6765\u8ba1\u6570\uff08Count\uff09</li> <li>EDX\uff1a\u4e00\u822c\u7528\u6765\u5b58\u653e\u6570\u636e\uff08Data\uff09</li> <li>ESP\uff1a\u4e00\u822c\u7528\u4f5c\u5806\u6808\u6307\u9488\uff08Stack Pointer\uff09</li> <li>EBP\uff1a\u4e00\u822c\u7528\u4f5c\u57fa\u5740\u6307\u9488\uff08Base Pointer\uff09</li> <li>ESI\uff1a\u4e00\u822c\u7528\u4f5c\u6e90\u53d8\u5740\uff08Source Index\uff09</li> <li>EDI\uff1a\u4e00\u822c\u7528\u4f5c\u76ee\u6807\u53d8\u5740\uff08Destinatin Index\uff09</li> </ul> </li> </ul> <ul> <li>\u72b6\u6001\u5bc4\u5b58\u5668<ul> <li>EFLAGS\uff1a\u72b6\u6001\u6807\u5fd7\u5bc4\u5b58\u5668\u3002\u5206\u4e3aCF\u3001ZF\u3001SF\u3001OF\u7b49\u72b6\u6001\u4f4d\u3002</li> <li>DF\uff1aDirection Flag\u3002\u8bbe\u7f6eDF\u6807\u5fd7\u4f7f\u5f97\u4e32\u6307\u4ee4\u81ea\u52a8\u9012\u51cf\uff08\u4ece\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u65b9\u5411\u5904\u7406\u5b57\u7b26\u4e32\uff09\uff0c\u6e05\u9664\u8be5\u6807\u5fd7\u5219\u4f7f\u5f97\u4e32\u6307\u4ee4\u81ea\u52a8\u9012\u589e\u3002STD\u4ee5\u53caCLD\u6307\u4ee4\u5206\u522b\u7528\u4e8e\u8bbe\u7f6e\u4ee5\u53ca\u6e05\u9664DF\u6807\u5fd7\u3002</li> </ul> </li> <li>\u6bb5\u5bc4\u5b58\u5668<ul> <li>CS (Code Segment)\uff1a\u4ee3\u7801\u6bb5\u5bc4\u5b58\u5668\uff1b</li> <li>DS (Data Segment)\uff1a\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff1b</li> <li>SS (Stack Segment)\uff1a\u5806\u6808\u6bb5\u5bc4\u5b58\u5668\uff1b\u572816\u4f4d\u4e0b\u4e0eSP\u5bc4\u5b58\u5668\u7ec4\u5408\u4f7f\u7528\uff0cSS:SP\u4f5c\u4e3a\u6808\u9876\u6307\u9488\uff1b\u572832\u4f4d\u4e0bESP\u5bc4\u5b58\u5668\u8db3\u591f\u4f5c\u4e3a\u6808\u9876\u6307\u9488\uff0cSS\u5c31\u65e0\u5173\u7d27\u8981\u4e86\u3002</li> <li>ES (Extra Segment)\uff1a\u9644\u52a0\u6bb5\u5bc4\u5b58\u5668\uff1b</li> </ul> </li> </ul> </li> </ul> <p>\u4fdd\u62a4\u6a21\u5f0f</p> <p><code>8086</code>\u3001<code>80186</code>\u90fd\u662f 16 \u4f4d\u5904\u7406\u5668\u300120\u4f4d\u7269\u7406\u5730\u5740\uff0c\u6ca1\u6709\u865a\u62df\u5185\u5b58\u7684\u6982\u5ff5\uff0c\u6bcf\u4e00\u4e2a\u5730\u5740\u90fd\u80fd\u5728\u5b58\u50a8\u82af\u7247\u4e2d\u4e00\u4e00\u5bf9\u5e94\u5730\u627e\u5230\u7269\u7406\u5b58\u50a8\u5355\u5143\uff0c\u5fc5\u987b\u4e5f\u53ea\u80fd\u8fd0\u884c\u5728\u5b9e\u6a21\u5f0f\u4e0b\u3002</p> <p>\u4ece<code>80286</code>\uff0816\u4f4d\u5904\u7406\u5668\uff09\u5f00\u59cb\u6709\u4e86\u865a\u62df\u5185\u5b58\uff0c\u4e3a\u4e86\u8fdb\u884c\u865a\u62df\u5185\u5b58\u7ba1\u7406\uff0c\u4ece\u65e9\u5148\u7684\u6bb5\u57fa\u5740\u5bc4\u5b58\u5668\u6f14\u5316\u51fa\u4e13\u95e8\u7684\u6bb5\u8868\uff0c\u5bfb\u5740\u65b9\u5f0f\u4e5f\u4e0d\u518d\u9075\u5faa\u5b9e\u6a21\u5f0f\u4e0b\u7684\u8ba1\u7b97\u65b9\u5f0f\uff0c\u9700\u8981\u4ece\u5b9e\u6a21\u5f0f\u4e2d\u533a\u5206\u51fa\u6765\uff0c\u56e0\u6b64\u6709\u4e86 16 \u4f4d\u4fdd\u62a4\u6a21\u5f0f\u3002</p> <p>\u4ece<code>80386</code>\u5f00\u59cb\uff0c\u5904\u7406\u5668\u90fd\u4e3a 32 \u4f4d\uff0c\u5bf9\u5e94\u5f15\u5165\u4e86 32 \u4f4d\u4fdd\u62a4\u6a21\u5f0f\u3002Windows 2000 \u3001Windows XP \u90fd\u662f\u5728 32 \u4f4d\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u8fd0\u884c\u7684\u3002</p> <p>\u4fdd\u62a4\u6a21\u5f0f\u4e0b\uff0c\u5bfb\u5740\u8303\u56f4\u4e0d\u518d\u53d7\u5236\u4e8e\u5b9e\u6a21\u5f0f\u4e0b\u7684 <code>1MB</code>\uff0c\u5730\u5740\u8ba1\u7b97\u65b9\u5f0f\u4e5f\u6709\u6240\u4e0d\u540c\u3002</p>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#1-jos","title":"1. \u8bd5\u8fd0\u884c JOS","text":"<ol> <li> <p>\u4e0b\u8f7d Lab 1 \u6e90\u7801\uff1a<code>git clone https://pdos.csail.mit.edu/6.828/2018/jos.git lab</code></p> </li> <li> <p>\u6784\u5efa JOS \u955c\u50cf\uff1a</p> <pre><code>$ cd lab &amp;&amp; make\n# \u5e94\u663e\u793a\u4ee5\u4e0b\u4fe1\u606f\n+ as kern/entry.S\n+ cc kern/entrypgdir.c\n+ cc kern/init.c\n+ cc kern/console.c\n+ cc kern/monitor.c\n+ cc kern/printf.c\n+ cc kern/kdebug.c\n+ cc lib/printfmt.c\n+ cc lib/readline.c\n+ cc lib/string.c\n+ ld obj/kern/kernel\nld: warning: section `.bss' type changed to PROGBITS\n+ as boot/boot.S\n+ cc -Os boot/main.c\n+ ld boot/boot\nboot block is 396 bytes (max 510)\n+ mk obj/kern/kernel.img\n</code></pre> </li> <li> <p>\u8fd0\u884cJOS\uff1a<code>make qemu</code>\uff08\u6ce8\uff1a\u5982\u679c\u7528\u7684Linux\u662f\u4e91\u670d\u52a1\u5668\u4e4b\u7c7b\u7684\u6ca1\u6709\u56fe\u5f62\u754c\u9762\u53ea\u6709\u547d\u4ee4\u884c\uff0c\u4f7f\u7528<code>make qemu-nox</code>\uff09</p> <p></p> <p>\u6309<code>Ctrl+a x</code>\u9000\u51fa JOS</p> </li> <li> <p>\u5230\u8fd9\u4e00\u6b65\u8bf4\u660e Lab 1 \u7684\u73af\u5883\u914d\u7f6e\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u7684\u4efb\u52a1\u5c31\u662f\u4ee5\u8fd9\u4e2a\u53ea\u6709\u7b80\u5355\u529f\u80fd\u7684 OS \u4f5c\u4e3a\u7814\u7a76\u5bf9\u8c61\uff0c\u5206\u6790 CPU \u4ece\u52a0\u7535\u6267\u884c\u7b2c\u4e00\u6761\u6307\u4ee4\u5f00\u59cb\u5230\u52a0\u8f7d JOS \u7684\u8fc7\u7a0b\u3002</p> </li> </ol>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#2-gdb-pc","title":"2. \u4f7f\u7528 GDB \u7814\u7a76 PC \u542f\u52a8\u7684\u7b2c\u4e00\u6b65","text":"<p>\u6253\u5f00\u4e00\u4e2ashell\u7a97\u53e3\uff0c\u6267\u884c</p> <pre><code>cd lab &amp;&amp; make qemu-gdb #\u5982\u679c\u6ca1\u6709\u56fe\u5f62\u754c\u9762\uff0c\u4f7f\u7528make qemu-nox-gdb\n</code></pre> <p>\u518d\u5f00\u4e00\u4e2ashell\u7a97\u53e3\uff0c\u6267\u884c</p> <pre><code>cd lab &amp;&amp; make gdb\n</code></pre> <p>\u5e94\u663e\u793a\u4ee5\u4e0b\u4fe1\u606f</p> <pre><code>$ cd lab &amp;&amp; make gdb\ngdb -n -x .gdbinit # GDB \u7684\u542f\u52a8\u914d\u7f6e\u6587\u4ef6\uff0c\u7531 lab \u63d0\u4f9b\n... # \u4e00\u5806 GDB \u7684\u7248\u672c\u53ca\u4ecb\u7ecd\u4fe1\u606f\nThe target architecture is set to \"i8086\".\n# JOS \u7cfb\u7edf\u7a0b\u5e8f\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\n[f000:fff0]    0xffff0: ljmp   $0xf000,$0xe05b\n0x0000fff0 in ?? ()\n+ symbol-file obj/kern/kernel\n</code></pre> <p>\u6ce8\u610f\uff01\u5982\u679c\u4f60\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u662f0xffff0: ljmp   \\$0x3630,$0xf000e05b\uff0c\u8bf4\u660e GDB \u4ee532\u4f4d\u800c\u4e0d\u662f16\u4f4d\u6765\u89e3\u91ca\uff0c\u8fd9\u4e2a\u95ee\u9898\u7684\u51fa\u73b0\u53ef\u80fd\u662f\u56e0\u4e3a\u4f60\u4f7f\u7528\u7684\u662fapt-get\u5b89\u88c5\u7684QEMU\u800c\u975e6.828\u8bfe\u7a0b\u63d0\u4f9b\u7684\u5b9a\u5236\u7248QEMU\uff0c\u5f3a\u70c8\u5efa\u8bae\u4f7f\u7528\u540e\u8005\u3002</p> <p>\u5728\u5206\u6790\u7b2c\u4e00\u6761\u6307\u4ee4\u5728\u505a\u4ec0\u4e48\u4e4b\u524d\uff0c\u9700\u8981\u5148\u641e\u6e05\u695a\u6211\u4eec\u6b63\u5728\u4ec0\u4e48\u6837\u7684\u786c\u4ef6\u73af\u5883\u91cc\u3002</p> <p>\u6211\u4eec\u7528QEMU\u6a21\u62df\u4e86\u4e00\u4e2a\u4e0e i386 \u76f8\u540c\u7684\u786c\u4ef6\u73af\u5883\uff0c\u5e76\u5728\u6b64\u786c\u4ef6\u73af\u5883\u4e0a\u52a0\u8f7d JOS\u3002\u800c i386 \u91c7\u7528 x86 \u67b6\u6784\u3002\u56e0\u4e3a x86 \u67b6\u6784\u5411\u540e\u517c\u5bb9\uff0c\u6240\u4ee5\u6709\u4e00\u4e9b\u201d\u8bbe\u5b9a\u201c\u7ee7\u627f\u81ea x86 \u7cfb\u5217\u6700\u65e9\u7684\u5904\u7406\u5668 <code>8086</code>\u3002</p> <p>\uff08\u4e0b\u9762\u7684\u5730\u5740\u90fd\u75288\u4f4d16\u8fdb\u5236\u6570\u8868\u793a\uff0c\u53ef\u8868\u793a\u7684\u5185\u5b58\u5927\u5c0f\u4e3a4GB\uff0c\u8fd9\u662f\u76ee\u524d&lt;\u5443\uff0c\u597d\u50cf\u4e5f\u8fc7\u65f6\u4e86&gt;\u6211\u4eec\u6240\u7528\u8ba1\u7b97\u673a\u7684\u666e\u904d\u5185\u5b58\u5927\u5c0f\uff0c\u4e5f\u662f i386 \u7684\u7269\u7406\u5bfb\u5740\u7a7a\u95f4\u5927\u5c0f\uff09</p> <p>\u524d\u9762\u63d0\u8fc7\uff0c<code>8086</code>\u7684\u5bfb\u5740\u7a7a\u95f4\u5927\u5c0f\u4e3a<code>1MB</code>\u3002\u56e0\u6b64\u5728\u8fd9\u91cc\u9700\u8981\u7406\u89e3\u7684\u7b2c\u4e00\u4e2a\u53e4\u8001\u201d\u8bbe\u5b9a\u201c\u662f\uff0c\u4ece<code>0x00000000</code>\u5f00\u59cb\uff0c\u5230<code>0x00FFFFFF</code>\u7ed3\u675f\u7684\u8fd9<code>1MB</code>\u5927\u5c0f\u7a7a\u95f4\u662f\u7279\u6b8a\u7684\uff0c\u4fdd\u7559\u7528\u4f5c\u7279\u5b9a\u7528\u9014\u3002\uff08\u8fd9\u6837\u4e00\u6765\uff0c\u5f53\u5e74\u57fa\u4e8e 8086 \u8fd9 1MB \u5185\u5b58\u800c\u7f16\u5199\u7684\u7a0b\u5e8f\uff0c\u5728\u5982\u4eca\u7684\u6700\u65b0 x86 \u67b6\u6784\u4e0a\u4e5f\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u56e0\u4e3a\u8fd9 1MB \u7a7a\u95f4\u4f9d\u7136\u662f\u548c\u5f53\u5e74\u4e00\u6837\u7684\u7528\u9014\uff09</p> <p>\u8fd9<code>1MB</code>\u88ab\u5206\u4e3a\u5404\u4e2a\u533a\u57df\uff0c\u5206\u522b\u7528\u4f5c\u7279\u5b9a\u7528\u9014\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <pre><code>+------------------+  &lt;- 0x00100000 (1MB) (\u6ce8\uff1a1MB\u7a7a\u95f4\u6700\u540e\u4e00\u4e2a\u5730\u57400x000FFFFF)\n|     BIOS ROM     |\n+------------------+  &lt;- 0x000F0000 (960KB)\n|  16-bit devices, |\n|  expansion ROMs  |\n+------------------+  &lt;- 0x000C0000 (768KB)\n|   VGA Display    |\n+------------------+  &lt;- 0x000A0000 (640KB)\n|                  |\n|    Low Memory    |\n|                  |\n+------------------+  &lt;- 0x00000000\n</code></pre> <p>\u5176\u4e2d\uff0c\u9700\u8981\u6211\u4eec\u7279\u522b\u5173\u6ce8\u7684\u662f<code>0x000F0000</code>\u5230<code>0x000FFFFF</code>\u8fd9 64 KB \u7a7a\u95f4\u3002\u5bf9\u4e8e\u65e9\u671f PC \uff0cBIOS \u5b58\u50a8\u5728 ROM \u4e2d\uff0c\u8fd9 64 KB \u5c31\u662f\u5728 ROM \u4e2d\u7684\u5bfb\u5740\u7a7a\u95f4\u3002</p> <p>BIOS \u662f CPU \u52a0\u7535\u540e\u6267\u884c\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u524d\u9762\u663e\u793a\u7684<code>[f000:fff0] 0xffff0: ljmp $0xf000,$0xe05b</code>\u5c31\u662f BIOS \u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u3002</p> <p>\u6211\u4eec\u76ee\u524d\u6240\u5904\u7684\u4f4d\u7f6e\u53ca\u8981\u5206\u6790\u7684\u5185\u5bb9\uff0c\u5c31\u662fQEMU\u6a21\u62df\u51fa\u6765\u7684 80386 \u82af\u7247\u52a0\u7535\u540e\u542f\u52a8\u7684\u7b2c\u4e00\u6b65\uff1a\u6267\u884cBIOS\u3002</p> <p>\u73b0\u5728\u6765\u5206\u6790\u7b2c\u4e00\u6761\u6307\u4ee4\uff1a</p> <p><code>[f000:fff0] 0xffff0: ljmp $0xf000,$0xe05b</code></p> <ul> <li><code>[f000:fff0]</code>\uff1a<code>f000</code>\u662f\u5bc4\u5b58\u5668<code>cs</code>\u7684\u503c\uff0c<code>fff0</code>\u662f\u5bc4\u5b58\u5668<code>ip</code>\u7684\u503c\u3002</li> <li><code>0xffff0</code>\uff1a\u6307\u4ee4\u7684\u8d77\u59cb\u5730\u5740\u3002\u6211\u4eec\u77e5\u9053 BIOS \u6240\u5728\u533a\u57df\u7684\u5730\u5740\u6700\u5927\u4e3a<code>0xfffff</code>\uff08\u8fd9\u91cc\u7701\u7565\u4e86\u9ad8\u4f4d\u76840\uff09\uff0c\u8bf4\u660e\u7b2c\u4e00\u6761\u6307\u4ee4\u5b58\u653e\u5728\u8fd9\u5757\u5185\u5b58\u533a\u57df\u7684\u6700\u9876\u7aef<code>0xffff0</code>\u5230<code>0xfffff</code>\uff0c\u6307\u4ee4\u957f\u5ea6\u4e3a16\u5b57\u8282\uff08\u6ce8\u610f\uff0c\u8fd9\u91cc\u8bf4\u7684\u662f\u673a\u5668\u7801\u7684\u957f\u5ea6\uff0c\u800c\u975e\u6211\u4eec\u770b\u89c1\u7684\u6c47\u7f16\u6307\u4ee4\u7684\u957f\u5ea6\uff09\u3002</li> <li><code>ljmp $0xf000,$0xe05b</code>\uff1a\u6c47\u7f16\u6307\u4ee4\uff0c<code>ljmp</code>\u4e3a\u8f6c\u79fb\u6307\u4ee4\uff0c<code>l</code>\u8868\u793a\u76ee\u6807\u5730\u5740\u4e3a16\u4f4d\u5730\u5740\uff0c\u540e\u9762\u4e24\u4e2a\u7acb\u5373\u6570\u4e2d\uff0c<code>$0xf000</code>\u662f\u7ed9\u5bc4\u5b58\u5668<code>cs</code>\u7684\u503c\uff0c<code>$0xe05b</code>\u662f\u7ed9\u5bc4\u5b58\u5668<code>ip</code>\u7684\u503c\u3002</li> </ul> <p><code>cs</code>\u3001<code>ip</code>\u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u4e0e\u5b9e\u9645\u5730\u5740\u4e4b\u95f4\u662f\u4ec0\u4e48\u5173\u7cfb\uff1f</p> <p>\u524d\u9762\u63d0\u5230\uff0c\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u4e4b\u6240\u4ee5\u662f<code>0xffff0</code>\uff0c\u662f\u56e0\u4e3a\u7b2c\u4e00\u4ee3 x86 CPU <code>8086</code> \u5c31\u662f\u5982\u6b64\u3002\u5b9e\u9645\u4e0a\uff0c\u5728\u8fd9 <code>1MB</code> \u5185\u5b58\u533a\u57df\u5185\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u90fd\u5f97\u9075\u5faa\u5f53\u5e74<code>8086</code>\u7684\u89c4\u5219\uff08\u6b64\u65f6\u6240\u5904\u7684\u5c31\u662f\u6240\u8c13\u7684\u5b9e\u6a21\u5f0f\uff09 \u3002\u800c<code>8086</code> \u662f 16 \u4f4d\u5904\u7406\u5668\uff0c\u5374\u6709 20 \u6839\u5730\u5740\u7ebf\uff0c\u5730\u5740\u957f\u5ea6\u4e3a 20 \u4f4d\u3002\u4e3a\u4e86\u80fd\u7528 16 \u4f4d\u7684\u5bc4\u5b58\u5668\u8868\u793a 20 \u4f4d\u7684\u5730\u5740\uff0c<code>8086</code>\u4f7f\u7528\u4ee5\u4e0b\u8f6c\u6362\u516c\u5f0f\u8fdb\u884c\u8f6c\u6362\uff1a</p> <p>\u7269\u7406\u5730\u5740  = \u6bb5\u57fa\u5740(cs) \u00d7 16 + \u6bb5\u5185\u504f\u79fb\u91cf(ip)</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u4e58\u6cd5\u5bf9\u4e8eCPU\u6765\u8bf4\u662f\u5f88\u590d\u6742\u7684\uff0c\u6240\u4ee5 \u00d716 \u7684\u64cd\u4f5c\u5b9e\u9645\u662f\u901a\u8fc7\u5c06\u503c\u5de6\u79fb4\u4f4d\u6765\u5b9e\u73b0\u7684\uff0c\u5373\uff1a</p> <p>\u7269\u7406\u5730\u5740 = \u6bb5\u57fa\u5740(cs) &lt;&lt; 4 + \u6bb5\u5185\u504f\u79fb\u91cf(ip)</p> <p><code>f000</code>\u5de6\u79fb4\u4f4d\u5c31\u53d8\u6210\u4e86<code>f0000</code>\uff08\u522b\u5fd8\u4e86\u5341\u516d\u8fdb\u5236\u548c\u4e8c\u8fdb\u5236\u4e4b\u95f4\u662f\u5982\u4f55\u8f6c\u6362\u7684\uff09\uff0c\u518d\u52a0\u4e0a<code>fff0</code>\uff0c\u5c31\u53d8\u6210\u4e86 GDB \u663e\u793a\u7684\u5730\u5740 <code>ffff0</code>\u3002</p> <p>\u540c\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u8fd9\u6761<code>ljmp</code>\u6307\u4ee4\u7684\u8df3\u8f6c\u76ee\u6807\u5730\u5740\uff1a<code>f0000</code>+<code>e05b</code>=<code>fe05b</code>\u3002</p> <p>\u7efc\u4e0a\uff0c\u6211\u4eec\u77e5\u9053\u4e86QEMU\u6a21\u62df\u7684\u8fd9\u4e2a<code>i386</code> \u673a\u5668\u5728\u6309\u4e0b\u7535\u6e90\u952e\u4e4b\u540e\u5e72\u7684\u7b2c\u4e00\u4ef6\u4e8b\uff1aCPU\u8bfb\u53d6\u5e76\u6267\u884c\u8d77\u59cb\u5730\u5740\u4e3a<code>0xffff0</code>\u5904\u7684\uff08\u8fd9\u4e2a\u5730\u5740\u521d\u59cb\u8bbe\u5b9a\u662f\u7531\u786c\u4ef6\u5b8c\u6210\u7684\uff09\u3001\u5c5e\u4e8e BIOS \u7a0b\u5e8f\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\uff1a\u8df3\u8f6c\u5230\u5730\u5740<code>0xfe05b</code>\u3002</p> <p>\u7ec3\u4e602\uff1a\u4f7f\u7528 GDB \u7684 si\uff08\u6b65\u9aa4\u6307\u4ee4\uff09\u547d\u4ee4\u8ddf\u8e2a ROM BIOS \u4ee5\u83b7\u53d6\u66f4\u591a\u6307\u4ee4\uff0c\u5e76\u5c1d\u8bd5\u731c\u6d4b\u5b83\u53ef\u80fd\u5728\u505a\u4ec0\u4e48\u3002\u60a8\u53ef\u80fd\u9700\u8981\u67e5\u770b Phil Storrs I/O \u7aef\u53e3\u8bf4\u660e\u4ee5\u53ca 6.828 \u53c2\u8003\u8d44\u6599\u9875\u9762\u4e0a\u7684\u5176\u4ed6\u8d44\u6599\u3002\u65e0\u9700\u4e86\u89e3\u6240\u6709\u7ec6\u8282 - \u53ea\u9700\u5927\u81f4\u4e86\u89e3 BIOS \u9996\u5148\u8981\u505a\u4ec0\u4e48\u3002</p> <pre><code>[f000:fff0]    0xffff0: ljmp   $0xf000,$0xe05b \n# \u7b2c\u4e00\u6761\u6307\u4ee4\uff0c\u8df3\u8f6c\u81f3\u5730\u57400xfe05b\n[f000:e05b]    0xfe05b: cmpl   $0x0,%cs:0x6ac8\n# \u5224\u65ad\u5730\u57400xf6ac8\u5904\u7684\u503c\u662f\u5426\u7b49\u4e8e0\uff0c\u82e5\u7b49\u4e8e0\u5219\u7f6e\u72b6\u6001\u5b57\u5bc4\u5b58\u5668\u4e2d\u7684ZF\u4f4d\u4e3a1\n[f000:e062]    0xfe062: jne    0xfd2e1\n# \u82e5\u4e0a\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c\u4e0d\u4e3a0/\u4e0d\u76f8\u7b49\uff08jne = jump not equal\uff09\u5219\u8df3\u8f6c\u81f3\u5730\u57400xfd2e1\n[f000:e066]    0xfe066: xor    %dx,%dx\n#\uff08\u7531\u5730\u5740\u53ef\u4ee5\u770b\u51fa\u4e0a\u6761\u6307\u4ee4\u6ca1\u6709\u8df3\u8f6c\uff09\u5c06\u5bc4\u5b58\u5668dx\u6e05\u96f6\n[f000:e068]    0xfe068: mov    %dx,%ss\n[f000:e06a]    0xfe06a: mov    $0x7000,%esp\n# \u5c06\u5bc4\u5b58\u5668ss\u6e05\u96f6\n# \u5c06\u5bc4\u5b58\u5668esp\u7684\u503c\u7f6e\u4e3a0x7000\n# \u7c7b\u4f3c\u4e8ecs:ip\u7684\u5730\u5740\u8868\u793a\u65b9\u6cd5\uff0c\u5b9e\u6a21\u5f0f\u4e0bss:sp\u8868\u793a\u6808\u9876\u5730\u5740\uff0c\u6b64\u65f6\u88ab\u521d\u59cb\u5316\u4e3a0x70000\n# esp\u7684e\u53ea\u662f\u8868\u660e\u8fd9\u662f\u4e2a32\u4f4d\u5bc4\u5b58\u5668\uff0c\u4e0esp\u662f\u540c\u4e00\u4e2a\u4e1c\u897f\n[f000:e070]    0xfe070: mov    $0xf34c2,%edx\n# \u5c06\u5bc4\u5b58\u5668edx\u7684\u503c\u8bbe\u4e3a0xf34c2\n[f000:e076]    0xfe076: jmp    0xfd15c\n# \u8df3\u8f6c\u5230\u5730\u57400xfd15c\n[f000:d15c]    0xfd15c: mov    %eax,%ecx\n# \uff1f\n[f000:d15f]    0xfd15f: cli\n# \u5173\u4e2d\u65ad\n[f000:d160]    0xfd160: cld \n# \u5c06DF\u7f6e0\uff0c\u4f7f\u5f97\u5b57\u7b26\u4e32\u6307\u9488\u5728\u6bcf\u6b21\u5b57\u7b26\u4e32\u64cd\u4f5c\u540e\u81ea\u52a8\u9012\u589e\n...\n</code></pre> <p>BIOS\u7a0b\u5e8f\u6267\u884c\u65f6\uff0c\u4f1a\u5efa\u7acb\u4e00\u4e2a\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u5e76\u521d\u59cb\u5316\u5404\u79cd\u8bbe\u5907\uff0c\u4f8b\u5982 VGA \u663e\u793a\u5668\u3002\u8fd9\u5c31\u662f QEMU \u7a97\u53e3\u4e2d\u770b\u5230\u7684\u201c <code>Starting SeaBIOS</code> \u201d\u6d88\u606f\u7684\u6765\u6e90\u3002\u521d\u59cb\u5316 PCI \u603b\u7ebf\u548c BIOS \u77e5\u9053\u7684\u6240\u6709\u91cd\u8981\u8bbe\u5907\u540e\uff0c\u5b83\u4f1a\u641c\u7d22\u53ef\u5f15\u5bfc\u8bbe\u5907\uff08\u5373\u64cd\u4f5c\u7cfb\u7edf\u5b58\u50a8\u7684\u8bbe\u5907\uff09\uff0c\u5982\u8f6f\u76d8\uff08\u5df2\u7ecf\u6dd8\u6c70\u4e86\u7684\u8fdc\u53e4\u5b58\u50a8\u8bbe\u5907\uff09\u3001\u786c\u76d8\u6216 CD-ROM\uff08\u5149\u76d8\uff09\u3002\u6700\u7ec8\uff0c\u5f53\u5b83\u627e\u5230\u53ef\u5f15\u5bfc\u78c1\u76d8\u65f6\uff0cBIOS \u4ece\u78c1\u76d8\u8bfb\u53d6\u5f15\u5bfc\u52a0\u8f7d\u7a0b\u5e8f\uff08Boot Loader\uff09\u5e76\u5c06CPU\u63a7\u5236\u6743\u8f6c\u4ea4\u7ed9\u5b83\uff08\u5373CPU\u5f00\u59cb\u6267\u884c\u5f15\u5bfc\u52a0\u8f7d\u7a0b\u5e8f\u7684\u6307\u4ee4\uff09\u3002</p>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#part-2-the-boot-loader","title":"Part 2: The Boot Loader","text":""},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#1-boot-loader","title":"1. \u4ece Boot Loader \u5f00\u59cb","text":"<p>BOIS\u4ece\u78c1\u76d8\u8bfb\u53d6Boot Loader\u5230\u6307\u5b9a\u5185\u5b58\u533a\u57df<code>0x7c00</code>\u5230<code>0x7dff</code>\uff08512KB\uff09\uff0c\u7136\u540e\u6267\u884c<code>jmp</code>\u6307\u4ee4\uff0c\u8df3\u8f6c\u5230Boot Loader\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u6240\u5728\u5730\u5740<code>0x7c00</code>\u3002</p> <pre><code>(gdb) b *0x7c00 #\u5728\u5730\u57400x7c00\u5904\u6253\u65ad\u70b9\nBreakpoint 1 at 0x7c00\n(gdb) c #\u6267\u884c\u5230\u4e0b\u4e00\u4e2a\u65ad\u70b9\u540e\u505c\u6b62\nContinuing.\nThe target architecture is set to \"i8086\".\n[   0:7c00] =&gt; 0x7c00:  cli #0x7c00\u5730\u5740\u5904\u7684\u6307\u4ee4\n</code></pre> <p>Boot Loader\u5e76\u975e\u662f\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff0c\u5404\u7c7b\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u6709\u81ea\u5df1\u7684Boot Loader\uff0c\u4f46\u4e00\u79cdBoot Loader\u4e5f\u53ef\u4ee5\u652f\u6301\u52a0\u8f7d\u591a\u79cd\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5982<code>GNU GRUB</code>\u3002</p>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#2-boots","title":"2. boot.S\uff1a\u4ece\u5b9e\u6a21\u5f0f\u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f","text":"<p>\u7ec3\u4e60 3(1) \u5728\u5730\u5740 0x7c00 \u5904\u8bbe\u7f6e\u65ad\u70b9\uff0c\u8fd9\u662f\u52a0\u8f7d\u5f15\u5bfc\u6247\u533a\u7684\u4f4d\u7f6e\u3002\u7ee7\u7eed\u6267\u884c\u76f4\u5230\u8be5\u65ad\u70b9\u3002\u8ddf\u8e2a<code>boot/boot.S</code>\u4e2d\u7684\u4ee3\u7801\uff0c\u4f7f\u7528\u6e90\u4ee3\u7801\u548c\u53cd\u6c47\u7f16\u6587\u4ef6 <code>obj/boot/boot.asm</code>\u6765\u8ddf\u8e2a\u60a8\u7684\u4f4d\u7f6e\u3002\u8fd8\u4f7f\u7528 GDB \u4e2d\u7684<code>x/i</code>\u547d\u4ee4\u53cd\u6c47\u7f16\u5f15\u5bfc\u52a0\u8f7d\u7a0b\u5e8f\u4e2d\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u5e76\u5c06\u539f\u59cb\u5f15\u5bfc\u52a0\u8f7d\u7a0b\u5e8f\u6e90\u4ee3\u7801\u4e0e<code>obj/boot/boot.asm</code> \u548c GDB \u4e2d\u7684\u53cd\u6c47\u7f16\u8fdb\u884c\u6bd4\u8f83\u3002</p> <p>\u52a0\u8f7d JOS \u7684 Boot Loader \u7684\u6e90\u7a0b\u5e8f\u4ee3\u7801\u4f4d\u4e8e<code>/lab/boot/boot.S</code>\u548c<code>/lab/boot/main.c</code>\u4e2d\u3002\u5728<code>boot.S</code>\u7684\u672b\u5c3e\u4f1a\u8c03\u7528<code>main.c</code>\u7684\u4ee3\u7801\u4ee5\u7ee7\u7eed\u6267\u884c\u3002</p> <p>\u9996\u5148\u6267\u884c\u7684\u662f<code>boot.S</code>\u3002\u5176\u4e2d<code>cli</code>\u4e00\u884c\u5373\u662f\u88ab\u52a0\u8f7d\u5230<code>0x7c00</code>\u5904\u7684Boot Loader\u7b2c\u4e00\u6761\u6307\u4ee4\u3002<code>.</code>\u5f00\u5934\u7684\u6307\u4ee4\u662f\u6c47\u7f16\u4f2a\u6307\u4ee4\uff0c\u6ca1\u6709\u5bf9\u5e94\u7684\u673a\u5668\u7801\uff0c\u53ea\u7528\u4e8e\u63d0\u4f9b\u6c47\u7f16\u4fe1\u606f\u3002</p> <p><code>boot.S</code>\u4e2d\u5b9e\u73b0\u4ece\u5b9e\u6a21\u5f0f\u5230\u4fdd\u62a4\u6a21\u5f0f\u7684\u5207\u6362\uff0c\u5927\u81f4\u5206\u4e3a 4 \u4e2a\u6b65\u9aa4\uff1a\u5173\u4e2d\u65ad\u2192\u4f7f\u80fd A20 \u5730\u5740\u7ebf \u2192 \u52a0\u8f7d GDT \u2192  \u5c06\u63a7\u5236\u5bc4\u5b58\u5668\u4e2dCR0\u6bb5\u7684PE\u4f4d\u7f6e1\uff0c\u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\u3002</p>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#21","title":"2.1 \u5173\u4e2d\u65ad","text":"<pre><code>#include &lt;inc/mmu.h&gt;\n\n# Boot Loader\uff0c\u5b8c\u6210\u4ece\u5b9e\u6a21\u5f0f\u5230\u4fdd\u62a4\u6a21\u5f0f\u7684\u5207\u6362\uff0c\u5e76\u6700\u7ec8\u8df3\u8f6c\u81f3\u5185\u6838\u52a0\u8f7d\u7a0b\u5e8f\n\n# .set \u7ed9\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u6216\u5c40\u90e8\u53d8\u91cf\u8d4b\u503c\n.set PROT_MODE_CSEG, 0x8         # kernel code segment selector\n.set PROT_MODE_DSEG, 0x10        # kernel data segment selector\n.set CR0_PE_ON,      0x1         # protected mode enable flag\n\n# \u4f7f\u7b26\u53f7start\u5bf9\u6574\u4e2a\u5de5\u7a0b\u53ef\u89c1\n.globl start\nstart:\n  # \u7b2c\u4e00\u6b65\uff0c\u5173\u4e2d\u65ad\uff08\u4fdd\u8bc1\u4ee5\u4e0b\u5de5\u4f5c\u4e0d\u4f1a\u88ab\u5176\u4ed6\u7a0b\u5e8f\u6253\u65ad\uff0c\u82e5\u88ab\u6253\u65ad\uff0c\u4f1a\u5bfc\u81f4CPU\u53d1\u751f\u5f02\u5e38\uff09\n  .code16                     # Assemble for 16-bit mode\n  cli                         # Disable interrupts \u5173\u4e2d\u65ad\n  cld                         # String operations increment\n\n  # Set up the important data segment registers (DS, ES, SS).\n  # \u5c06 ds/es/ss \u5bc4\u5b58\u5668\u5168\u90e8\u7f6e\u96f6\n  xorw    %ax,%ax             # Segment number zero\n  movw    %ax,%ds             # -&gt; Data Segment\n  movw    %ax,%es             # -&gt; Extra Segment\n  movw    %ax,%ss             # -&gt; Stack Segment\n</code></pre>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#22-a20","title":"2.2 \u4f7f\u80fd A20 \u5730\u5740\u7ebf","text":"<p>\u4e3a\u4ec0\u4e48\u8981\u4f7f\u80fd A20 \u5730\u5740\u7ebf\uff1f\u4e3a\u4ec0\u4e48\u662f\u901a\u8fc7\u5411\u952e\u76d8\u63a7\u5236\u5668\u7aef\u53e3\u5199\u5165\u6570\u636e\u6765\u4f7f\u80fd A20 \u5730\u5740\u7ebf\uff1f\u5176\u5b9e\u57fa\u672c\u4e0a\u90fd\u662f\u5386\u53f2\u539f\u56e0\uff0c\u662f\u56e0\u4e3a\u5f53\u5e74\u7684\u7a0b\u5e8f\u5458\u6839\u636e\u5f53\u65f6\u7684\u786c\u4ef6\u6761\u4ef6\u8fd9\u4e48\u8bbe\u8ba1\u7684\u3002</p> <p>\u5bf9\u4e8e8086\uff0c20\u6839\u5730\u5740\u7ebf\u4e3aA0~A19\uff0cA20\u56fa\u5b9a\u4e3a0\uff0c\u8fd9\u6837\u4f7f\u5f97\u8d85\u51fa0xFFFFF\u8303\u56f4\u7684\u5730\u5740\u4f1a\u81ea\u52a8\u5bf90xFFFFF\u53d6\u6a21\uff0c\u5982\u5730\u57400x100000\u4f1a\u81ea\u52a8\u53d8\u4e3a0x00000\uff0c\u8fd9\u79f0\u4e3a\u5730\u5740\u73af\u7ed5\u3002</p> <p>\u8981\u4f7f\u7528 1MB \u4ee5\u5916\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u9700\u8981\u4f7f\u80fd A20 \u5730\u5740\u7ebf\uff0c\u4ee5\u7a81\u7834\u5730\u5740\u73af\u7ed5\u3002</p> <p>\u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0cA20\u7ebf\u75318042\u952e\u76d8\u63a7\u5236\u5668\u82af\u7247\uff08\u8fd9\u4e2a\u82af\u7247\u4ecd\u5728\u5982\u4eca\u7684\u8ba1\u7b97\u673a\u4e3b\u677f\u4e0a\uff09\u63a7\u5236\u3002</p> <p>0x64\u662f8042\u7684\u72b6\u6001\u5bc4\u5b58\u5668\uff08\u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u4e00\u70b9CPU\u4e0eI/O\u7aef\u53e3\u4ea4\u4e92\u7684\u524d\u7f6e\u77e5\u8bc6\uff09\uff0c\u5bc4\u5b58\u5668\u7684\u6700\u4f4e\u4f4d\uff08\u7b2c0bit\uff09\u4ee3\u8868\u8f93\u51fa\u7f13\u51b2\u533a\u72b6\u6001\uff0c\u7b2c1bit\u4ee3\u8868\u8f93\u5165\u7f13\u51b2\u533a\u72b6\u6001\uff0c0\u7a7a1\u6ee1</p> <p>CPU\u901a\u8fc78042\u542f\u7528A20\u7684\u56fa\u5b9a\u6d41\u7a0b\u662f\uff1aCPU\u5c06\u547d\u4ee40xd1\u5199\u51650x64\u7aef\u53e3\u2192\u5c06\u542f\u7528A20\u7684\u56fa\u5b9a\u503c0xdf\u5199\u51650x60\u7aef\u53e3</p> <pre><code>seta20.1: # \u542f\u7528A20\u7684\u7b2c\u4e00\u6b65\n  inb     $0x64,%al               # Wait for not busy\n  # in\u6307\u4ee4\uff0c\u4ece0x64\u7aef\u53e3\u8bfb\u53d6\u4f4e8\u4f4d\u6570\u636e\u5230\u5bc4\u5b58\u5668al\uff08\u5373ax\u7684\u4f4e8\u4f4d\uff09\n  testb   $0x2,%al\n  # testb\u5373\u5bf9\u64cd\u4f5c\u6570\u7684\u4e0e\u8fd0\u7b97\uff0c\u8fd9\u91cc\u662f\u5224\u65adal\u7684\u7b2c1\u4e2abit\u662f\u5426\u4e3a0\n  # \u5373\u68c0\u67e58042\u7684\u8f93\u5165\u7f13\u51b2\u533a\u72b6\u6001\u662f\u5426\u4e3a\u7a7a\n  # \u82e5\u4e3a0\uff0c\u5219\u72b6\u6001\u5bc4\u5b58\u5668\u4e2dZF\u4f4d\u7f6e1\uff1b\u82e5\u4e3a1\uff0c\u5219ZF\u7f6e0\n  jnz     seta20.1\n  # \u6839\u636eZF\u4f4d\u7ed3\u679c\u5f97\u77e5testb\u7ed3\u679c\u662f\u5426\u4e3a0\n  # \u82e58042\u8f93\u5165\u7f13\u51b2\u533a\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8df3\u8f6c\u56de\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5faa\u73af\u68c0\u67e5\uff0c\u76f4\u52308042\u8f93\u5165\u7f13\u51b2\u533a\u4e3a\u7a7a\n\n  movb    $0xd1,%al               # 0xd1 -&gt; port 0x64\n  outb    %al,$0x64\n  # 8042\u8f93\u5165\u7f13\u51b2\u533a\u7a7a\uff0c\u5199\u5165\u547d\u4ee40xd1\uff08\u5f53CPU\u64cd\u4f5c\u4e3a\u5199\u5165\u65f6\uff0c0x64\u4ee3\u88688042\u7684\u547d\u4ee4\u5bc4\u5b58\u5668\uff1b\u4e3a\u8bfb\u5165\u65f6\uff0c0x64\u4ee3\u88688042\u7684\u72b6\u6001\u5bc4\u5b58\u5668\uff09\uff0c\n  # 0xd1\u547d\u4ee4\u8868\u793a\u5c06\u4e0b\u4e00\u4e2a\u5b57\u8282\u5199\u5165\u8f93\u51fa\u7aef\u53e3\n\nseta20.2: # \u542f\u7528A20\u7684\u7b2c\u4e8c\u6b65\n  inb     $0x64,%al               # Wait for not busy\n  testb   $0x2,%al\n  jnz     seta20.2\n  # \u540c\u4e0a\uff0c\u5faa\u73af\u5224\u65ad8042\u8f93\u5165\u7f13\u51b2\u533a\u662f\u5426\u4e3a\u7a7a\n\n  movb    $0xdf,%al               # 0xdf -&gt; port 0x60\n  outb    %al,$0x60\n  # \u5c06\u6570\u636e0xdf\u5199\u51658042\u7684\u6570\u636e\u7aef\u53e30x60\uff08\u4e2d\u7684\u8f93\u51fa\u7aef\u53e3\uff09\n  # --------- \u5b8c\u6210\u5bf9A20\u7684\u4f7f\u80fd ----------\n</code></pre>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#23-gdtr","title":"2.3 \u52a0\u8f7d GDTR","text":"<p><code>lgdt</code>\u6307\u4ee4\uff1a\u5c06\u81ea\u5b9a\u4e49\u7684GDT\uff08gdtdesc\u5b9a\u4e49\u5728\u672c\u6587\u4ef6\u6700\u540e\uff09\u52a0\u8f7d\u5230GDT\u5bc4\u5b58\u5668\uff08GDTR\uff09\u4e2d\u3002\u540e\u9762\u8fd8\u4f1a\u7528\u5230 GDT\uff0c\u6240\u4ee5\u5bf9 GDT \u5185\u5bb9\u7684\u89e3\u91ca\u653e\u5728\u540e\u6587\u3002</p> <p>gdtdesc\u9700\u8981\u6709\u4e24\u4e2a\u5c5e\u6027\uff1aGDT \u57fa\u5740\u4e0e\u9650\u5236\uff08\u8868\u683c\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282\uff09</p> <pre><code># boot.S \u672b\u5c3e\u5b9a\u4e49GDT\u8868\n# Bootstrap GDT\n.p2align 2                                # force 4 byte alignment\ngdt:\n  SEG_NULL              # null seg\n  SEG(STA_X|STA_R, 0x0, 0xffffffff) # code seg\n  SEG(STA_W, 0x0, 0xffffffff)           # data seg\n\ngdtdesc:\n  .word   0x17                            # sizeof(gdt) - 1\n  .long   gdt                             # address gdt\n</code></pre> <p>\u8fd9\u4e00\u6b65\u4ee3\u7801\u53ef\u4ee5\u7406\u89e3\u4e3a\u5c06\u5168\u5c40\u6bb5\u8868\u52a0\u8f7d\u5230\u6bb5\u8868\u57fa\u5740\u5bc4\u5b58\u5668\u4e2d\u3002</p> <pre><code>  lgdt    gdtdesc\n</code></pre> <p>\u6ce8\u610f\uff1a\u5230\u8fd9\u4e00\u6b65\u4e3a\u6b62\uff0cGDT\u52a0\u8f7d\u4ecd\u672a\u5168\u90e8\u5b8c\u6210\u3002<code>boot.S</code>\u5728\u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\u540e\u4f1a\u7ee7\u7eed\u8fdb\u884c\u8fd9\u9879\u5de5\u4f5c\u3002</p>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#24-pe1","title":"2.4 PE\u4f4d\u7f6e1\uff0c\u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f","text":"<p>\u572880386\u4e2d\uff0c\u63a7\u5236\u5bc4\u5b58\u5668CR\u5927\u5c0f16\u5b57\u8282\uff0c\u5747\u5206\u4e3a4\u90e8\u5206\uff1aCR0\u3001CR1\u3001CR2\u3001CR3\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff08\u8be6\u89c1Intel 80386 Reference Programmer's Manual Table of Contents - 4.1 Systems Registers\uff09</p> <p></p> <p>\u5176\u4e2dCR0\u7684\u7b2c0~4\u4f4d\u3001\u7b2c31\u4f4d\u662f\u7cfb\u7edf\u63a7\u5236\u6807\u5fd7\uff0c\u5176\u4f59\u4f4d\u4e3a\u4fdd\u7559\u4f4d</p> <p>CR0\u7684\u7b2c0\u4f4d\u4e3aPE\u4f4d\uff0c\u5c06PE\u7f6e1\uff0c\u4ece\u5b9e\u6a21\u5f0f\u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f</p> <pre><code>  movl    %cr0, %eax # \u4e0d\u80fd\u76f4\u63a5\u4fee\u6539CR0\u7684\u503c\uff0c\u53ea\u80fd\u901a\u8fc7MOV\u5230\u901a\u7528\u5bc4\u5b58\u5668\u4fee\u6539\n  orl     $CR0_PE_ON, %eax # \u5168\u5c40\u53d8\u91cfCR0_PE_ON=0x1\uff0c\u5728\u6587\u4ef6\u5f00\u5934\u5b9a\u4e49\uff1b\u5c06PE\u4f4d\u7f6e1\n  movl    %eax, %cr0 # \u8d4b\u503c\u7ed9CR0\n  # --------- \u5b8c\u6210CR0\u4e2dPE\u4f4d\u7684\u7f6e\u4f4d ----------\n  # ---------- \u73b0\u5728\u5df2\u5904\u4e8e\u4fdd\u62a4\u6a21\u5f0f ----------\n</code></pre>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#25","title":"2.5 \u53ef\u80fd\u4f1a\u6709\u7684\u95ee\u9898\uff1a\u8fd9\u4e9b\u6b65\u9aa4\u662f\u5fc5\u987b\u7684\u5417\uff1f\u987a\u5e8f\u53ef\u4ee5\u98a0\u5012\u5417\uff1f","text":"<p>\u6211\u4eec\u53d1\u73b0\uff0c\uff08\u4ece\u5f62\u5f0f\u4e0a\uff09\u4ece\u5b9e\u6a21\u5f0f\u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\u5176\u5b9e\u53ea\u6709\u4e00\u6b65\uff1a\u5c06PE\u4f4d\u7f6e1\u3002</p> <p>\u90a3\u4e48\u53e6\u5916\u4e24\u4e2a\u6b65\u9aa4\u5462\uff1f\u5b83\u4eec\u662f\u5fc5\u987b\u7684\u5417\uff1f\u4e00\u5b9a\u8981\u5728PE\u4f4d\u7f6e1\u524d\u5b8c\u6210\u5417\uff1f</p> <p>\u6211Google\u5b8c\u5f97\u51fa\u7684\u521d\u6b65\u7ed3\u8bba\u662f\uff1a</p> <ul> <li>\u5173\u4e2d\u65ad<code>cli</code>\u662f\u5fc5\u987b\u7684\uff0c\u4e14\u8981\u9996\u5148\u6267\u884c\u3002</li> </ul> <ul> <li><code>lgdt gdtdesc</code>\u662f\u5fc5\u987b\u7684\uff0c\u4e14\u4e00\u5b9a\u8981\u5728PE\u4f4d\u7f6e1\u524d\u8fdb\u884c\uff0c\u4f46GDT\u52a0\u8f7d\u7684\u540e\u7eed\u5de5\u4f5c\uff08\u5982\u8df3\u8f6c\u548c\u91cd\u65b0\u52a0\u8f7d\u6bb5\u5bc4\u5b58\u5668\uff09\u53ef\u4ee5\u5728\u4e4b\u540e\u518d\u505a\u3002</li> <li>\u4f7f\u80fd A20 \u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u4e14\u5728\u5b9e\u6a21\u5f0f\u4e0b\u548c\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u90fd\u53ef\u4ee5\u505a\u3002\u4f46\u5982\u679c\u4e0d\u4f7f\u80fd\uff0c\u4f1a\u5bfc\u81f4\u5947\u6570\u5146\u5b57\u8282\u65e0\u6cd5\u8bbf\u95ee\uff0c\u5982\u8bbf\u95ee1-2mb\u4f1a\u53d8\u6210\u8bbf\u95ee0-1mb\uff0c\u8bbf\u95ee3-4mb\u4f1a\u53d8\u6210\u8bbf\u95ee2-3mb</li> </ul> <p>\u53c2\u8003\uff1a</p> <ul> <li>Why enable A20 line in Protected Mode?</li> <li>How to switch from real mode to protected mode after bootloader?</li> <li>16\u4f4d\u5b9e\u6a21\u5f0f\u5207\u636232\u4f4d\u4fdd\u62a4\u6a21\u5f0f\u8fc7\u7a0b\u8be6\u89e3</li> </ul>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#3-bootsgdt-","title":"3. boot.S\uff1aGDT\u52a0\u8f7d-\u8df3\u8f6c\u4e0e\u6bb5\u5f0f\u5730\u5740\u8f6c\u6362","text":""},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#31","title":"3.1 \u4e3a\u4ec0\u4e48\u5fc5\u987b\u8df3\u8f6c","text":"<p>\u5728<code>lgdt gdtdesc</code>\u4e4b\u540e\uff0c\u8fd8\u8981\u7ee7\u7eed\u8fdb\u884c GDT \u52a0\u8f7d\u5de5\u4f5c\u3002\u56e0\u4e3a\u8fd9\u4e00\u6307\u4ee4\u53ea\u662f\u5c06\u81ea\u5b9a\u4e49\u7684 GDT \u8868\u4fe1\u606f\u4fdd\u5b58\u5230\u4e86 GDTR\u3002\u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\u4e4b\u540e\uff0c\u8981\u6307\u5b9a\u4e00\u6bb5\u4ee3\u7801\u7684\u8d77\u59cb\u5730\u5740\uff0c\u4e0d\u80fd\u50cf\u5b9e\u6a21\u5f0f\u90a3\u6837\u76f4\u63a5\u7ed9\u51fa\u4e00\u4e2a\u5b8c\u6574\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\uff0c\u800c\u662f\u8981\u7528\u5230 GDT \u8fdb\u884c\u5730\u5740\u8f6c\u6362\u3002</p> <p>\u4e3a\u4e86\u8ba9 CPU \u5bfb\u5740\u65f6\u80fd\u591f\u4f7f\u7528 GDT \uff0c\u5fc5\u987b\u91cd\u65b0\u52a0\u8f7d\u6240\u6709\u7684\u6bb5\u5bc4\u5b58\u5668\u3002CS \u662f\u5176\u4e2d\u4e4b\u4e00\u3002\u4f46 CS \u662f\u7279\u522b\u7684\uff0c\u5b83\u4e0d\u80fd\u7b80\u5355\u5730\u901a\u8fc7<code>mov</code>\u6307\u4ee4\u4fee\u6539\uff0c\u800c\u9700\u8981\u901a\u8fc7<code>jump</code>\u3002\u6240\u4ee5<code>boot.S</code>\u5728\u6b64\u5904\u6709\u4e00\u4e2a<code>ljmp</code>\u6307\u4ee4\uff0c\u540e\u9762\u662f\u4e00\u5806<code>mov</code>\u6307\u4ee4\u4ee5\u4fee\u6539\u5176\u4ed6\u7684\u6bb5\u5bc4\u5b58\u5668\u3002</p> <pre><code>  ljmp    $PROT_MODE_CSEG, $protcseg\n  # PROT_MODE_CSEG = 0x08 \u4e3a\u6bb5\u9009\u62e9\u5b50\uff0cprotcseg \u4e3a\u6bb5\u5185\u504f\u79fb\u91cf0x7c32\uff08\u7531\u7f16\u8bd1\u5668\u7ed9\u51fa\uff1f\uff09\n  # CS \u4e2d\u7684\u503c\u88ab\u7f6e\u4e3a 0x08\n  # \u7531\u4e8e\u5904\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\uff0cCPU\u4e0d\u8fdb\u884c\u5b9e\u6a21\u5f0f\u4e0b\u5730\u5740=CS&lt;&lt;4+IP\u7684\u8ba1\u7b97\uff0c\u800c\u662f\u8fdb\u884c\u6bb5\u5f0f\u7684\u5730\u5740\u8f6c\u6362\uff1a\u6839\u636e0x08\u4eceGDT\u627e\u52301\u53f7\u63cf\u8ff0\u7b26\uff0c\u5bf9\u5e94\u6bb5\u57fa\u5740\u4e3a0x0\uff0c\u4e0e\u6bb5\u5185\u504f\u79fb\u91cf0x7c32\u76f8\u52a0\u5373\u5b8c\u6574\u5730\u57400x7c32\n  # \u8df3\u8f6c\u81f3\u5730\u5740\u4e3a0x7c32\n</code></pre>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#32-gdt","title":"3.2 \u5229\u7528GDT\u5b8c\u6210\u6bb5\u5f0f\u5730\u5740\u8f6c\u6362","text":"<p>\u8fd9\u91cc\u8fdb\u4e00\u6b65\u7814\u7a76\u5730\u5740\u8f6c\u6362\u5177\u4f53\u662f\u5982\u4f55\u5b8c\u6210\u7684\uff1a</p> <p>\u5982\u679c\u5b66\u8fc7\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\uff0c\u5c31\u5f88\u5bb9\u6613\u7406\u89e3\u8fd9\u4e48\u4e00\u4e2a\u7b3c\u7edf\u7684\u8f6c\u6362\u8fc7\u7a0b\uff1a\u7a0b\u5e8f\u7ed9\u51fa\u4e00\u4e2a\u903b\u8f91\u5730\u5740\uff0c\u518d\u6839\u636e\u903b\u8f91\u5730\u5740\u7684\u67d0\u51e0\u4f4d\uff0c\u5728\u6bb5\u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u9879\uff08\u7269\u7406\u5730\u5740\uff09\uff0c\u518d\u4e0e\u903b\u8f91\u5730\u5740\u4e2d\u7684\u6bb5\u5185\u504f\u79fb\u91cf\u62fc\u63a5\u8d77\u6765\uff0c\u5f97\u5230\u5b8c\u6574\u7684\u7269\u7406\u5730\u5740\u3002</p> <p>\u5728\u8fd9\u884c\u4ee3\u7801\u4e2d\uff0c<code>protcseg</code>\u662f\u6bb5\u5185\u504f\u79fb\u91cf\uff0c\u5b83\u7531\u7f16\u8bd1\u5668\u7ed9\u51fa\uff08\uff1f\uff09</p> <p><code>PROT_MODE_CSEG = 0x8</code>\u5728\u6587\u4ef6\u5f00\u5934\u5b9a\u4e49\uff0c\u8fd9\u662f\u4e00\u4e2a Segment Selector \uff08\u6bb5\u9009\u62e9\u5668/\u6bb5\u9009\u62e9\u5b50\uff09\uff0c\u662f\u903b\u8f91\u5730\u5740\u7684\u4e00\u90e8\u5206\uff0c\u9700\u8981\u6839\u636e\u5b83\u5728 GDT\uff08\u6bb5\u8868\uff09 \u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u9879\u3002</p> <p>Segment Selector \u56fa\u5b9a16\u4f4d\u957f\uff0c\u5404\u4f4d\u542b\u4e49\u5982\u4e0b\u56fe\u6240\u793a\uff1a\uff08\u8be6\u89c1Intel 80386 Reference Programmer's Manual Table of Contents - 5.1 Segment Translation\uff09</p> <p></p> <ul> <li>INDEX\uff1a\u7406\u89e3\u4e3a\u6bb5\u53f7\u5373\u53ef\uff0c\u8981\u6839\u636e\u6bb5\u53f7\u5728\u6bb5\u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u6bb5\u8868\u9879\u3002\u6b63\u5f0f\u5730\uff0cCPU \u6839\u636e\u8fd9\u4e2a 12 \u4f4d\u957f\u7684 INDEX \u5728\u63cf\u8ff0\u7b26\u8868\uff08GDT\u6216LDT\uff09\u4e2d\u627e\u5230\u5bf9\u5e94\u7684 8 \u5b57\u8282\u957f\u7684\u4e00\u4e2a\u63cf\u8ff0\u7b26\u3002\u63cf\u8ff0\u7b26\u8868\u6700\u591a\u53ef\u5305\u542b 8192 \u4e2a\u63cf\u8ff0\u7b26\uff0c\u6240\u4ee5 INDEX \u6709 12 \u4f4d\u3002\u67e5\u8be2\u65f6\uff0cCPU \u7b80\u5355\u5730\u5c06 INDEX \u4e58 8 \uff0c\u518d\u52a0\u4e0a\u63cf\u8ff0\u7b26\u8868\u7684\u57fa\u5740\uff0c\u5c31\u5f97\u5230\u4e86\u6bb5\u8868\u9879\u7684\u5730\u5740\u3002</li> <li>TABLE INDICATOR\uff1a\u6307\u660e\u5e94\u8be5\u5728\u54ea\u4e2a\u63cf\u8ff0\u7b26\u8868\u91cc\u627e\u63cf\u8ff0\u7b26\u30020 = GDT\uff0c1 = LDT\u3002</li> <li>RPL\uff1a\u7528\u4e8e\u5185\u5b58\u4fdd\u62a4\u7684\u5b57\u6bb5\uff0c0 = \u5185\u6838\u7ea7\uff0c1 = \u7cfb\u7edf\u670d\u52a1\u7ea7\uff0c2 = \u81ea\u5b9a\u4e49\u6269\u5c55\u7ea7\uff0c 3 = \u5e94\u7528\u7ea7</li> </ul> <p><code>PROT_MODE_CSEG = 0x8</code>\uff0c\u5373 <code>0000 1000</code>\uff0cINDEX = 1\uff0cTI = 0\uff0cRPL=0\u3002\u53ef\u77e5\u5bf9\u5e94\u63cf\u8ff0\u7b26\u662f GDT \u7684 1 \u53f7\u63cf\u8ff0\u7b26\uff08\u6ce8\uff1aGDT \u4e2d INDEX=0 \u7684\u8868\u9879\u662f\u4e0d\u4f7f\u7528\u7684\uff09\u3002</p> <p>GDT \u7684 1 \u53f7\u63cf\u8ff0\u7b26\u7684\u5185\u5bb9\u662f\u4ec0\u4e48\uff1f\u5728\u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\u4e4b\u524d\uff0c\u6211\u4eec\u52a0\u8f7d\u4e86 GDT \uff0c\u800c GDT \u7684\u5185\u5bb9\u662f <code>boot.S</code> \u81ea\u5df1\u521d\u59cb\u5316\u7684\uff0c\u5373\u6587\u4ef6\u672b\u7684\u8fd9\u6bb5\u5b9a\u4e49\uff1a</p> <pre><code>gdt:  \n  SEG_NULL              # null seg 0\u53f7\u8868\u9879\uff0c\u4e0d\u4f7f\u7528\n  SEG(STA_X|STA_R, 0x0, 0xffffffff) # code seg 1\u53f7\u8868\u9879\n  SEG(STA_W, 0x0, 0xffffffff)       # data seg 2\u53f7\u8868\u9879\n</code></pre> <p>1 \u53f7\u63cf\u8ff0\u7b26\u7684\u5185\u5bb9\u662f<code>SEG(STA_X|STA_R, 0x0, 0xffffffff)</code>\uff0c\u5b9e\u9645\u4e0a\u662f\u4f7f\u7528\u4e86<code>/lab/inc/mmu.h</code>\u4e2d\u7684\u5b8f\u5b9a\u4e49\uff1a</p> <pre><code>#define SEG(type,base,lim)                  \\\n    .word (((lim) &gt;&gt; 12) &amp; 0xffff), ((base) &amp; 0xffff);  \\\n    .byte (((base) &gt;&gt; 16) &amp; 0xff), (0x90 | (type)),     \\\n        (0xC0 | (((lim) &gt;&gt; 28) &amp; 0xf)), (((base) &gt;&gt; 24) &amp; 0xff)\n</code></pre> <p>\u8fd9\u6bb5\u5b8f\u5b9a\u4e49\u7684\u529f\u80fd\u662f\u6839\u636e<code>type</code>\uff08\u6bb5\u7c7b\u578b\uff09\u3001<code>base</code>\uff08\u6bb5\u57fa\u5740\uff09\u3001<code>lim</code>\uff08\u6bb5\u957f\uff09\u8fd9\u4e09\u4e2a\u53c2\u6570\u53bb\u6784\u9020\u5b9e\u9645\u7684 8 \u5b57\u8282\u957f\u7684\u6bb5\u63cf\u8ff0\u7b26\u3002</p> <p>\u4e4b\u6240\u4ee5\u8981\u5199\u6210\u8fd9\u4e48\u96be\u770b\u7684\u6837\u5b50\uff0c\u662f\u56e0\u4e3a\u6bb5\u63cf\u8ff0\u7b26\u7684\u683c\u5f0f\u5c31\u662f\u8fd9\u4e48\u96be\u770b\u2026\u2026\u6bd4\u598232\u4f4d\u7684\u6bb5\u57fa\u5740\u4e0d\u662f\u8fde\u7eed\u768432\u4f4d\u5b58\u50a8\uff0c\u800c\u662f\u5206\u6563\u5728\u4e09\u4e2a\u90e8\u5206\u3002\u8fd9\u5c5e\u4e8e\u5386\u53f2\u9057\u7559\u95ee\u9898\u3002\u5b8c\u6574\u7684 8 \u5b57\u8282\u6bb5\u63cf\u8ff0\u7b26\u683c\u5f0f\u89c1\u4e0b\u56fe\uff1a</p> <p></p> <p>\u8fd9\u91cc\u6211\u4eec\u77e5\u9053\u4e86 1 \u53f7\u63cf\u8ff0\u7b26\u4e2d\u4fdd\u5b58\u7684\u6bb5\u57fa\u5740\u662f<code>0x0</code>\u3002\u4e0e\u6bb5\u5185\u504f\u79fb\u91cf<code>0x7c32</code>\u62fc\u63a5\uff0c\u5373\u5f97\u5230\u5b8c\u6574\u5185\u5b58\u5730\u5740<code>0x7c32</code>\uff0c\u5373 GDB \u7ed9\u51fa\u7684\u7ed3\u679c\uff1a</p> <pre><code>(gdb) x/i\n   0x7c2d:  ljmp   $0x8,$0x7c32\n(gdb) x/i\n   0x7c32:  mov    $0xd88e0010,%eax\n</code></pre>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#4-bootsgdt-","title":"4. boot.S\uff1aGDT\u52a0\u8f7d-\u91cd\u65b0\u52a0\u8f7d\u6bb5\u5bc4\u5b58\u5668","text":"<p>80386 \u6709 6 \u4e2a\u6bb5\u5bc4\u5b58\u5668\uff1aCS\u3001DS\u3001SS\u3001ES\u3001FS\u3001GS\u3002</p> <p>\u5176\u4e2d CS \u5df2\u901a\u8fc7<code>ljmp $PROT_MODE_CSEG, $protcseg</code>\u6307\u4ee4\u5c06\u503c\u91cd\u65b0\u52a0\u8f7d\u4e3a<code>0x08</code>\uff0c\u5373\u5185\u6838\u4ee3\u7801\u6bb5\u57fa\u5740\u3002</p> <p>\u5269\u4e0b\u76845\u4e2a\u5bc4\u5b58\u5668\u90fd\u53ef\u901a\u8fc7<code>mov</code>\u6307\u4ee4\u5c06\u503c\u91cd\u65b0\u52a0\u8f7d\u4e3a<code>PROT_MODE_DSEG = 0x10</code>\uff0c\u8fd9\u662f\u5185\u6838\u6570\u636e\u6bb5\u57fa\u5740\u3002</p> <p>\u6bb5\u5bc4\u5b58\u5668\u91cd\u65b0\u52a0\u8f7d\u5b8c\u6bd5\u540e\uff0c\u540e\u7eed\u7684\u6307\u4ee4\u5730\u5740\u3001\u6570\u636e\u5730\u5740\u90fd\u53ef\u4ee5\u901a\u8fc7 GDT \u5b8c\u6210\u5730\u5740\u8f6c\u6362\u4e86\u4ee5\u6b63\u786e\u8bbf\u95ee\u4e86\u3002</p> <pre><code>  .code32                     # Assemble for 32-bit mode\nprotcseg:\n  # Set up the protected-mode data segment registers\n  movw    $PROT_MODE_DSEG, %ax    # Our data segment selector\n  movw    %ax, %ds                # -&gt; DS: Data Segment\n  movw    %ax, %es                # -&gt; ES: Extra Segment\n  movw    %ax, %fs                # -&gt; FS\n  movw    %ax, %gs                # -&gt; GS\n  movw    %ax, %ss                # -&gt; SS: Stack Segment\n\n  # Set up the stack pointer and call into C.\n  movl    $start, %esp # ?\u5b8c\u5168\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u8981\u628a0x7c00\u4f5c\u4e3a\u6808\u9876\n  call bootmain # \u6267\u884c/lab/boot/main.c\u7684\u4ee3\u7801\uff0c\u7ee7\u7eedBoot Loader\n\n   # If bootmain returns (it shouldn't), loop.\nspin:\n  jmp spin\n</code></pre>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#5-mainc","title":"5. main.c\uff1a\u52a0\u8f7d\u5185\u6838","text":"<p>\u7ec3\u4e603(2) \u8ddf\u8e2a\u5230<code>boot/main.c</code>\u4e2d\u7684<code>bootmain()</code>\uff0c\u7136\u540e\u8ddf\u8e2a\u5230<code>readsect()</code>\u3002\u786e\u5b9a\u4e0e<code>readsect()</code>\u4e2d\u7684\u6bcf\u4e2a\u8bed\u53e5\u76f8\u5bf9\u5e94\u7684\u786e\u5207\u6c47\u7f16\u6307\u4ee4\u3002\u8ddf\u8e2a<code>readsect()</code>\u7684\u5176\u4f59\u90e8\u5206\u5e76\u8fd4\u56de\u5230<code>bootmain()</code> \uff0c\u5e76\u786e\u5b9a\u4ece\u78c1\u76d8\u8bfb\u53d6\u5185\u6838\u5269\u4f59\u6247\u533a\u7684<code>for</code>\u5faa\u73af\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u3002\u627e\u51fa\u5faa\u73af\u7ed3\u675f\u65f6\u5c06\u8fd0\u884c\u7684\u4ee3\u7801\uff0c\u5728\u90a3\u91cc\u8bbe\u7f6e\u65ad\u70b9\uff0c\u7136\u540e\u6267\u884c\u5230\u8be5\u65ad\u70b9\u3002\u7136\u540e\u9010\u6b65\u6267\u884c\u5f15\u5bfc\u52a0\u8f7d\u7a0b\u5e8f\u7684\u5176\u4f59\u90e8\u5206\u3002</p> <p><code>boot.S</code>\u5b8c\u6210\u4e86\u65e0\u6cd5\u7528\u9ad8\u7ea7\u8bed\u8a00\u4ee3\u7801\u5b8c\u6210\u7684\u5de5\u4f5c\uff08\u5e94\u8be5\uff1f\uff09\uff0c\u5f53 GDT \u53ca\u6bb5\u5bc4\u5b58\u5668\u51c6\u5907\u597d\u4e4b\u540e\uff0cC\u8bed\u8a00\u4ee3\u7801\u8fd0\u884c\u7684\u73af\u5883\u4e5f\u5c31\u51c6\u5907\u597d\u4e86\uff0cBoot Loader\u7684\u5de5\u4f5c\u7531<code>main.c</code>\u63a5\u529b\u5b8c\u6210\u3002\uff08\u4ec0\u4e48\uff1f\u7ee7\u7eed\u7528\u6c47\u7f16\uff1f\u4e0d\u8981\u4e3a\u96be\u81ea\u5df1\u2026\u2026\uff09</p>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#51-elf","title":"5.1 \u8bfb\u53d6\u3001\u6821\u9a8c\u3001\u6267\u884cELF\u6587\u4ef6","text":"<p>\u4e00\u4e2aC\u7a0b\u5e8f\u7ecf\u8fc7\u7f16\u8bd1\u548c\u94fe\u63a5\u540e\u4f1a\u4ea7\u751f\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\uff0cELF\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u4e00\u79cd\u683c\u5f0f\u3002</p> <p>\u9996\u5148\u6765\u770b ELF \u6587\u4ef6\u7684\u7ed3\u6784\uff1a</p> \u540d\u79f0 \u7528\u9014 ELF \u9996\u90e8 \u6821\u9a8c\u3001\u6307\u51faSection Header table\uff08\u4ee5\u4e0b\u5404\u4e2a\u5b57\u6bb5\u90fd\u662f\u8fd9\u4e2a\u8868\u683c\u7684\u4e00\u90e8\u5206\uff09\u76f8\u5bf9\u4e8e\u6587\u4ef6\u8d77\u59cb\u7684\u504f\u79fb\u91cf\u3001Section Header table\u7684\u5927\u5c0f\u7b49 .text \u5b57\u6bb5 \u4fdd\u5b58\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801 .rodata\u5b57\u6bb5 \u4fdd\u5b58\u53ea\u8bfb\u7684\u53d8\u91cf .data \u5b57\u6bb5 \u4fdd\u5b58\u5df2\u7ecf\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u53d8\u91cf .bss \u5b57\u6bb5 \u4fdd\u5b58\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u53d8\u91cf .... .... <p>\u5728\u672c\u5b9e\u9a8c\u4e2d\uff0cJOS \u5185\u6838\uff08\u4e00\u4e2aC\u7a0b\u5e8f\uff09\u5728\u6267\u884c<code>make</code>\u4e4b\u540e\u7f16\u8bd1\u4ea7\u751f\u4e86\u53ef\u6267\u884c\u6587\u4ef6<code>/lab/obj/kern/kernel.img</code>\uff0c\u5b83\u662f ELF \u683c\u5f0f\u7684\u3002\u5728 QEMU \u6a21\u62df\u51fa\u7684\u786c\u4ef6\u73af\u5883\u4e2d\uff0c\u8fd9\u4e2aELF\u6587\u4ef6\u88ab\u89c6\u4e3a\u5b58\u50a8\u5728\u4e86\u786c\u76d8\u4e0a\u3002\uff08\u5c31\u597d\u6bd4\u7528U\u76d8\u91cd\u88c5\u7cfb\u7edf\uff0c\u5f97\u4e8b\u5148\u62f7\u4e2a\u7cfb\u7edf\u955c\u50cf\u5728U\u76d8\u4e0a\u624d\u80fd\u88c5\uff09 </p> <p><code>bootmain</code>\u51fd\u6570\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\uff0c\u662f\u8c03\u7528<code>readseg</code>\u6765\u8bfb\u5165\u786c\u76d8\u4e0a\u7684ELF\u6587\u4ef6\u7684\u7b2c\u4e00\u9875\u6570\u636e\uff08\u5927\u5c0f\u4e3a 512*8B = 4KB\uff09\uff08\u5c06 ELF \u9996\u90e8\u5305\u542b\u5728\u5185\uff0c\u53ef\u80fd\u8bfb\u591a\u4e86\uff0c\u4f46\u4e0d\u5f71\u54cd\uff09\u3002 </p> <p>\u4ece\u4e0b\u9762\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u8bfb\u5165\u7684 ELF \u6570\u636e\u5728\u5185\u5b58\u4e2d\u7684\u8d77\u59cb\u5730\u5740\u4e3a<code>0x10000</code>.</p> <pre><code>#define SECTSIZE    512\n#define ELFHDR      ((struct Elf *) 0x10000) // scratch space \n// read 1st page off disk\nreadseg((uint32_t) ELFHDR, SECTSIZE*8, 0);\n// \u5c06ELF\u6587\u4ef6\u4ece\u8d77\u59cb\u5730\u5740\u504f\u79fb0\u4e2a\u5b57\u8282\u540e\u7684\u8fde\u7eed512*8\u4e2a\u5b57\u8282\u6570\u636e\u8bfb\u5165\u5230\u4ee5ELFHDR\u4e3a\u8d77\u59cb\u7269\u7406\u5730\u5740\u7684\u5185\u5b58\u4e2d\n</code></pre> <p>\u6839\u636eELF\u89c4\u8303\uff0c\u5bf9\u8bfb\u5165\u7684\u6570\u636e\u8fdb\u884c\u6821\u9a8c\uff0c\u5224\u65ad\u662f\u5426\u4e3a\u5408\u6cd5\u7684ELF\u6587\u4ef6\uff1a</p> <pre><code>// is this a valid ELF?\nif (ELFHDR-&gt;e_magic != ELF_MAGIC) // \u5224\u65ad\u6587\u4ef6\u662f\u5426\u4ee5\u89c4\u5b9a\u7684\u56fa\u5b9a\u503c 0x464C457FU \u5f00\u5934\n// \uff08\u6ce8\uff1a/ \"\\x7FELF\" in little endian */*\uff09\ngoto bad;\n</code></pre> <p>\u5982\u679c\u662f\u5408\u6cd5\u7684ELF\u6587\u4ef6\uff0c\u5219\u7ee7\u7eed\u8bfb\u53d6ELF\u7684\u4f59\u4e0b\u5185\u5bb9\uff1a</p> <ol> <li> <p>\u627e\u5230\u5e76\u8bfb\u53d6Program Header Table\u3002\u8fd9\u4e2a\u8868\u683c\u4fdd\u5b58\u4e86\u7a0b\u5e8f\u6240\u6709\u6bb5\u7684\u4fe1\u606f\uff0c\u8bfb\u53d6\u8fd9\u4e2a\u8868\uff0c\u5c31\u662f\u8bfb\u53d6\u7a0b\u5e8f\u7684\u6307\u4ee4\u6bb5\u3001\u6570\u636e\u6bb5\u7b49\u7b49\u3002</p> <pre><code>// load each program segment (ignores ph flags)\nph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR-&gt;e_phoff);\n// e_phoff\u662fELF\u6587\u4ef6\u4e2d\u7684\u4e00\u4e2a\u5b57\u6bb5\uff0c\u7528\u4e8e\u6307\u51faProgram Header Table\u7684\u8d77\u59cb\u4f4d\u7f6e\neph = ph + ELFHDR-&gt;e_phnum;\n// e_phnum\u7528\u4e8e\u6307\u51faProgram Header Table\u4e2d\u6709\u591a\u5c11\u4e2aentries\n// \u8ba1\u7b97\u5f97\u51faeph\uff0c\u5373Program Header Table\u7684\u7ed3\u675f\u4f4d\u7f6e\nfor (; ph &lt; eph; ph++)\n// p_pa is the load address of this segment (as well\n// as the physical address)\nreadseg(ph-&gt;p_pa, ph-&gt;p_memsz, ph-&gt;p_offset);\n// \u8bfb\u53d6\u6240\u6709\u6bb5\u5230\u5185\u5b58\u4e2d\n</code></pre> </li> <li> <p>\u5f00\u59cb\u6267\u884cELF\u4e2d\u7684\u6307\u4ee4\uff0c\u6b63\u5f0f\u8fd0\u884c\u5185\u6838\u3002</p> <pre><code>// call the entry point from the ELF header\n// note: does not return!\n((void (*)(void)) (ELFHDR-&gt;e_entry))();\n// e_entry\u5b57\u6bb5\u6307\u5411\u7684\u662f\u8fd9\u4e2a\u6587\u4ef6\u7684\u6267\u884c\u5165\u53e3\u5730\u5740\n// CPU\u5f00\u59cb\u6267\u884c\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4e5f\u5373\u8ba1\u7b97\u673a\u5f00\u59cb\u8fd0\u884cJOS\n</code></pre> </li> </ol> <p>\u8fd9\u91cc\u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u770b\u770b\u5185\u6838\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5728\u54ea\u91cc\uff1a</p> <p>\u4e0a\u9762\u4e00\u884c\u4ee3\u7801\u5bf9\u5e94\u7684\u6c47\u7f16\u7ed3\u679c\u662f\uff08\u5728<code>/lab/obj/boot/boot.asm</code>\u4e2d\uff09\uff1a<code>7d71: ff 15 18 00 01 00   call  *0x10018</code>\u3002\u4ee5\u5185\u5b58\u5730\u5740<code>0x10018</code>\u6240\u5b58\u50a8\u7684\u503c\u4e3a\u76ee\u6807\u5730\u5740\u8fdb\u884c\u8df3\u8f6c\u3002</p> <p>\u4e3a\u4ec0\u4e48\u662f<code>0x10018</code>\uff1f\u524d\u9762\u52a0\u7c97\u8fc7\uff0c\u8bfb\u5165\u7684 ELF \u6587\u4ef6\u4ee5<code>0x10000</code>\u4e3a\u8d77\u59cb\u5730\u5740\u3002\u6839\u636e ELF \u89c4\u8303\uff0c\u4ece\u8d77\u59cb\u5730\u5740\u5411\u540e\u504f\u79fb<code>0x18</code>\u4e2a\u5b57\u8282\uff0c\u5373\u5730\u5740<code>0x10018</code>\u4e3a<code>e_entry</code>\u5b57\u6bb5\uff0c\u4fdd\u5b58\u7684\u662f\u7a0b\u5e8f\u6267\u884c\u7684\u5165\u53e3\u70b9\uff08entry point\uff09\u3002</p> <p>\u5728 GDB \u4e2d\u67e5\u770b\u5185\u5b58\u5730\u5740<code>0x10018</code>\u4e2d\u7684\u503c\uff1a</p> <pre><code>(gdb) b *0x7d71\n(gdb) c # \u8bb0\u5f97\u5148\u6267\u884c\u5230\u5df2\u7ecf\u628aELF\u6587\u4ef6\u52a0\u8f7d\u5b8c\u6bd5\u7684\u4f4d\u7f6e\n(gdb) x/1x 0x10018\n0x10018:    0x0010000c\n</code></pre> <p>\u5373\u5185\u6838\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u4f4d\u4e8e<code>0x10000c</code>\u4e2d\u3002</p>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#52-readsect","title":"5.2 <code>readsect</code>\u51fd\u6570\u5206\u6790","text":"<p><code>bootmain</code>\u51fd\u6570\u8c03\u7528<code>readseg</code>\u51fd\u6570\u8fdb\u884cELF\u6587\u4ef6\u7684\u8bfb\u53d6\uff0c\u6bcf\u8c03\u7528\u4e00\u6b21\u8bfb\u53d6\u4e00\u6bb5\uff08eg. ELF\u6587\u4ef6\u9996\u90e8\u3001\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u7b49\uff09\uff0c\u800c<code>readseg</code>\u53c8\u8c03\u7528\u4e86<code>readsect</code>\u8fdb\u884c\u4e00\u4e2a\u6247\u533a\u7684\u8bfb\u53d6\uff08\u4e00\u4e2a\u7a0b\u5e8f\u6bb5\u53ef\u80fd\u5b58\u50a8\u5728\u8fde\u7eed\u591a\u4e2a\u6247\u533a\uff09\u3002</p> <p>\u7ec3\u4e60 3 \u8981\u6c42\u6211\u4eec\u6df1\u5165<code>readsect</code>\u51fd\u6570\uff0c\u5c06 C \u6e90\u4ee3\u7801\u4e0e\u6c47\u7f16\u6307\u4ee4\u5bf9\u5e94\u8d77\u6765\u3002</p> <p>\u4ece<code>/lab/obj/boot/boot.asm</code>\u6587\u4ef6\u53ef\u77e5\uff0c<code>readsect</code>\u51fd\u6570\u7684\u8d77\u59cb\u5730\u5740\u4e3a<code>0x00007c78</code>\u3002\u8865\u5145\u7684\u6ce8\u91ca\u662f\u6c47\u7f16\u6307\u4ee4\u5bf9\u5e94\u7684C\u6e90\u7801\u3002</p> <pre><code>(gdb) b *0x7c78\nBreakpoint 1 at 0x7c78\n(gdb) c\nContinuing.\nThe target architecture is set to \"i386\".\n=&gt; 0x7c78:      push   %ebp\nBreakpoint 1, 0x00007c78 in ?? ()\n(gdb) x/37i\n   # readsect\u51fd\u6570\u5f00\u59cb\uff0c\u4ee5\u4e0b\u662f\u6c47\u7f16\u4e2dcall\u6307\u4ee4\u524d\u540e\u7684\u56fa\u5b9a\u7684\u6808\u64cd\u4f5c\uff0c\u7528\u4e8e\u5206\u9694\u8c03\u7528\u8005\u548c\u88ab\u8c03\u7528\u8005\u7684\u6808\u7a7a\u95f4\n   0x7c79:      mov    %esp,%ebp\n   0x7c7b:      push   %edi\n   0x7c7c:      push   %eax\n   0x7c7d:      mov    0xc(%ebp),%ecx\n   # // wait for disk to be ready\n   # waitdisk();\n   0x7c80:      call   0x7c6a  # \u8c03\u7528 waitdisk \u51fd\u6570\n   # outb(0x1F2, 1);        // count = 1\n   0x7c85:      mov    $0x1,%al\n   0x7c87:      mov    $0x1f2,%edx\n   0x7c8c:      out    %al,(%dx)\n   # outb(0x1F3, offset);\n   0x7c8d:      mov    $0x1f3,%edx\n   0x7c92:      mov    %ecx,%eax\n   0x7c94:      out    %al,(%dx)\n   # outb(0x1F4, offset &gt;&gt; 8);\n   0x7c95:      mov    %ecx,%eax\n   0x7c97:      mov    $0x1f4,%edx\n   0x7c9c:      shr    $0x8,%eax\n   0x7c9f:      out    %al,(%dx)\n   # outb(0x1F5, offset &gt;&gt; 16);\n   0x7ca0:      mov    %ecx,%eax\n   0x7ca2:      mov    $0x1f5,%edx\n   0x7ca7:      shr    $0x10,%eax\n   0x7caa:      out    %al,(%dx)\n   # outb(0x1F6, (offset &gt;&gt; 24) | 0xE0);\n   0x7cab:      mov    %ecx,%eax\n   0x7cad:      mov    $0x1f6,%edx\n   0x7cb2:      shr    $0x18,%eax\n   0x7cb5:      or     $0xffffffe0,%eax\n   0x7cb8:      out    %al,(%dx)\n   # outb(0x1F7, 0x20); // cmd 0x20 - read sectors\n   0x7cb9:      mov    $0x20,%al\n   0x7cbb:      mov    $0x1f7,%edx\n   0x7cc0:      out    %al,(%dx)\n   # // wait for disk to be ready\n   #    waitdisk();\n   0x7cc1:      call   0x7c6a # \u8c03\u7528 waitdisk \u51fd\u6570\n   # // read a sector\n   # insl(0x1F0, dst, SECTSIZE/4);\n   0x7cc6:      mov    $0x80,%ecx\n   0x7ccb:      mov    0x8(%ebp),%edi\n   0x7cce:      mov    $0x1f0,%edx\n   0x7cd3:      cld    \n   0x7cd4:      repnz insl (%dx),%es:(%edi)\n   # readsect\u51fd\u6570\u8fd4\u56de\uff0c\u4ee5\u4e0b\u662f\u6c47\u7f16\u4e2dcall\u6307\u4ee4\u524d\u540e\u7684\u56fa\u5b9a\u7684\u6808\u64cd\u4f5c\uff0c\u7528\u4e8e\u5206\u9694\u8c03\u7528\u8005\u548c\u88ab\u8c03\u7528\u8005\u7684\u6808\u7a7a\u95f4\n   0x7cd6:      pop    %edx\n   0x7cd7:      pop    %edi\n   0x7cd8:      pop    %ebp\n   0x7cd9:      ret\n</code></pre> <p>\u987a\u4fbf\u4e5f\u770b\u4e00\u4e0b<code>readsect</code>\u51fd\u6570\u5177\u4f53\u662f\u5982\u4f55\u8bfb\u78c1\u76d8\u7684\u3002\u53ef\u4ee5\u7b80\u5355\u6982\u62ec\u4e3a4\u6b65\uff1a</p> <ol> <li>\u67e5\u8be2\u78c1\u76d8\u72b6\u6001\u662f\u5426\u7a7a\u95f2\uff08\u5177\u4f53\u5b9e\u73b0\u662f\u5224\u65ad\u78c1\u76d8I/O\u72b6\u6001\u7aef\u53e3<code>01F7</code>\u7684bit 7&lt;\u4e3a1\u5219\u78c1\u76d8\u6b63\u5728\u6267\u884c\u547d\u4ee4\uff0c\u5fd9\u788c\u4e2d&gt;\u4e0ebit 6&lt;\u4e3a1\u5219\u8868\u793a\u8bbe\u5907\u5c31\u7eea&gt;\u662f\u5426\u5206\u522b\u4e3a0\u548c1\uff09\uff1b</li> <li>\u82e5\u7a7a\u95f2\uff0c\u5219\u5c06\u8981\u8bfb\u7684\u6247\u533a\u4fe1\u606f\uff08\u4ece\u7b2c\u51e0\u53f7\u6247\u533a\u5f00\u59cb\u8bfb\u3001\u8bfb\u51e0\u4e2a\u7b49\uff09\u5199\u5165\u7aef\u53e3<code>0x1F3</code>\u5230<code>0x1F6</code>\uff0c\u5e76\u5c06\u547d\u4ee4<code>0x20</code>\uff08\u8868\u793a\u8bfb\u6247\u533a\uff09\u5199\u5165\u78c1\u76d8\u7684I/O\u547d\u4ee4\u7aef\u53e3<code>01F7</code>\uff1b</li> <li>\u67e5\u8be2\u78c1\u76d8\u72b6\u6001\u662f\u5426\u7a7a\u95f2\uff1b</li> <li>\u82e5\u7a7a\u95f2\uff0c\u5219\u4ece\u78c1\u76d8I/O\u6570\u636e\u7aef\u53e3<code>0x1F0</code>\u8bfb\u5165\u6570\u636e\uff1b</li> </ol> <p>\u5173\u4e8e\u6b64\u5904\u7528\u5230\u7684\u78c1\u76d8I/O\u7aef\u53e3\u53f7\u53ca\u5bf9\u5e94\u7528\u9014\uff0c\u8be6\u89c1XT, AT and PS/2 I/O port addresses\uff08\u641c\u7d22\u5173\u952e\u8bcd1st Fixed Disk Controller\uff09</p> <p>\u7ec3\u4e603\u7684\u95ee\u9898\uff1a</p> <ul> <li> <p>\u5904\u7406\u5668\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u6267\u884c 32 \u4f4d\u4ee3\u7801\uff1f\u7a76\u7adf\u662f\u4ec0\u4e48\u5bfc\u81f4\u4ece 16 \u4f4d\u6a21\u5f0f\u5207\u6362\u5230 32 \u4f4d\u6a21\u5f0f\uff1f</p> <p>\u5728<code>boot.S</code>\u7684<code>ljmp $PROT_MODE_CSEG, $protcseg</code>\u5904\u5f00\u59cb\u6267\u884c\u4ee3\u7801\u3002</p> <p>\u4ece 16 \u4f4d\u6a21\u5f0f\u5207\u6362\u5230 32 \u4f4d\u4fdd\u62a4\u6a21\u5f0f\uff0c\u65e2\u8981\u6c42 PE \u6807\u5fd7\u4f4d\u7684\u4fee\u6539\uff0c\u4e5f\u8981\u6c42 GDT \u52a0\u8f7d\u5b8c\u6bd5\uff08\u5426\u5219\u53ea\u662f\u5728\u5f62\u5f0f\u4e0a\u5207\u6362\u5230\u4e86\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u800c\u5df2\uff0c\u6ca1\u529e\u6cd5\u5b9e\u9645\u8fdb\u884c\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u7684\u5bfb\u5740\u3001\u6267\u884c\u4ee3\u7801\uff09\uff0c\u6240\u4ee5\u662f\u4ee5\u4e0b\u6307\u4ee4\u5408\u8d77\u6765\u5b8c\u6210\u4e86\u4ece 16 \u4f4d\u6a21\u5f0f\u5230 32 \u4f4d\u6a21\u5f0f\u7684\u5207\u6362\u3002</p> <pre><code>  # \u52a0\u8f7dGDT\u5230GDTR\n  lgdt    gdtdesc\n  # \u4fee\u6539PE\u6807\u5fd7\u4f4d\n  movl    %cr0, %eax\n  orl     $CR0_PE_ON, %eax\n  movl    %eax, %cr0\n  # Jump to next instruction, but in 32-bit code segment.\n  # Switches processor into 32-bit mode.\n  # \u66f4\u65b0\u5168\u90e8\u7684\u6bb5\u5bc4\u5b58\u5668\n  ljmp    $PROT_MODE_CSEG, $protcseg\n  movw    $PROT_MODE_DSEG, %ax    # Our data segment selector\n  movw    %ax, %ds                # -&gt; DS: Data Segment\n  movw    %ax, %es                # -&gt; ES: Extra Segment\n  movw    %ax, %fs                # -&gt; FS\n  movw    %ax, %gs                # -&gt; GS\n  movw    %ax, %ss                # -&gt; SS: Stack Segment\n  # \u66f4\u65b0\u6808\u9876\u6307\u9488\n  movl    $start, %esp\n</code></pre> </li> </ul> <ul> <li> <p>Boot Loader\u6267\u884c \u7684\u6700\u540e\u4e00\u6761\u6307\u4ee4\u662f\u4ec0\u4e48\uff0c\u5b83\u521a\u521a\u52a0\u8f7d\u7684\u5185\u6838\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u662f\u4ec0\u4e48\uff1f</p> <p>Boot Loader\u6700\u540e\u4e00\u6761\u6307\u4ee4\u662f\uff1a</p> <pre><code>((void (*)(void)) (ELFHDR-&gt;e_entry))();\n</code></pre> <p>\u5bf9\u5e94\u7684\u6c47\u7f16\u6307\u4ee4\u662f\uff1a</p> <pre><code>7d71: ff 15 18 00 01 00       call   *0x10018\n# call *0x10018 \u610f\u4e3a\u4ee50x10018\u8fd9\u4e2a\u5185\u5b58\u5730\u5740\u4e2d\u5b58\u50a8\u7684\u503c\u4e3a\u76ee\u6807\u5730\u5740\u8df3\u8f6c\uff08\u51fd\u6570\u8c03\u7528\uff09\uff0c\u800c\u975e\u76f4\u63a5\u8df3\u8f6c\u52300x10018\n</code></pre> <p>\u5185\u6838\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u662f\uff1a</p> <pre><code>movw  $0x1234,0x472           # warm boot\n</code></pre> <p>\u8fd9\u4e2a\u53ef\u4ee5\u5728<code>obj/kern/kernel.asm</code>\u770b\u5230\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 GDB \u5355\u6b65\u8c03\u8bd5\u5f97\u5230\uff1a</p> <pre><code>(gdb) b *0x7d71\nBreakpoint 1 at 0x7d71\n(gdb) c\nContinuing.\nThe target architecture is set to \"i386\".\n=&gt; 0x7d71:    call   *0x10018\n\nBreakpoint 1, 0x00007d71 in ?? ()\n(gdb) si\n=&gt; 0x10000c:  movw   $0x1234,0x472 # \u5185\u6838\u7b2c\u4e00\u6761\u6307\u4ee4\n0x0010000c in ?? ()\n</code></pre> </li> </ul> <ul> <li> <p>\u5185\u6838\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5728\u54ea\u91cc\uff1f</p> <p>Boot Loader\u6700\u540e\u4e00\u6761\u6307\u4ee4\u4e3a<code>call *0x10018</code>\uff0c\u800c<code>0x10018</code>\u7684\u503c\u4e3a<code>0x0010000c</code>\uff1b</p> <p>\u6240\u4ee5\u5185\u6838\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5728<code>0x0010000c</code>\u3002</p> </li> </ul> <ul> <li> <p>Boot Loader\u5982\u4f55\u51b3\u5b9a\u5b83\u5fc5\u987b\u8bfb\u53d6\u591a\u5c11\u4e2a\u6247\u533a\u624d\u80fd\u4ece\u78c1\u76d8\u4e2d\u83b7\u53d6\u6574\u4e2a\u5185\u6838\uff1f\u5b83\u5728\u54ea\u91cc\u627e\u5230\u8fd9\u4e9b\u4fe1\u606f\uff1f</p> <p>\u5728<code>boot/main.c</code>\u4e2d\u53ef\u4ee5\u770b\u5230\uff1a</p> <pre><code>ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR-&gt;e_phoff);\neph = ph + ELFHDR-&gt;e_phnum;\nfor (; ph &lt; eph; ph++)\n// p_pa is the load address of this segment (as well\n// as the physical address)\nreadseg(ph-&gt;p_pa, ph-&gt;p_memsz, ph-&gt;p_offset);\n</code></pre> <p>\u5176\u4e2d<code>ph-&gt;p_pa</code>\u4e3aProgram Header Table\u4e2d\u6bcf\u4e00\u6bb5\u7684\u8d77\u59cb\u7269\u7406\u5730\u5740\uff0c<code>eph</code>\u4e3aProgram Header Table\u7684\u7ed3\u675f\u5730\u5740\uff0c\u8bfb\u5b8c\u4e86\u8fd9\u4e2aProgram Header Table\u5c31\u662f\u8bfb\u5b8c\u4e86\u6574\u4e2a\u5185\u6838\u3002\u81f3\u4e8e\u6bcf\u4e00\u6bb5\u8be5\u8bfb\u591a\u5c11\u5b57\u8282\uff0c\u4ece<code>ph-&gt;p_memsz</code>\u5f97\u5230\uff0c\u800c\u4e00\u4e2a\u6247\u533a\u5927\u5c0f\u4e3a 512 \u5b57\u8282\uff0c\u6362\u7b97\u4e00\u4e0b\u5373\u53ef\u5f97\u77e5\u662f\u591a\u5c11\u4e2a\u6247\u533a\uff08\u4e0d\u8fc7\u6e90\u7801\u4e2d\u867d\u7136\u662f\u4ee5\u6247\u533a\u4e3a\u5355\u4f4d\u8bfb\u7684\uff0c\u4f46\u8d77\u59cb\u548c\u7ec8\u6b62\u662f\u4ee5\u5b57\u8282\u6570\u8ba1\u7684\uff0c\u4e5f\u6ca1\u505a\u8fd9\u4e2a\u6362\u7b97\uff09</p> </li> </ul>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#53-vmalma","title":"5.3 VMA\u4e0eLMA","text":"<p>\u7559\u610f\u4e00\u4e2a\u95ee\u9898\uff1a\u5185\u6838\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5230\u5e95\u5728\u54ea\u91cc\uff1f</p> <p>GDB \u8c03\u8bd5\u7ed3\u679c\u663e\u793a\uff0c\u5185\u6838\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5730\u5740\u4e3a<code>0x10000c</code>\uff1b\u4f46<code>obj/kern/kernel.asm</code>\u53c8\u663e\u793a\uff0c\u5185\u6838\u4ece<code>0xf0100000</code>\u5f00\u59cb\u6267\u884c.</p> <p>\u8981\u641e\u6e05\u695a<code>0xf0100000</code>\u4e0e<code>0x10000c</code>\u4e4b\u95f4\u7684\u8054\u7cfb\uff0c\u9996\u5148\u9700\u8981\u4e86\u89e3 VMA \u548c LMA\u3002</p> <p>VMA \u4e3a\u865a\u62df\u5730\u5740\uff08Virtual Memory Address\uff09/\u94fe\u63a5\u5730\u5740\uff0c\u662f\u6bb5\u671f\u671b\u5f00\u59cb\u6267\u884c\u7684\u5730\u5740\u3002</p> <p>LMA \u4e3a\u52a0\u8f7d\u5730\u5740\uff08Load Memory Address\uff09\uff0c\u662f\u6bb5\u5b9e\u9645\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff08\u5728\u672cLab\u4e2d\u53ef\u4ee5\u76f4\u63a5\u7406\u89e3\u4e3a\u5185\u5b58\u7269\u7406\u5730\u5740\uff1f\uff09\u3002</p> <p>\u4f5c\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5148\u6765\u770b\u770b Boot Loader \u7684 .text \u6bb5\u7684 VMA \u4e0e LMA\u3002</p> <pre><code>$ objdump -h obj/boot/boot.out\n...\nSections:\nIdx Name          Size      VMA       LMA       File off  Algn\n  0 .text         0000018c  00007c00  00007c00  00000074  2**2\n                  CONTENTS, ALLOC, LOAD, CODE\n...\n</code></pre> <p>\u8fd9\u91cc VMA \u548c LMA \u662f\u76f8\u540c\u7684\uff0c\u90fd\u662f<code>0x7c00</code>\uff0c\u8fd9\u4e2a\u5730\u5740\u6211\u4eec\u4e5f\u5f88\u719f\u6089\uff0cBoot Loader \u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5c31\u662f\u4ece<code>0x7c00</code>\u5f00\u59cb\u6267\u884c\u7684\u3002</p> <p>\u8fd9\u4e2a\u5730\u5740\u662f\u6587\u4ef6<code>boot/Makefrag</code>\u4e2d\u901a\u8fc7<code>-Ttext 0x7C00</code>\u6307\u5b9a\u7684\uff08\u4f5c\u4e3a<code>make</code>\u7684\u7f16\u8bd1\u53c2\u6570\uff1f\uff09\u3002\u663e\u7136\uff0c\u4fee\u6539\u8fd9\u4e2a\u503c\u540e\u91cd\u65b0\u7f16\u8bd1\u751f\u6210\u7684<code>obj/boot/boot.out</code>\u4e2d\uff0cVMA \u548c LMA \u5e94\u8be5\u4f1a\u53d1\u751f\u53d8\u5316\u3002</p> <p>\u7ec3\u4e60 5. \u5c1d\u8bd5\u5c06<code>boot/Makefrag</code>\u4e2d\u7684\u94fe\u63a5\u5730\u5740\u6539\u6210\u522b\u7684\uff0c\u4e4b\u540e<code>make clean</code>\uff0c\u518d<code>make</code>\uff0c\u7136\u540e\u91cd\u65b0\u8ddf\u8e2a Boot Loader \u4ee5\u67e5\u770b\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u627e\u5230\u4e2d\u65ad\u6216\u51fa\u9519\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u3002\u6700\u540e\u8bb0\u5f97\u628a\u94fe\u63a5\u5730\u5740\u6539\u56de\u6765\uff0c\u7136\u540e<code>make clean &amp;&amp; make</code>\u3002</p> <p>\u5c06<code>-Ttext 0x7C00</code>\u6539\u4e3a<code>-Ttext 0x7C10</code>\u3002\u91cd\u65b0\u7f16\u8bd1\u540e\u8fdb\u5165GDB\u8c03\u8bd5\uff1a</p> <pre><code>(gdb) b *0x7c10\n(gdb) c\nContinuing.\n\nProgram received signal SIGTRAP, Trace/breakpoint trap.\n[   0:7c2d] =&gt; 0x7c2d:  ljmp   $0x8,$0x7c42\n0x00007c2d in ?? ()\n</code></pre> <p>GDB \u663e\u793a\u51fa\u9519\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u4e3a <code>0x7c2d: ljmp $0x8,$0x7c42</code>\u3002</p> <p>\u518d\u6b21\u67e5\u770b\u6b64\u65f6\u7684 VMA \u4e0e LMA\uff0c\u4f1a\u53d1\u73b0\u90fd\u53d8\u6210\u4e86<code>0x7c10</code>\u3002</p> <pre><code>$ objdump -h obj/boot/boot.out\nobj/boot/boot.out:     file format elf32-i386\nSections:\nIdx Name          Size      VMA       LMA       File off  Algn\n  0 .text         0000018c  00007c10  00007c10  00000074  2**2\n                  CONTENTS, ALLOC, LOAD, CODE\n</code></pre> <p>\u63a5\u4e0b\u6765\u518d\u6765\u67e5\u770b\u5185\u6838\u7684 VMA \u4e0e LMA\uff1a</p> <pre><code>$ objdump -x obj/kern/kernel # \u67e5\u770bELF\u6587\u4ef6\u5404\u90e8\u5206\u7684\u540d\u79f0\u3001\u5927\u5c0f\u3001VMA\u3001LMA\u7b49\n\nobj/kern/kernel:     file format elf32-i386\nobj/kern/kernel\narchitecture: i386, flags 0x00000112:\nEXEC_P, HAS_SYMS, D_PAGED\nstart address 0x0010000c\n\nProgram Header:\n    LOAD off    0x00001000 vaddr 0xf0100000 paddr 0x00100000 align 2**12\n         filesz 0x00006dc2 memsz 0x00006dc2 flags r-x\n    # LOAD\u6807\u8bb0 \u8868\u793a\u8fd9\u662f\u9700\u8981\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u6570\u636e\uff0c\u4e0a\u9762\u63cf\u8ff0\u7684\u662f.text\u6bb5\nLOAD off    0x00008000 vaddr 0xf0107000 paddr 0x00107000 align 2**12\n         filesz 0x0000b6c1 memsz 0x0000b6c1 flags rw-\n    # LOAD\u6807\u8bb0 \u8868\u793a\u8fd9\u662f\u9700\u8981\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u6570\u636e\uff0c\u4e0a\u9762\u63cf\u8ff0\u7684\u662f.data\u6bb5\nSTACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4\n         filesz 0x00000000 memsz 0x00000000 flags rwx\n\nSections: # \u7701\u7565\u4e86\u4e00\u4e9b\u65e0\u9700\u5173\u5fc3\u7684\u5b57\u6bb5\nIdx Name          Size      VMA       LMA       File off  Algn\n  0 .text         00001a21  f0100000  00100000  00001000  2**4\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n  1 .rodata       000006d4  f0101a40  00101a40  00002a40  2**5\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n  ...\n\n  4 .data         00009300  f0107000  00107000  00008000  2**12\n                  CONTENTS, ALLOC, LOAD, DATA\n  ...\n\n  9 .bss          00000661  f0112060  00112060  00013060  2**5\n                  CONTENTS, ALLOC, LOAD, DATA\n</code></pre> <p>\u6ce8\u610f\u5230\uff0c\u5185\u6838\u6587\u4ef6 .text \u5b57\u6bb5\u7684 LMA \u4e0e VMA \u5b8c\u5168\u4e0d\u540c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u94fe\u63a5\u5185\u6838\u6bd4\u94fe\u63a5Boot Loader\u7a0b\u5e8f\u8981\u590d\u6742\u5f97\u591a\uff0c\u76f8\u5173\u7684\u94fe\u63a5\u914d\u7f6e\u5728<code>kern/kernel.ld</code>\u6587\u4ef6\u4e2d\u3002</p> <p>\u53ef\u4ee5\u5728<code>kern/kernel.ld</code>\u6587\u4ef6\u4e2d\u627e\u5230\u5185\u6838 .text \u5b57\u6bb5\u7684 LMA \u94fe\u63a5\u5730\u5740\u88ab\u6307\u5b9a\u7684\u5730\u65b9\uff1a</p> <pre><code>/* Link the kernel at this address: \".\" means the current address */\n    . = 0xF0100000;\n</code></pre> <p>\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u504f\u5411\u4e8e\u8fd0\u884c\u5728\u5f88\u9ad8\u7684 VMA \u4e0a\uff0c\u6bd4\u5982\u4e0a\u9762\u8fd9\u4e2a<code>0xF0100000</code>\uff0c\u800c\u5c06\u4f4e\u4f4d\u7684\u865a\u62df\u7a7a\u95f4\u5730\u5740\u7559\u7ed9\u7528\u6237\u4f7f\u7528\uff08Lab 2 \u4f1a\u89e3\u91ca\u539f\u56e0\uff09\u3002</p> <p>\u540c\u65f6\u6211\u4eec\u8fd8\u77e5\u9053\uff0c\u865a\u62df\u5185\u5b58\u4e00\u822c\u662f\u8fdc\u5927\u4e8e\u7269\u7406\u5185\u5b58\u7684\uff0c\u5728\u786e\u5b9a\u4e86\u5185\u6838 VMA \u4e3a<code>0xF0100000</code>\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u80fd\u7b80\u5355\u7c97\u66b4\u5730\u4e5f\u5c06 LMA \u5b9a\u4e3a<code>0xF0100000</code>\uff0c\u56e0\u4e3a\u5f88\u591a\u673a\u5668\u5728\u8fd9\u4e2a\u7269\u7406\u5730\u5740\u4e0a\u6ca1\u6709\u7269\u7406\u5185\u5b58\u3002\u5b9e\u9645\u505a\u6cd5\u662f\uff0c\u901a\u8fc7\u786c\u4ef6\u5c06\u8fd9\u4e2a VMA \u6620\u5c04\u5230\u8f83\u4f4e\u7684 LMA \u4e0a\u3002\u663e\u7136\uff0c\u8fd9\u4e2a LMA \u8d8a\u4f4e\uff0c\u5bf9\u7269\u7406\u5185\u5b58\u5927\u5c0f\u7684\u8981\u6c42\u4e5f\u8d8a\u4f4e\u3002\u6700\u4f4e\u80fd\u5230\u54ea\u91cc\u5462\uff1f\u7b54\u6848\u662f<code>0x100000</code>\uff0c\u5373\u4fdd\u7559\u7684<code>1MB</code>\u4ee5\u5916\u7684\u80fd\u7528\u7684\u7b2c\u4e00\u4e2a\u5730\u5740\uff08\u663e\u7136\u8fd9\u6837\u7684\u65b9\u6848\u53ea\u8003\u8651\u4e86\u90a3\u4e9b\u81f3\u5c11\u6709\u51e0MB\u7269\u7406\u5185\u5b58\u7684\u673a\u5668\uff0c8086\u8fd9\u79cd\u592a\u53e4\u65e9\u7684\u662f\u7528\u4e0d\u4e86\u7684\uff09\u3002</p> <pre><code>+------------------+  &lt;- 0x00100000 (1MB) (\u6ce8\uff1a1MB\u7a7a\u95f4\u6700\u540e\u4e00\u4e2a\u5730\u57400x000FFFFF)\n|     BIOS ROM     |\n+------------------+  &lt;- 0x000F0000 (960KB)\n|  16-bit devices, |\n|  expansion ROMs  |\n+------------------+  &lt;- 0x000C0000 (768KB)\n|   VGA Display    |\n+------------------+  &lt;- 0x000A0000 (640KB)\n|                  |\n|    Low Memory    |\n|                  |\n+------------------+  &lt;- 0x00000000\n</code></pre> <p>\u5982\u6b64\u4fbf\u80fd\u7406\u89e3\u4e3a\u4f55 .text \u5b57\u6bb5\u7684 VMA \u4e3a<code>0xF0100000</code>\uff0c\u800c LMA \u5374\u4e3a <code>0x100000</code>\u3002</p> <p>\uff08\u81f3\u4e8e\u4e3a\u4ec0\u4e48 GDB \u8c03\u8bd5\u663e\u793a\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u662f<code>0x10000c</code>\u8fd8\u6ca1\u641e\u660e\u767d\u2026\u2026\uff09</p> <p>\u7ec3\u4e60 6.  \u91cd\u65b0\u542f\u52a8 QEMU \u548c GDB\uff0c\u5728 Boot Loader \u521a\u5f00\u59cb\u6267\u884c\u65f6\u505c\u6b62\uff0c\u67e5\u770b <code>0x00100000</code>\u5f00\u59cb\u7684 8 \u4e2a\u5b57\uff1b\u518d\u5728\u8fdb\u5165\u5185\u6838\u65f6\u505c\u6b62\uff0c\u518d\u6b21\u67e5\u770b\u8fd9 8 \u4e2a\u5b57\u3002\u5b83\u4eec\u4e3a\u4ec0\u4e48\u4e0d\u540c\uff1f</p> <p>\u663e\u7136 Boot Loader \u521a\u5f00\u59cb\u6267\u884c\u65f6<code>0x00100000</code>\u5f00\u59cb\u7684 8 \u4e2a\u5b57\u8fd8\u6ca1\u6709\u4efb\u4f55\u5185\u5bb9\uff0c\u503c\u88ab\u521d\u59cb\u5316\u4e3a<code>0</code> \uff0c\u800c\u5728\u8fdb\u5165\u5185\u6838\u65f6\u5df2\u7ecf\u5c06 ELF \u6587\u4ef6\u8bfb\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u5185\u5bb9\u88ab\u66f4\u65b0\u4e3a ELF \u6587\u4ef6\u7684\u524d 8 \u4e2a\u5b57\u3002</p>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#part-3-the-kernel","title":"Part 3: The Kernel","text":""},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#1","title":"1. \u7269\u7406\u5730\u5740\u4e0e\u865a\u62df\u5730\u5740\u7684\u6620\u5c04","text":"<p>\u6211\u4eec\u5728 5.3 \u4e2d\u63d0\u5230\u8fc7\uff0c\u5185\u6838\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u6240\u5728\u7684\u7269\u7406\u5730\u5740<code>0x100000</code>\u88ab\u6620\u5c04\u5230\u865a\u62df\u5730\u5740<code>0xF0100000</code>\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5728 Lab 1 \u4e2d\uff0cJOS \u5bf9\u524d 4MB \u7684\u7269\u7406\u5185\u5b58\u90fd\u8fdb\u884c\u4e86\u7c7b\u4f3c\u7684\u6620\u5c04\uff0c\u8fd9\u662f\u7531<code>kern/entrypgdir.c</code>\u4e2d\u624b\u5199\u7684\u3001\u9759\u6001\u521d\u59cb\u5316\u7684\u9875\u76ee\u5f55\u548c\u9875\u8868\u5b9e\u73b0\u7684\u3002\u6211\u4eec\u5728 Lab 2 \u4e2d\u4f1a\u6df1\u5165\u76f8\u5173\u7ec6\u8282\uff0c\u800c\u73b0\u5728\u66f4\u5173\u5fc3\u7684\u662f\u5185\u6838\u4f55\u65f6\u542f\u7528\u8fd9\u4e2a\u6620\u5c04\u5173\u7cfb\u3002</p> <p><code>kern/entry.S</code>\u4e2d\u901a\u8fc7\u8bbe\u7f6e CPU \u63a7\u5236\u5bc4\u5b58\u5668\u4e2d<code>CR0</code>\u6bb5\u7684<code>PG</code>\u4f4d\u6765\u5f00\u542f\u6620\u5c04\uff08\u56de\u5fc6\uff1a\u5b9e\u6a21\u5f0f\u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\u7684<code>PE</code>\u4f4d\u4e5f\u4f4d\u4e8e<code>CR0</code>\u6bb5\uff09\u3002</p> <pre><code># Turn on paging.\nmovl    %cr0, %eax\norl $(CR0_PE|CR0_PG|CR0_WP), %eax\nmovl    %eax, %cr0\n</code></pre> <p>\u5f00\u542f\u540e\uff0c\u865a\u62df\u5730\u5740<code>0xf0000000</code>\u5230<code>0xf0400000</code>\u5c06\u88ab\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740<code>0x00000000</code>\u5230<code>0x00400000</code>\uff08\u524d 4MB \uff09\uff1b\u865a\u62df\u5730\u5740<code>0x00000000</code>\u5230<code>0x00400000</code>\u4e5f\u5c06\u88ab\u8f6c\u6362\u4e3a\u4e00\u6837\u7684\u7269\u7406\u5730\u5740\u3002</p> <p>\u7ec3\u4e60 7. \u4f7f\u7528 QEMU \u548c GDB \u8ddf\u8e2a JOS \u5185\u6838\u5e76\u5728<code>movl %eax, %cr0</code>\u5904\u68c0\u67e5 0x00100000 \u548c 0xf0100000 \u5904\u7684\u5185\u5b58\u3002\u7136\u540e\u8f93\u5165<code>stepi</code>\uff0c\u5355\u6b65\u6267\u884c\u8be5\u6307\u4ee4\u3002\u518d\u6b21\u68c0\u67e5 0x00100000 \u548c 0xf0100000 \u5904\u7684\u5185\u5b58\u3002</p> <p>\u5efa\u7acb\u65b0\u6620\u5c04\u540e\uff0c\u5982\u679c\u6620\u5c04\u4e0d\u5b58\u5728\uff0c\u5c06\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u662f\u4ec0\u4e48\uff1f\u6ce8\u91ca\u6389<code>kern/entry.S</code>\u4e2d<code>movl %eax, %cr0</code>\u8fd9\u4e00\u884c\uff0c\u518d\u6b21GDB\u8ddf\u8e2a\u68c0\u67e5\u3002</p> <pre><code>(gdb) b *0x100025\n(gdb) c\n(gdb) x/4b 0x00100000\n0x100000:   0x02    0xb0    0xad    0x1b\n(gdb) x/4b 0xf0100000\n0xf0100000 &lt;_start-268435468&gt;:  0x00    0x00    0x00    0x00\n(gdb) stepi\n=&gt; 0x100028:    mov    $0xf010002f,%eax\n0x00100028 in ?? ()\n(gdb) x/4b 0x00100000\n0x100000:   0x02    0xb0    0xad    0x1b\n(gdb) x/4b 0xf0100000\n0xf0100000 &lt;_start-268435468&gt;:  0x02    0xb0    0xad    0x1b\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u5efa\u7acb\u6620\u5c04\u524d\uff0c0x00100000 \u548c 0xf0100000 \u5904\u7684\u5185\u5b58\u5185\u5bb9\u4e0d\u540c\uff0c\u5efa\u7acb\u6620\u5c04\u540e\u5185\u5bb9\u76f8\u540c\u3002</p> <p>\u6ce8\u91ca\u6389\uff08\u6ce8\u610f\u7528<code>#</code>\u800c\u4e0d\u662f<code>;</code>\uff09<code>kern/entry.S</code>\u4e2d<code>movl %eax, %cr0</code>\u540e\uff0c\u8fd0\u884c\u5185\u6838\uff0cQEMU\u62a5\u9519\uff1a</p> <pre><code>qemu: fatal: Trying to execute code outside RAM or ROM at 0xf010002c\n</code></pre> <p>\u8868\u660e<code>0xf010002c</code>\u8d85\u51fa\u4e86\u7269\u7406\u5730\u5740\u8303\u56f4\u3002\u8bf4\u660e\u5185\u6838\u5728\u6267\u884c<code>f010002a</code>\u5904\u7684\u6307\u4ee4<code>jmp *%eax</code>\u65f6\u6267\u884c\u5931\u8d25\u3002</p>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#2","title":"2. \u683c\u5f0f\u5316\u6253\u5370\u5230\u63a7\u5236\u53f0","text":"<p>\u5728\u5b8c\u6210\u524d\u8ff0\u7684\u4e00\u5207\u521d\u59cb\u5316\u5de5\u4f5c\u540e\uff0c\u6211\u4eec\u7ec8\u4e8e\u53ef\u4ee5\u8ba9 JOS \u505a\u4e00\u4e9b\u7b80\u5355\u7684\u4e8b\u60c5\u4e86\u3002\u6bd4\u5982\u8ba9\u5b83\u8f93\u51fa\u4e00\u4e9b\u6587\u5b57\u5230\u63a7\u5236\u53f0\u4e0a\u3002</p> <p><code>printf</code>\u4e4b\u7c7b\u7684\u51fd\u6570\u4e0d\u662f\u5929\u7136\u5b58\u5728\u7684\uff0c\u672c\u8d28\u4e0a\u8fd8\u662f\u5728\u8c03\u7528 OS \u63d0\u4f9b\u7684\u529f\u80fd\u51fd\u6570\u624d\u80fd\u5b9e\u73b0\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u9700\u8981\u81ea\u5df1\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u51fd\u6570\u3002</p> <p>\u5728 JOS \u4e2d\uff0c\u8fd9\u4e00\u529f\u80fd\u6d89\u53ca\u5230\u7684\u6587\u4ef6\u6709<code>kern/printf.c</code>\u3001<code>lib/printfmt.c</code>\u3001<code>kern/console.c</code>\u3002\u8fd9\u91cc\u4e0d\u9010\u884c\u89e3\u91ca\uff0c\u6309\u7ec3\u4e608\u7684\u5f15\u5bfc\u8fb9\u505a\u8fb9\u7406\u89e3\u3002</p> <p>\u7ec3\u4e60 8. </p> <ol> <li> <p>\u5728\u4e0a\u8ff0\u6587\u4ef6\u4e2d\u627e\u5230\u88ab\u7701\u7565\u7684\u7528\u4e8e\u5b9e\u73b0\u901a\u8fc7<code>%o</code>\u4ee5\u6253\u5370\u516b\u8fdb\u5236\u6570\u7684\u4ee3\u7801\u6bb5\uff0c\u5c06\u5b83\u8865\u5145\u5b8c\u6574\u3002</p> <p>\u5728<code>printfmt.c</code>\u7684\u7b2c<code>207</code>\u884c\u3002\u53c2\u8003\u4e00\u4e0b\u4e0a\u4e0b\u6587\u201c%d\u201d\u548c\"%x\"\u7684\u4ee3\u7801\u5373\u53ef\u3002\u5b8c\u6210\u7684\u4ee3\u7801\uff1a</p> <pre><code>// (unsigned) octal\ncase 'o':\n// \u5df2\u5b8c\u6210\nnum = getuint(&amp;ap, lflag);\nbase = 8;\ngoto number;\nbreak;\n</code></pre> <p><code>make grade</code>\u4f1a\u81ea\u52a8\u6d4b\u8bd5\u4ee3\u7801\u6b63\u786e\u6027\uff0c<code>printf</code> \u4e00\u9879\u663e\u793a<code>OK</code>\u5373\u4e3a\u901a\u8fc7\u3002</p> <pre><code>running JOS: (0.5s) \n  printf: OK \n</code></pre> </li> <li> <p>\u89e3\u91ca<code>printf.c</code>\u548c<code>console.c</code>\u4e4b\u95f4\u7684\u63a5\u53e3\u3002\u5177\u4f53\u5730\u8bf4\uff0c<code>console.c</code> \u5bfc\u51fa\u4e86\u4ec0\u4e48\u51fd\u6570\uff1f\u8fd9\u4e2a\u51fd\u6570\u5728<code>printf.c</code>\u53c8\u662f\u600e\u6837\u88ab\u8c03\u7528\u7684\uff1f</p> <p><code>printf.c</code>\u4e2d<code>putch()</code>\u8c03\u7528\u4e86<code>console.c</code>\u5b9a\u4e49\u7684\u51fd\u6570<code>cputchar()</code>\uff0c<code>cputchar()</code>\u53c8\u4ec5\u8c03\u7528\u4e86<code>cons_putc()</code>\u51fd\u6570\uff0c\u901a\u8fc7\u5bf9\u76f8\u5173\u786c\u4ef6\u7684I/O\u7aef\u53e3\u8bfb\u5199\uff08\u5185\u8054\u6c47\u7f16\u5b9e\u73b0\uff09\u6765\u5b8c\u6210\u201c\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u5230\u63a7\u5236\u53f0\u201d\u7684\u529f\u80fd\u3002</p> </li> <li> <p>\u89e3\u91ca<code>console.c</code>\u4e2d\u7684\u4ee5\u4e0b\u4ee3\u7801</p> <p>\uff08\u6ce8\uff1aCGA\u662fQEMU\u6a21\u62df\u7684\u786c\u4ef6\uff0c\u4e0e\u53e4\u8001\u768480386\u9002\u914d\u7684\u540c\u6837\u53e4\u8001\u7684\u5f69\u8272\u56fe\u5f62\u5361\uff1bCRT\u4ee3\u8868QEMU\u6a21\u62df\u7684CRT\u663e\u793a\u5668\uff0c\u5373\u5728\u6db2\u6676\u666e\u53ca\u4e4b\u524d\u7528\u7684\u9634\u6781\u5c04\u7ebf\u663e\u50cf\u7ba1\uff09</p> <p>\u7528\u6765\u5b9e\u73b0\u8fd9\u4e48\u4e00\u4e2a\u663e\u793a\u6548\u679c\uff1a\u5f53\u6587\u672c\u5149\u6807\u8d85\u51fa\u4e86\u5c4f\u5e55\u8303\u56f4\uff0c\u6240\u6709\u6587\u672c\u90fd\u5e94\u8be5\u5f80\u4e0a\u6eda\u52a8\u4e00\u884c\uff0c\u540c\u65f6\u5149\u6807\u79fb\u52a8\u5230\u6700\u4e0b\u65b9\u65b0\u7684\u7a7a\u884c\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002</p> <pre><code>// What is the purpose of this?\nif (crt_pos &gt;= CRT_SIZE) { // \u5982\u679c\u5149\u6807\u8d85\u51fa\u4e86\u5c4f\u5e55\u8303\u56f4\n// crt_pos \u5f53\u524d\u5149\u6807\u6240\u5728\u4f4d\u7f6e\n// CRT_SIZE \u662fCRT\u663e\u793a\u5668\u7684\u5927\u5c0f\uff0c\u5355\u4f4d\u53ef\u80fd\u662f\u5b57\u7b26\u6570\uff0c\u503c\u4e3a25*80\nint i;\n// crt_buf \u5b58\u50a8\u7740\u5f53\u524d\u5c4f\u5e55\u4e0a\u663e\u793a\u7684\u5b57\u7b26\u7684\u6570\u7ec4\nmemmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));\n// memmove\u7684\u529f\u80fd\u7c7b\u4f3c\u4e8eC\u8bed\u8a00\u4e2d\u5e38\u7528\u7684memcpy\n// \u5c4f\u5e55\u4e0a\u7b2c\u4e8c\u884c\u5f80\u540e\u7684\u5b57\u7b26\u5168\u90e8\u524d\u79fb\u4e00\u884c\uff08\u5373\u7b2c\u4e00\u884c\u4ece\u5c4f\u5e55\u4e0a\u6d88\u5931\u4e86\uff09\nfor (i = CRT_SIZE - CRT_COLS; i &lt; CRT_SIZE; i++)\ncrt_buf[i] = 0x0700 | ' ';\n// \u5c06\u91cd\u590d\u7684\u6700\u540e\u4e00\u884c\u5220\u6389\uff0c\u53d8\u6210\u65b0\u7684\u7a7a\u884c\ncrt_pos -= CRT_COLS;\n// \u5149\u6807\u4ece\u539f\u6765\u7684\u65e7\u4e00\u884c\u672b\u5c3e\u79fb\u52a8\u5230\u4e86\u73b0\u5728\u7684\u65b0\u4e00\u884c\u5f00\u5934\n}\n</code></pre> </li> <li> <p>For the following questions you might wish to consult the notes for Lecture 2. These notes cover GCC's calling convention on the x86.</p> <p>Trace the execution of the following code step-by-step:</p> <pre><code>int x = 1, y = 3, z = 4;\ncprintf(\"x %d, y %x, z %d\\n\", x, y, z);\n</code></pre> <p>\u8981\u7528 GDB \u5728 JOS \u4e2d\u8ddf\u8e2a\u8fd9\u6bb5\u4ee3\u7801\u7684\u6267\u884c\uff0c\u5c06\u4ee3\u7801\u590d\u5236\u5230<code>kern/monitor.c</code>\u4e2d\u7684<code>monitor()</code>\u51fd\u6570\u5185\u5373\u53ef\uff0c\u5982\uff1a</p> <pre><code>void\nmonitor(struct Trapframe *tf)\n{\n...\ncprintf(\"Welcome to the JOS kernel monitor!\\n\");\ncprintf(\"Type 'help' for a list of commands.\\n\");\n\n// \u63d2\u5165\u8981\u6267\u884c\u7684\u4ee3\u7801\nint x = 1, y = 3, z = 4; cprintf(\"x %d, y %x, z %d\\n\", x, y, z);\n...\n}\n</code></pre> <p>\u7136\u540e<code>make</code>\uff0c\u5728<code>/obj/kern/kernel.asm</code>\u53ef\u4ee5\u67e5\u5230\u8fd9\u4e00\u6bb5\u7684\u5185\u5b58\u5730\u5740\u4e3a<code>0xf01008ea</code>\uff0cGDB \u6253\u65ad\u70b9\u7136\u540e\u8c03\u8bd5\u5373\u53ef\u3002</p> <p>- In the call to <code>cprintf()</code>, to what does <code>fmt</code> point? To what does <code>ap</code> point?</p> <pre><code>\u5148\u770b`cprintf()`\u7684\u5b9a\u4e49\uff1a\n\n```c\nint\ncprintf(const char *fmt, ...) // C\u8bed\u8a00\u4e0d\u5b9a\u53c2\u6570\n{\n  va_list ap; \n  int cnt;\n\n  va_start(ap, fmt); // \u521d\u59cb\u5316\u53c2\u6570\u5217\u8868\uff0c\u5c06\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u7ed9ap\n  cnt = vcprintf(fmt, ap); // \u5c06%d\u3001%x\u7b49\u4e0e\u53c2\u6570\u5217\u8868\u4e2d\u7684x\u3001y\u4e00\u4e00\u5bf9\u5e94\u8f93\u51fa\n  va_end(ap); // \u7ed3\u675f\u4e0d\u5b9a\u53c2\u6570\u7684\u4f7f\u7528\n\n  return cnt;\n}\n```\n\n\u663e\u7136`fmt`\u5bf9\u5e94\u7684\u662f\u53c2\u6570`\"x %d, y %x, z %d\\n\"`\uff0c`ap`\u4e3a\u591a\u4e2a\u53c2\u6570\uff08\u5728\u8fd9\u91cc\u4e3a`x,y,z`\uff09\u6784\u6210\u7684\u53c2\u6570\u5217\u8868\n</code></pre> <p>- List (in order of execution) each call to <code>cons_putc</code>, <code>va_arg</code>, and <code>vcprintf</code>. For <code>cons_putc</code>, list its argument as well. For <code>va_arg</code>, list what <code>ap</code> points to before and after the call. For <code>vcprintf</code> list the values of its two arguments.</p> <pre><code>GDB \u5728\u5355\u6b65\u8fdb\u5165\u4e00\u4e2a\u51fd\u6570\u540e\u4f1a\u81ea\u52a8\u663e\u793a\u5176\u53c2\u6570\uff0c\u6240\u4ee5\u5728\u51e0\u4e2a\u8c03\u7528\u7684\u5730\u65b9\u6253\u65ad\u70b9\u5373\u53ef\uff1a\n\n```bash\n(gdb) b *0xf01008ea # \u9700\u8981\u8ddf\u8e2a\u7684\u4ee3\u7801\u6bb5\n(gdb) b *0xf0100a8d # cprintf\n(gdb) b *0xf0100a62 # vcprintf\n(gdb) b *0xf010037b # cons_putc\n(gdb) b *0xf01011b2 # va_arg\n```\n\n\u4ee5\u4e0b\u4e3a GDB \u8f93\u51fa\u4fe1\u606f\u7ecf\u8fc7\u7cbe\u7b80\u540e\u5f97\u5230\u7684\uff1a\n\n```bash\ncprintf (fmt=0xf0101da8 \"x %d, y %x, z %d\\n\") \nvcprintf (fmt=0xf0101da8 \"x %d, y %x, z %d\\n\", ap=0xf010ef54 \"\\001\")\ncons_putc (c=120) at kern/console.c:70 # x\ncons_putc (c=32) at kern/console.c:70  # \u7a7a\u683c\n\nHardware watchpoint 2: ap\nOld value = (va_list) 0xf010ef54 \"\\001\"\nNew value = (va_list) 0xf010ef58 \"\\003\"\n\ncons_putc (c=49) at kern/console.c:70  # 1\ncons_putc (c=44) at kern/console.c:70  # ,\ncons_putc (c=32) at kern/console.c:70  # \u7a7a\u683c\ncons_putc (c=121) at kern/console.c:70 # y\ncons_putc (c=32) at kern/console.c:70  # \u7a7a\u683c\n\nHardware watchpoint 2: ap\nOld value = (va_list) 0xf010ef58 \"\\003\"\nNew value = (va_list) 0xf010ef5c \"\\004\"\n\ncons_putc (c=51) at kern/console.c:70  # 3\ncons_putc (c=44) at kern/console.c:70  # ,\ncons_putc (c=32) at kern/console.c:70  # \u7a7a\u683c\ncons_putc (c=122) at kern/console.c:70 # z\ncons_putc (c=32) at kern/console.c:70  # \u7a7a\u683c\n\nHardware watchpoint 2: ap\nOld value = (va_list) 0xf010ef5c \"\\004\"\nNew value = (va_list) 0xf010ef60 \"(\\037\", &lt;incomplete sequence \\360&gt;)\n\ncons_putc (c=52) at kern/console.c:70  # 4\n```\n\n\u5b8c\u6574\u8c03\u7528\u987a\u5e8f`cprintf()`\u2192`vcprintf()`\u2192`vprintfmt()`\u2192`getint()`\u2192`va_arg()`\uff08\u8fd4\u56de\u503c\u4e3a`putch`\u7684\u53c2\u6570\uff09\u2192`putch()`\u2192`cputchar()`\u2192`cons_putc()`\n\n`cons_putc`\u7684\u53c2\u6570\u662f\u6253\u5370\u8bed\u53e5`x 1, y 3, z 4`\u7684\u5404\u4e2a\u5b57\u7b26\u7684ASCII\u7801\n\n`va_arg`\u7b2c\u4e00\u6b21\u8c03\u7528\uff1a\u524d`ap=\"\\001\"`\uff0c\u540e`ap=\"\\003\"`\n\n`va_arg`\u7b2c\u4e8c\u6b21\u8c03\u7528\uff1a\u524d`ap=\"\\003\"`\uff0c\u540e`ap=\"\\004\"`\n\n`va_arg`\u7b2c\u4e09\u6b21\u8c03\u7528\uff1a\u524d`ap=\"\\004\"`\uff0c\u540e`ap=\"\"(\\037\", &lt;incomplete sequence \\360&gt;)\"`\n\n`vcprintf`\u4e24\u4e2a\u53c2\u6570\u7684\u503c\u4e3a`fmt=0xf0101da8 \"x %d, y %x, z %d\\n\"`\u3001` ap=0xf010ef54 \"\\001\"`\n</code></pre> </li> <li> <p>Run the following code.</p> <pre><code>unsigned int i = 0x00646c72;\ncprintf(\"H%x Wo%s\", 57616, &amp;i);\n</code></pre> <p>What is the output? Explain how this output is arrived at in the step-by-step manner of the previous exercise.\uff08\u9700\u8981\u53c2\u8003ASCII\u8868\uff09</p> <p>\u8f93\u51fa\u4e3a\uff1a</p> <pre><code>He110 World\n</code></pre> <p>\u8fd9\u4e2a\u8f93\u51fa\u7ed3\u679c\u662f\u8fd9\u6837\u5f97\u5230\u7684\uff1a</p> <p>\u9996\u5148\u7ecf\u8fc7\u8c03\u7528<code>cprintf()</code>\u2192<code>vcprintf()</code>\u2192<code>vprintfmt()</code>\uff0c\u5728<code>vprintfmt</code>\u4e2d\u6709\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>while ((ch = *(unsigned char *) fmt++) != '%') {\nif (ch == '\\0')\nreturn;\nputch(ch, putdat);\n}\n</code></pre> <p>\u5373\u4ece\u5934\u5f00\u59cb\u626b\u63cf\u5b57\u7b26\u4e32<code>fmt = \"H%x Wo%s\"</code>\uff0c\u82e5\u672a\u78b0\u5230<code>%</code>\u5219\u76f4\u63a5\u6253\u5370\u5230\u63a7\u5236\u53f0\uff0c\u5426\u5219\u8df3\u51fa\u5faa\u73af\u5f00\u59cb\u89e3\u6790\u683c\u5f0f\u7b26\u3002</p> <p>\u7b2c\u4e00\u4e2a\u683c\u5f0f\u7b26\u4e3a<code>%x</code>\uff0c\u5bf9\u5e94\u7684\u89e3\u6790\u4ee3\u7801\u4e3a\uff1a</p> <pre><code>// (unsigned) hexadecimal\ncase 'x':\nnum = getuint(&amp;ap, lflag);\nbase = 16;\nnumber:\nprintnum(putch, putdat, num, base, width, padc);\nbreak;\n</code></pre> <p><code>getuint</code>\u4f1a\u8c03\u7528<code>va_arg</code>\uff0c<code>va_arg</code>\u8fd4\u56de\u5f53\u524d\u6240\u6307\u7684<code>cprintf</code>\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570<code>57616</code>\uff0c\u5e76\u5c06\u6307\u9488\u79fb\u5230\u7b2c\u4e09\u4e2a\u53c2\u6570\uff1b<code>57616</code>\u5728<code>printnum</code>\u4e2d\u5b8c\u6210 16 \u8fdb\u5236\u8f6c\u6362\u5f97\u5230<code>e110</code>\uff0c\u7136\u540e\u6253\u5370\u5230\u63a7\u5236\u53f0\uff1b</p> <p>\u7b2c\u4e8c\u4e2a\u683c\u5f0f\u7b26\u4e3a<code>%s</code>\uff0c\u5bf9\u5e94\u7684\u89e3\u6790\u4ee3\u7801\u4e3a\uff1a</p> <pre><code>// string\ncase 's':\nif ((p = va_arg(ap, char *)) == NULL)\np = \"(null)\";\nif (width &gt; 0 &amp;&amp; padc != '-')\nfor (width -= strnlen(p, precision); width &gt; 0; width--)\nputch(padc, putdat);\nfor (; (ch = *p++) != '\\0' &amp;&amp; (precision &lt; 0 || --precision &gt;= 0); width--)\nif (altflag &amp;&amp; (ch &lt; ' ' || ch &gt; '~'))\nputch('?', putdat);\nelse\nputch(ch, putdat);\nfor (; width &gt; 0; width--)\nputch(' ', putdat);\nbreak;\n</code></pre> <p>\uff08\u9700\u8981\u5148\u641e\u660e\u767d\u6307\u9488\uff09\u8981\u7406\u89e3\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u600e\u4e48\u89e3\u6790\u51fa\u6765\u7684\uff0c\u5148\u770b<code>unsigned int i = 0x00646c72;</code>\uff0c\u5b83\u8868\u793a\u5728\u4ee5<code>&amp;i</code>\u8fd9\u4e2a\u5185\u5b58\u5730\u5740\u4e3a\u8d77\u59cb\u5730\u5740\u7684\u8fde\u7eed4\u4e2a\u5b58\u50a8\u5355\u5143\u4e2d\u5b58\u653e\u4e86\u6570\u503c<code>72 6c 64 00</code>\uff08 x86 \u7cfb\u5217\u90fd\u662f\u5c0f\u7aef\u5b58\u50a8\u7684\uff0c\u4f4e\u5b57\u8282\u5728\u4f4e\u5730\u5740\uff09\uff0c\u5728\u4e0a\u9762\u7684\u89e3\u6790\u4ee3\u7801\u4e2d\uff0c<code>p</code>\u5c31\u662f\u4f20\u5165\u7684<code>&amp;i</code>\uff0c<code>ch = *p++</code>\u4f9d\u6b21\u8bfb\u5165\u4e86\u5341\u516d\u8fdb\u5236\u6570\u503c<code>72 6c 64 00</code>\uff0c\u5bf9\u5e94ASCII\u7801\u5373<code>r l d \\0</code>\uff0c\u6545\u8f93\u51fa\u5b57\u7b26<code>rld</code>\u3002</p> <p>The output depends on that fact that the x86 is little-endian. If the x86 were instead big-endian what would you set <code>i</code> to in order to yield the same output? Would you need to change <code>57616</code> to a different value?</p> <p>\u5982\u679c\u662f\u5927\u7aef\u5b58\u50a8\uff0c<code>i</code>\u9700\u8981\u6539\u4e3a<code>0x726c6400</code>\uff1b\u800c<code>57616</code>\u4e0d\u9700\u8981\u6539\uff0c\u5b83\u662f\u76f4\u63a5\u4f5c\u4e3a\u4e00\u4e2a\u6570\u503c\u4f20\u5165\u5e76\u89e3\u6790\u7684\u3002</p> </li> <li> <p>In the following code, what is going to be printed after<code>y=</code>? (note: the answer is not a specific value.) Why does this happen?</p> <pre><code>cprintf(\"x=%d y=%d\", 3);\n</code></pre> <p>\u7531 GDB \u7ed3\u679c\uff1a</p> <pre><code># \u8c03\u7528 va_arg \u83b7\u53d6\u53c2\u6570 3 \u4e4b\u524d\uff0cap \u6307\u5411\u53c2\u65703\nvprintfmt (putch=0xf0100a2d &lt;putch&gt;, putdat=0xf010ef2c, fmt=0xf0101da8 \"x=%d y=%d\", ap=0xf010ef64 \"\\003\") at lib/printfmt.c:92\n# \u8c03\u7528 va_arg \u83b7\u53d6\u53c2\u6570 3 \u4e4b\u540e\uff0cap \u4ece\u53c2\u65703\u6240\u5728\u76840xf010ef64\u79fb\u52a8\u52300xf010ef68\uff0c\u800c\u8fd9\u4e2a\u5185\u5b58\u5730\u5740\u5e76\u6ca1\u6709\u4efb\u4f55\u5bf9\u5e94\u53c2\u6570\uff0c\u53ea\u662f\u4e00\u5806\u65e0\u610f\u4e49\u503c\nvprintfmt (putch=0xf0100a2d &lt;putch&gt;, putdat=0xf010ef2c, fmt=0xf0101da8 \"x=%d y=%d\", ap=0xf010ef68 \"\\230\\357\\020\\360~\\n\\020\\360-\\n\\020\\360\\214\\357\\020\\360\\234\\032\\020\\360\\310\\357\\020\\360\\234\\032\\020\\360\\244\\357\\020\\360\\270\\357\", &lt;incomplete sequence \\360&gt;) at lib/printfmt.c:92\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u8bfb\u53d6\u4e86\u53c2\u6570<code>3</code>\u4e4b\u540e\uff0c<code>ap</code>\u5411\u9ad8\u5730\u5740\u65b9\u5411\u79fb\u52a8\u4e864\u4e2a\u5185\u5b58\u5730\u5740\u4ee5\u671f\u627e\u5230\u4e0b\u4e00\u4e2a\u53c2\u6570\uff08\u4ece\u6808\u7684\u89d2\u5ea6\u6765\u8bf4\u5c31\u662f\u5f39\u51fa\u4e86\u6808\u9876\u5143\u7d20<code>3</code>\uff0c<code>ap</code>\u6307\u5411\u65b0\u7684\u6808\u9876\uff09\uff0c\u4f46\u8be5\u5730\u5740\u5e76\u672a\u5b58\u50a8\u5bf9\u5e94\u53c2\u6570\uff0c\u5176\u4e2d\u7684\u65e0\u610f\u4e49\u503c\u88ab<code>vprintfmt</code>\u7167\u5e38\u89e3\u6790\u4e3a\u6574\u578b\uff0c\u6240\u4ee5\u6253\u5370\u4e86\u5947\u602a\u7684\u8d1f\u6570\u3002</p> </li> <li> <p>Let's say that GCC changed its calling convention so that it pushed arguments on the stack in declaration order, so that the last argument is pushed last. How would you have to change <code>cprintf</code> or its interface so that it would still be possible to pass it a variable number of arguments?</p> <p>\u8fd9\u91cc\u9700\u8981\u7406\u89e3 GCC \u7684\u8c03\u7528\u7ea6\u5b9a\uff0c\u4f46\u662f\u5b8c\u6574\u5730\u8bb2\u5c31\u592a\u591a\u4e86\uff0c\u8fd9\u91cc\u4e0d\u5c55\u5f00\u3002</p> <p>\u5728 GCC \u4e2d\uff0c\u53c2\u6570\u5165\u6808\u987a\u5e8f\u662f\u6700\u540e\u58f0\u660e\u7684\u6700\u5148\u5165\u6808\uff0c\u4f8b\u5982\uff1a</p> <pre><code>int main() {\nfun(1, 2, 3);\n// fun(a, b, c)\nreturn 0;\n}\n&amp;a = 0x0022FF50\n&amp;b = 0x0022FF54\n&amp;c = 0x0022FF58\n</code></pre> <p>\u6808\u662f\u4ece\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u589e\u957f\u7684\uff0c\u53ef\u4ee5\u770b\u5230\u7b2c\u4e00\u4e2a\u53c2\u6570<code>a=17</code>\u53cd\u800c\u662f\u6700\u540e\u5165\u6808\u7684\u6808\u9876\u5143\u7d20\uff0c\u5730\u5740\u6700\u5c0f\u3002</p> <p>\u7528\u53ef\u53d8\u53c2\u6570\u7684\u65b9\u5f0f\uff0c\u5219<code>ap</code>\u521d\u59cb\u6307\u5411<code>0x0022FF50</code>\uff0c\u5373\u6808\u9876\u5143\u7d20<code>1</code>\uff0c\u6bcf\u8c03\u7528\u4e00\u6b21<code>va_arg</code>\uff0c\u5c06\u8fd4\u56de\u5f53\u524d<code>ap</code>\u5bf9\u5e94\u7684\u53c2\u6570\u503c\uff0c\u540c\u65f6\u5c06<code>ap</code>\u5411\u9ad8\u5730\u5740\u65b9\u5411\u79fb\u52a8\uff0c\u5982\u53d8\u4e3a<code>0x0022FF54</code>\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6bcf\u8c03\u7528\u4e00\u6b21<code>va_arg</code>\uff0c\u5b9e\u9645\u4e0a\u662f\u5f39\u51fa\u4e86\u5f53\u524d\u6808\u9876\u5143\u7d20\uff0c\u5e76\u5c06\u6808\u9876\u6307\u9488\u6307\u5411\u4e0b\u4e00\u5143\u7d20\u3002\u53c2\u6570\u8bfb\u5165\u987a\u5e8f\u4e3a<code>1</code>\u2192<code>2</code>\u2192<code>3</code>\u3002</p> <p>\u9898\u76ee\u5047\u8bbe\u60c5\u51b5\u53d8\u4e3a\uff1a\u5165\u6808\u987a\u5e8f\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570<code>1</code>\u3001\u7b2c\u4e8c\u4e2a\u53c2\u6570<code>2</code>\u3001\u7b2c\u4e09\u4e2a\u53c2\u6570<code>3</code>\u3002\u5373\uff1a</p> <pre><code>&amp;a = 0x0022FF58 &amp;b = 0x0022FF54 &amp;c = 0x0022FF50 </code></pre> <p>\u90a3\u4e48<code>ap</code>\u4ecd\u6307\u5411<code>0x0022F50</code>\uff0c\u4f46\u6808\u9876\u5143\u7d20\u53d8\u4e3a\u4e86<code>3</code>\u3002\u53c2\u6570\u8bfb\u5165\u987a\u5e8f\u53d8\u4e3a<code>3</code>\u2192<code>2</code>\u2192<code>1</code>\u3002</p> <p>\u8981\u4fee\u6539<code>cprintf</code>\u53ca\u76f8\u5173\u51fd\u6570\u4f7f\u5b83\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8fd8\u80fd\u6b63\u5e38\u4f7f\u7528\uff0c\u53ef\u4ee5\u6539\u6210\uff1a</p> <p>\uff08TODO\uff09</p> </li> <li> <p>Challenge Enhance the console to allow text to be printed in different colors. The traditional way to do this is to make it interpret ANSI escape sequences embedded in the text strings printed to the console, but you may use any mechanism you like. </p> <p>\uff08TODO\uff09</p> </li> </ol>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#part-4-the-stack","title":"Part 4: The Stack","text":""},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#1_1","title":"1. \u6808\u7684\u521d\u59cb\u5316","text":"<p>\u7ec3\u4e60 9. \u786e\u5b9a\u5185\u6838\u521d\u59cb\u5316\u6808\u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u6808\u5728\u5185\u5b58\u4e2d\u7684\u786e\u5207\u4f4d\u7f6e\u3002\u5185\u6838\u5982\u4f55\u4e3a\u5176\u6808\u4fdd\u7559\u7a7a\u95f4\uff1f\u6808\u6307\u9488\u521d\u59cb\u5316\u540e\u6307\u5411\u8fd9\u4e2a\u4fdd\u7559\u533a\u57df\u7684\u54ea\u4e00\u201c\u7aef\u201d\uff1f</p> <p>\u5185\u6838\u8fd0\u884c\u7684\u7b2c\u4e00\u4e2a\u5de5\u4f5c\u662f\u5f00\u542f\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u4e4b\u95f4\u7684\u6620\u5c04\uff08\u6216\u8005\u8bf4\u5206\u9875\uff09\uff0c\u7b2c\u4e8c\u4e2a\u5de5\u4f5c\u5c31\u662f\u521d\u59cb\u5316\u6808\u3002\u5728<code>kern/entry.S</code>\u7684<code>relocated</code>\u90e8\u5206\uff1a</p> <pre><code>relocated:\n    # Clear the frame pointer register (EBP)\n    # so that once we get into debugging C code,\n    # stack backtraces will be terminated properly.\n    movl    $0x0,%ebp           # nuke frame pointer\n    # \u5c06\u6808\u5e95\u6307\u9488\u6307\u54110x0\n\n    movl    $(bootstacktop),%esp # mov   $0xf010f000,%esp\n    # \u5c06\u6808\u9876\u6307\u9488\u6307\u54110xf010f000\n\n    # now to C code\n    call    i386_init\n</code></pre> <pre><code>.data\n###################################################################\n# boot stack\n###################################################################\n    .p2align    PGSHIFT     # force page alignment\n    .globl      bootstack\nbootstack:\n    .space      KSTKSIZE\n    .globl      bootstacktop   \nbootstacktop:\n</code></pre> <p>\u5176\u4e2d<code>KSTKSIZE = (8*PGSIZE) = 8 * 4096</code>\uff0c\u6545\u6808\u7684\u5927\u5c0f\u4e3a<code>32KB</code>\uff0c\u6808\u5730\u5740\u8303\u56f4\u4e3a<code>0xf0107000</code>\u5230<code>0xf010f000</code>\u3002</p> <p>\u6808\u662f\u4ece\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u65b9\u5411\u589e\u957f\u7684\uff0c\u6240\u4ee5\u6808\u9876\u6307\u9488\uff08esp, stack pointer\uff09\u6307\u5411\u8fd9\u4e2a\u4fdd\u7559\u533a\u57df\u7684\u9ad8\u5730\u5740\u4e00\u7aef\u3002</p>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#2_1","title":"2. \u6808\u5e27","text":"<p>\u7ec3\u4e60 10. \u4e3a\u4e86\u719f\u6089 x86 \u4e0a\u7684 C \u8c03\u7528\u7ea6\u5b9a\uff0c\u5728<code>obj/kern/kernel.asm</code>\u4e2d\u627e\u5230\u51fd\u6570<code>test_backtrace</code>\u7684\u5730\u5740\uff0c\u5728\u90a3\u91cc\u8bbe\u7f6e\u4e00\u4e2a\u65ad\u70b9\uff0c\u5e76\u68c0\u67e5\u5728\u5185\u6838\u542f\u52a8\u540e\u6bcf\u6b21\u8c03\u7528\u5b83\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u6bcf\u5c42\u9012\u5f52\u5d4c\u5957\u5165\u6808\u6709\u591a\u5c11\u4e2a32\u4f4d\u5b57\uff0c\u8fd9\u4e9b\u5b57\u662f\u4ec0\u4e48\uff1f</p>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#21-gdb","title":"2.1 \u4f7f\u7528 GDB \u67e5\u770b\u6808\u5e27\u4fe1\u606f","text":"<ul> <li>\u6253\u65ad\u70b9\uff1a<code>b *0xf0100040</code></li> </ul> <ul> <li> <p>\u8fd0\u884c\u5230\u65ad\u70b9\u540e\u6267\u884c<code>bt</code>\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u6808\u5e27\u60c5\u51b5\uff08\u5373\u6709\u591a\u5c11\u6b21\u51fd\u6570\u5d4c\u5957\u8c03\u7528\u3001\u90fd\u662f\u54ea\u4e9b\u51fd\u6570\uff09</p> <pre><code>(gdb) bt\n#0  test_backtrace (x=4) at kern/init.c:13\n#1  0xf0100076 in test_backtrace (x=5) at kern/init.c:16\n#2  0xf01000f4 in i386_init () at kern/init.c:39\n#3  0xf010003e in relocated () at kern/entry.S:80\n</code></pre> <p>\u4e0a\u8ff0\u663e\u793a\u4fe1\u606f\u8868\u793a<code>relocated()</code>\u4e2d\u8c03\u7528\u4e86<code>i386_init()</code>\uff0c\u540e\u8005\u53c8\u8c03\u7528\u4e86<code>test_backtrace()</code>\uff0c\u800c\u540e\u53c8\u8fdb\u884c\u4e86\u4e00\u6b21\u9012\u5f52\u8c03\u7528\u3002<code>#n</code>\u8868\u793a\u6808\u5e27\u53f7</p> </li> </ul> <ul> <li> <p>\u67e5\u770b<code>1</code>\u53f7\u6808\u5e27\u7684\u76f8\u5173\u4fe1\u606f\uff1a<code>info f 1</code></p> <p>\u6ce8\uff1a\u4e3a\u4ec0\u4e48<code>Stack frame at</code>\u7684\u503c\u4e0e<code>eip</code>\u7684\u503c\u4e0d\u540c\uff1f\u4e24\u8005\u7684\u503c\u90fd\u4ee3\u8868\u5f53\u524d\u6808\u5e27\u7684\u57fa\u5730\u5740\uff0c\u4f46 GDB \u6709\u5b83\u81ea\u5df1\u7684\u60f3\u6cd5\uff0c\u8ba4\u4e3a\u6808\u5e27\u57fa\u5730\u5740\u5e94\u4e3a<code>eip+8</code>\u3002</p> <p>\u8fd9\u91cc\uff0c\u6211\u4eec\u91c7\u7528Lab 2 \u8bb2\u4e49\u63cf\u8ff0\u7684\u6808\u5e27\u8303\u56f4\uff0c\u76f4\u63a5\u4ee5<code>eip</code>\u7684\u503c\u4f5c\u4e3a\u6808\u5e27\u57fa\u5730\u5740\uff0c\u6bcf\u4e2a\u6808\u5e27\uff08\u5f53\u524d\u6808\u5e27\u9664\u5916\uff09\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5e94\u4e3a\u4fdd\u5b58\u7684\u65e7<code>eip</code>\u503c\uff08\u5373\u8fd4\u56de\u5730\u5740\uff09\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>                 +------------+   |\n             | arg 2      |   \\\n             +------------+    &gt;- \u524d\u4e00\u4e2a\u51fd\u6570\uff08caller\uff09\u7684\u6808\u5e27\n             | arg 1      |   /\n             +------------+   |\n             | ret %eip   |   / -&gt; callee\u7684\u8fd4\u56de\u5730\u5740\n             +============+   \n      %ebp-&gt; | saved %ebp |   \\ -&gt; caller\u7684\u6808\u5e27\u57fa\u5730\u5740\n             +------------+   |\n             |            |   |\n             |   local    |   \\\n             | variables, |    &gt;- \u5f53\u524d\u51fd\u6570\uff08callee\uff09\u7684\u6808\u5e27\n             |    etc.    |   /\n             |            |   |\n             |            |   |\n      %esp-&gt; +------------+   /\n</code></pre> <pre><code>(gdb) info f 1\nStack frame at 0xf010efe0: eip = 0xf0100076 in test_backtrace (kern/init.c:16); # \u4e0b\u4e00\u6b65\u8981\u6267\u884c\u7684\u6307\u4ee4\u5730\u5740\u662f0xf0100076\nsaved eip = 0xf01000f4\n # \u65e7eip\u503c\n# callee\u7684\u8fd4\u56de\u5730\u5740\uff0c\u5373callee\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\u4e0b\u4e00\u6b65\u5e94\u6267\u884c\u8be5\u5730\u5740\u7684\u6307\u4ee4\ncalled by frame at 0xf010f000, caller of frame at 0xf010efc0\n # \u4e0a\u4e00\u4e2a\u6808\u5e27\uff082\u53f7\u6808\u5e27\uff09\u7684\u57fa\u5730\u5740\uff1a0xf010f000\u3002\u8fd9\u4e5f\u662f\u521d\u59cb\u5316\u6808\u65f6\u6307\u5b9a\u7684ebp\u7684\u503c\uff0c\u521d\u59cb\u5316\u6808\u5b8c\u6bd5\u540e\u7acb\u5373\u5f00\u59cb\u6267\u884ci386_init()\u3002\nsource language c.\n Arglist at 0xf010efd8, args: x=5\n# \u51fd\u6570\u53c2\u6570\u4e3ax=5\nLocals at 0xf010efd8, Previous frame's sp is 0xf010efe0\n # 2\u53f7\u6808\u5e27\u7684\u6808\u9876\u5730\u5740\u4e3a0xf010efe0\nSaved registers:\n  ebx at 0xf010efd0, ebp at 0xf010efd8, esi at 0xf010efd4,\n  eip at 0xf010efdc\n # \u5c06ebx,ebp,esi,eip\u7684\u503c\u90fd\u4fdd\u5b58\u5728\u4e86\u6808\u4e2d\n</code></pre> </li> </ul>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#22","title":"2.2 \u6808\u7684\u5206\u6790","text":"<p>\u5c06<code>test_backtrace</code>\u9012\u5f52\u5230\u53c2\u6570<code>x=0</code>\u4e3a\u6b62\uff0c\u67e5\u770b\u6808\u5e27\u60c5\u51b5\uff1a</p> <pre><code>(gdb) bt\n#0  test_backtrace (x=0) at kern/init.c:13\n#1  0xf0100076 in test_backtrace (x=1) at kern/init.c:16\n#2  0xf0100076 in test_backtrace (x=2) at kern/init.c:16\n#3  0xf0100076 in test_backtrace (x=3) at kern/init.c:16\n#4  0xf0100076 in test_backtrace (x=4) at kern/init.c:16\n#5  0xf0100076 in test_backtrace (x=5) at kern/init.c:16\n...\n</code></pre> <ul> <li>\u6808\u7684\u4e00\u4e2a\u5143\u7d20\u4e3a 4 \u5b57\u8282\u957f\uff0c\u6545\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u5730\u5740\u76f8\u5dee<code>0x04</code>\u3002</li> <li>\u67e5\u770b #0 \u5230 #5 \u5404\u4e2a\u6808\u5e27<code>ebp</code>\u7684\u503c\uff0c\u5dee\u503c\u5747\u4e3a <code>0x20</code>\uff0c\u8bf4\u660e\u4e00\u4e2a<code>test_backtrace</code>\u51fd\u6570\u7684\u6808\u5e27\u5927\u5c0f\u4e3a 32 \u5b57\u8282\uff0c\u5373 8 \u4e2a\u6808\u5143\u7d20.</li> <li>\u6b64\u65f6\u6808\u7684\u60c5\u51b5\u5982\u4e0b\u56fe\u6240\u793a\uff1a</li> </ul> <p></p>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#23-mon_backtrace","title":"2.3 \u5b9e\u73b0 mon_backtrace \u51fd\u6570","text":"<p>\u7ec3\u4e60 11. \u5b9e\u73b0<code>kern/monitor.c</code>\u4e2d\u7684<code>mon_backtrace</code>\u51fd\u6570\u3002\u53ef\u53c2\u8003<code>inc/x86.h</code>\u4e2d\u7684<code>read_ebp()</code>\uff08\u4f46\u8c03\u7528\u5b83\u53ef\u80fd\u4f1a\u53d1\u751f\u5947\u602a\u7684\u95ee\u9898\uff09\u3002\u8981\u6c42\u8be5\u51fd\u6570\u6309\u4ee5\u4e0b\u683c\u5f0f\u8f93\u51fa\u6808\u5e27\u4fe1\u606f\uff1a</p> <pre><code>Stack backtrace:\n  ebp f0109e58  eip f0100a62  args 00000001 f0109e80 f0109e98 f0100ed2 00000031\n  ebp f0109ed8  eip f01000d6  args 00000000 00000000 f0100058 f0109f28 00000061\n  ...\n</code></pre> <p>\u5176\u4e2d\u7b2c\u4e00\u884c\u4ee3\u8868\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u51fd\u6570\uff0c\u5373<code>mon_backtrace</code>\u672c\u8eab\uff0c\u7b2c\u4e8c\u884c\u4e3a\u8c03\u7528<code>mon_backtrace</code>\u7684\u51fd\u6570\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u9700\u8981\u6253\u5370\u6240\u6709\u672a\u5b8c\u6210\u7684\u6808\u5e27\u3002\u67e5\u770b<code>kern/entry.S</code>\u6765\u786e\u5b9a\u5982\u4f55\u5224\u65ad\u4f55\u65f6\u505c\u6b62\u6253\u5370\u3002</p> <p>\u8f93\u51fa\u7684\u53c2\u6570\u503c\u56fa\u5b9a\u4e3a 5 \u4e2a\uff0c\u4f46\u8fd9\u91cc\u5e76\u975e\u5168\u90e8\u90fd\u662f\u6709\u7528\u7684\u3002</p> <p>\u663e\u7136\u8981\u6c42\u6253\u5370\u7684\u8fd9\u4e9b\u503c\u5728\u6808\u4e2d\u5168\u90fd\u6709\uff0c\u6240\u4ee5\u53ea\u8981\u6309\u7167\u524d\u6587\u56fe\u4e2d\u7684\u5730\u5740\u89c4\u5f8b\u6765\u786e\u5b9a\u8981\u8bbf\u95ee\u7684\u5143\u7d20\u6240\u5728\u7684\u5730\u5740\u5373\u53ef\uff08\u6ce8\u610f\u5f53\u524d\u6808\u5e27\u7684\u53c2\u6570\u4f4d\u4e8e\u6bd4\u5f53\u524debp\u66f4\u9ad8\u7684\u4f4d\u7f6e\uff09\u3002</p> <pre><code>int\nmon_backtrace(int argc, char **argv, struct Trapframe *tf)\n{\nuint32_t *ebp, eip;\ncprintf(\"Stack backtrace:\\n\");\nebp = (unsigned int *)read_ebp(); while(ebp != 0x0){\neip = *(ebp+1);\ncprintf(\"ebp %8x eip %8x args \", ebp, eip);\ncprintf(\"%08x %08x %08x %08x %08x\\n\", *(ebp+2), *(ebp+3), *(ebp+4), *(ebp+5), *(ebp+6));\nebp  = (uint32_t*) *ebp;\n// \u5207\u6362\u5230\u4e0a\u4e00\u5c42\u6808\u5e27\n}\nreturn 0;\n}\n</code></pre> <p>\u8981\u70b9\uff1a</p> <ul> <li><code>*ebp</code>\u662f\u53d6\u51fa<code>ebp</code>\u5730\u5740\u4e2d\u7684\u503c\uff0c\u8fd9\u4e2a\u503c\u662f\u4e0a\u4e00\u5c42\u6808\u5e27\u7684<code>ebp</code>\uff1b<code>ebp</code>\u624d\u662f\u672c\u5c42\u6808\u5e27\u7684<code>ebp</code>\uff1b</li> <li>\u6700\u540e\u6253\u5370\u7684\u6808\u5e27\u662f<code>i386_init</code>\u7684\u6808\u5e27\uff0c\u5b83\u7684<code>ebp</code>\u662f<code>0xf10fff8</code>\uff0c<code>*ebp</code>\u662f<code>0x0</code>.</li> </ul>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#24-mon_backtrace","title":"2.4 \u7b26\u53f7\u8868\u4e0e\u6539\u8fdbmon_backtrace","text":"<p>\u7ec3\u4e60 11 \u5b9e\u73b0\u7684<code>mon_backtrace</code>\u53ef\u4ee5\u6253\u5370\u6808\u5e27\u7684\u6808\u57fa\u5740\u3001\u8fd4\u56de\u5730\u5740\u548c 5 \u4e2a\u53c2\u6570\uff0c\u4f46\u6211\u4eec\u8fd8\u60f3\u6253\u5370\u6587\u4ef6\u540d\u3001\u884c\u53f7\u53ca\u6240\u6d89\u53ca\u7684\u51fd\u6570\u540d\uff0c\u8fd9\u9700\u8981\u4f7f\u7528\u7b26\u53f7\u8868\u3002</p> <p><code>kern/kdebug.c</code>\u4e2d\u7684<code>debuginfo_eip()</code>\u51fd\u6570\u5df2\u7ecf\u5b9e\u73b0\u4e86\u6839\u636e<code>eip</code>\u67e5\u627e\u5bf9\u5e94\u6587\u4ef6\u540d\u3001\u51fd\u6570\u540d\u53ca\u884c\u53f7\u7684\u529f\u80fd\uff0c\u5176\u4e2d\u7528\u5230\u4e86\u540d\u79f0\u5f62\u5982<code>__STAB_*</code>\u7684\u7ed3\u6784\u4f53\uff0c\u8fd9\u5c31\u662f\u4e0e\u7b26\u53f7\u8868\u5173\u8054\u7684\u90e8\u5206\u3002</p> <p>\u7b26\u53f7\u8868\u662f\u7f16\u8bd1\u539f\u7406\u8bfe\u7a0b\u4e2d\u7684\u6982\u5ff5\uff0c\u8fd9\u91cc\u4e0d\u591a\u4ecb\u7ecd\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u7b26\u53f7\u8868\u662f\u5982\u4f55\u8f7d\u5165 JOS \u7684\u3002</p> <p>\uff08TODO\uff1a\u53ef\u80fd\u9700\u8981\u591a\u5c11\u61c2\u70b9\u7f16\u8bd1\u539f\u7406\u624d\u884c\u2026\u2026\uff09</p> <p>\u7ec3\u4e60 12. </p> <p>1. \u5728<code>kern/kdebug.c</code>\u4e2d\u7684<code>debuginfo_eip()</code>\u51fd\u6570\u4e2d\u63d2\u5165<code>stab_binsearch</code>\uff0c\u4f7f\u5b83\u80fd\u591f\u627e\u5230\u5bf9\u5e94<code>eip</code>\u7684\u884c\u53f7\u3002</p> <p>\u6839\u636e\u6ce8\u91ca\u4e2d\u7684\u63d0\u793a\uff0c\u5728<code>inc/stab.h</code>\u627e\u5230\u4ee3\u8868\u884c\u53f7\u7684\u7c7b\u578b\uff1a</p> <pre><code>#define N_SLINE     0x44    // text segment line number\n</code></pre> <p>\u51fd\u6570\u4e2d\u5176\u4ed6\u90e8\u5206\u5df2\u7ecf\u5b9e\u73b0\u4e86\u627e\u6587\u4ef6\u3001\u627e\u51fd\u6570\u7684\u529f\u80fd\uff0c\u90fd\u7528\u5230\u4e86<code>stab_binsearch</code>\uff0c\u7531\u51fd\u6570\u6ce8\u91ca\u53ef\u77e5\u8fd9\u662f\u4e2a\u4e8c\u5206\u67e5\u627e\u51fd\u6570\uff0c\u5219\u82e5\u67e5\u627e\u6210\u529f\uff0c\u4e0b\u6807\u4e3a<code>lline</code>\u3002\u6240\u4ee5\u67e5\u884c\u53f7\u7684\u4ee3\u7801\u4e3a\uff1a</p> <pre><code>stab_binsearch(stabs, &amp;lline, &amp;rline, N_SLINE, addr);\nif(lline == 0){\nreturn -1;\n}\nelse{\ninfo-&gt;eip_line = stabs[lline].n_desc;\n}\n</code></pre> <p>2. \u4fee\u6539<code>mon_backtrace</code>\u51fd\u6570\uff0c\u8c03\u7528<code>debuginfo_eip()</code>\uff0c\u4ee5\u663e\u793a\u6bcf\u4e2a<code>eip</code>\u7684\u51fd\u6570\u540d\u3001\u6e90\u6587\u4ef6\u540d\u548c\u5bf9\u5e94\u4e8e\u8be5<code>eip</code>\u7684\u884c\u53f7\u3002\u8981\u6c42\u5c06\u8be5\u51fd\u6570\u6dfb\u52a0\u5230\u63a7\u5236\u53f0\u547d\u4ee4\u4e2d\uff0c\u4f7f\u7528\u6237\u80fd\u591f\u901a\u8fc7\u8f93\u5165<code>backtrace</code>\u547d\u4ee4\u6267\u884c\u8be5\u51fd\u6570\uff0c\u683c\u5f0f\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>K&gt; backtrace\nStack backtrace:\n  ebp f010ff78  eip f01008ae  args 00000001 f010ff8c 00000000 f0110580 00000000\n         kern/monitor.c:143: monitor+106\n  ebp f010ffd8  eip f0100193  args 00000000 00001aac 00000660 00000000 00000000\n         kern/init.c:49: i386_init+59\n  ebp f010fff8  eip f010003d  args 00000000 00000000 0000ffff 10cf9a00 0000ffff\n         kern/entry.S:70: &lt;unknown&gt;+0\nK&gt; \n</code></pre> <p>\u4fee\u6539<code>commands</code>\uff1a</p> <pre><code>static struct Command commands[] = {\n{ \"help\", \"Display this list of commands\", mon_help },\n{ \"kerninfo\", \"Display information about the kernel\", mon_kerninfo },\n{ \"backtrace\", \"Display information about the stack frames\", mon_backtrace },\n};\n</code></pre> <p>\u7136\u540e\u4fee\u6539<code>mon_backtrace</code>\uff1a</p> <pre><code>int\nmon_backtrace(int argc, char **argv, struct Trapframe *tf)\n{\nuint32_t *ebp, eip;\ncprintf(\"Stack backtrace:\\n\");\nebp = (unsigned int *)read_ebp(); while( ebp != 0x0 ){\neip = *(ebp+1);\ncprintf(\"ebp %08x eip %08x args \", ebp, eip);\ncprintf(\"%08x %08x %08x %08x %08x\\n\", *(ebp+2), *(ebp+3), *(ebp+4), *(ebp+5), *(ebp+6));\nstruct Eipdebuginfo info;\ndebuginfo_eip(eip, &amp;info);\ncprintf(\"\\t%s:%d: \", info.eip_file, info.eip_line);\ncprintf(\"%.*s\", info.eip_fn_namelen, info.eip_fn_name);\n// info.eip_fn_name\u4e0d\u4ee5'\\0'\u7ed3\u5c3e\uff0c\u6240\u4ee5\u8981\u7528%.*s\u8f93\u51fa\ncprintf(\"+%u\\n\", eip - info.eip_fn_addr);\nebp  = (uint32_t*) *ebp;\n// \u5207\u6362\u5230\u4e0a\u4e00\u5c42\u6808\u5e27\n}\nreturn 0;\n}\n</code></pre> <p>\u8f93\u51fa\u5982\u4e0b\uff1a</p> <pre><code>Stack backtrace:\nebp f010ff18 eip f01000a1 args 00000000 00000000 00000000 f010004a f0111308\n             kern/init.c:18: test_backtrace+97\nebp f010ff38 eip f0100076 args 00000000 00000001 f010ff78 f010004a f0111308\n             kern/init.c:16: test_backtrace+54\nebp f010ff58 eip f0100076 args 00000001 00000002 f010ff98 f010004a f0111308\n             kern/init.c:16: test_backtrace+54\nebp f010ff78 eip f0100076 args 00000002 00000003 f010ffb8 f010004a f0111308\n             kern/init.c:16: test_backtrace+54\nebp f010ff98 eip f0100076 args 00000003 00000004 00000000 f010004a f0111308\n             kern/init.c:16: test_backtrace+54\nebp f010ffb8 eip f0100076 args 00000004 00000005 00000000 f010004a f0111308\n             kern/init.c:16: test_backtrace+54\nebp f010ffd8 eip f01000f4 args 00000005 00001aac 00000660 00000000 00000000\n             kern/init.c:39: i386_init+78\nebp f010fff8 eip f010003e args 00000003 00001003 00002003 00003003 00004003\n             kern/entry.S:83: &lt;unknown&gt;+0\n</code></pre> <p>\u6700\u540e\u8fd0\u884c<code>make grade</code>\u68c0\u67e5\u5404\u4e2a\u7ec3\u4e60\u7684\u4ee3\u7801\u662f\u5426\u6b63\u786e\uff1a</p> <pre><code>$ make grade\n...\nrunning JOS: (0.7s) \n  printf: OK \n  backtrace count: OK \n  backtrace arguments: OK \n  backtrace symbols: OK \n  backtrace lines: OK \nScore: 50/50\n</code></pre> <p>\u7ec3\u4e60 12 \u7684\u68c0\u67e5\u65b9\u5f0f\u8fd8\u662f\u6709\u70b9\u8349\u7387\u7684\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u8981\u5728\u8be5\u6709\u6570\u5b57\u7684\u5730\u65b9\u6709\u4e2a\u6570\u5b57\u5c31\u884c\uff0c\u6240\u4ee5\u5373\u4f7f\u8f93\u51fa\u884c\u53f7\u548c\u5b9e\u9645\u884c\u53f7\u5b8c\u5168\u4e0d\u7b26\u5408\u4e5f\u6709\u53ef\u80fd\u7ed9<code>OK</code>\u2026\u2026</p> <p>Lab 1 \u81f3\u6b64\u5168\u90e8\u5b8c\u6210\u3002</p>"},{"location":"MIT6.828/Lab%201%3A%20Booting%20a%20PC/#_2","title":"\u53c2\u8003\u8d44\u6599","text":"<ol> <li>6.828: Operating System Engineering</li> <li>Lab 1: Booting a PC</li> <li>Wikipedia: x86</li> <li>Wikipedia: \"8042\" PS/2 Controller</li> <li>XT, AT and PS/2 I/O port addresses</li> <li>Intel 80386 Reference Programmer's Manual Table of Contents - 4.1 Systems Registers</li> <li>Wikipedia: GDT Tutorial</li> <li>WikiPedia: Executable and Linkable Format</li> <li>C\u8bed\u8a00\u4e2d\u53ef\u53d8\u53c2\u6570\u51fd\u6570\u5b9e\u73b0\u539f\u7406</li> </ol>"},{"location":"MIT6.828/Lab%202%3A%20Memory%20Management/","title":"MIT 6.828-Lab 2: Memory Management","text":"<p>Lab 2 \u5b9e\u73b0 JOS \u7684\u5185\u5b58\u7ba1\u7406\u3002\u5185\u5b58\u7ba1\u7406\u5206\u4e3a\u4e24\u90e8\u5206\uff1a</p> <ol> <li>\u7269\u7406\u5185\u5b58\u7ba1\u7406</li> <li>\u865a\u62df\u5185\u5b58\u7ba1\u7406</li> </ol>"},{"location":"MIT6.828/Lab%202%3A%20Memory%20Management/#part-1-physical-page-management","title":"Part 1: Physical Page Management","text":"<p>\u7ec3\u4e60 1. \u5728\u6587\u4ef6<code>kern/pmap.c</code>\u4e2d\uff0c\u60a8\u5fc5\u987b\u5b9e\u73b0\u4ee5\u4e0b\u51fd\u6570\u7684\u4ee3\u7801\uff08\u53ef\u80fd\u6309\u7167\u7ed9\u5b9a\u7684\u987a\u5e8f\uff09\u3002</p> <pre><code>boot_alloc()\nmem_init()\uff08\u53ea\u5230\u8c03\u7528check_page_free_list(1)\uff09\npage_init()\npage_alloc()\npage_free()\n</code></pre> <p><code>check_page_free_list()</code>\u548c <code>check_page_alloc()</code>\u4f1a\u6d4b\u8bd5\u4f60\u7684\u7269\u7406\u9875\u9762\u5206\u914d\u5668\u3002\u4f60\u5e94\u8be5\u542f\u52a8 JOS \u5e76\u67e5\u770b\u662f\u5426<code>check_page_alloc()</code> \u62a5\u544a\u6210\u529f\u3002\u4fee\u590d\u4f60\u7684\u4ee3\u7801\uff0c\u4f7f\u5176\u901a\u8fc7\u3002\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u6dfb\u52a0\u81ea\u5df1\u7684<code>assert()</code>s \u6709\u52a9\u4e8e\u9a8c\u8bc1\u60a8\u7684\u5047\u8bbe\u662f\u5426\u6b63\u786e\u3002</p> <p>\u548c Lab 1 \u7684\u8be6\u5c3d\u5f15\u5bfc\u4e0d\u540c\uff0c\u4ece Lab 2 \u5f00\u59cb\u7684\u5b9e\u9a8c\u591a\u5c11\u6709\u70b9\u201cfly bitch\"\u7684\u611f\u89c9\u2026\u2026</p>"},{"location":"MIT6.828/Lab%202%3A%20Memory%20Management/#1","title":"1. \u7269\u7406\u5185\u5b58\u5e03\u5c40\u53ca\u76f8\u5173\u6570\u636e\u7ed3\u6784","text":"<p>\u7ec3\u4e60 1 \u9636\u6bb5\u7684\u7269\u7406\u5185\u5b58\u5e03\u5c40\u5982\u4e0b\u56fe\u6240\u793a\uff1a\uff08\u56fe\u662f\u6211\u6839\u636e Lab 1 \u548c\u5728\u7ec3\u4e60 1 \u51fd\u6570\u4e2d\u6253\u5370\u7684\u76f8\u5173\u4fe1\u606f\u753b\u7684\uff0c\u6b22\u8fce\u7ea0\u9519\uff09</p> <p></p> <p>\u7269\u7406\u5185\u5b58\u7ba1\u7406\u662f\u4ee5\u9875\u800c\u975e\u5b57\u8282\u4e3a\u5355\u4f4d\u7684\uff0cLab 2 \u5df2\u89c4\u5b9a\u4e86\u4e00\u9875\u7684\u5927\u5c0f\uff1a<code>PGSIZE 4096</code>\uff0c\u5373\u4e00\u9875\u4e3a 4 KB\u3002\u6240\u8c13\u5185\u5b58\u7ba1\u7406\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u8981\u4fdd\u5b58\u5e76\u65f6\u523b\u66f4\u65b0\u5185\u5b58\u4e2d\u5404\u9875\u7684\u72b6\u6001\uff0c\u54ea\u4e9b\u53ef\u7528\uff0c\u54ea\u4e9b\u5df2\u7528\uff0c\u6709\u8fdb\u7a0b\u6765\u7533\u8bf7\u4f7f\u7528\u5e94\u8be5\u5982\u4f55\u5206\u914d\u2026\u2026</p> <p><code>PageInfo</code>\uff1aLab 2 \u5b9a\u4e49\u597d\u7684\uff0c\u7528\u4e8e\u4fdd\u5b58\u4e00\u9875\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\uff1a</p> <pre><code>struct PageInfo {\n// Next page on the free list.\nstruct PageInfo *pp_link;\n\n// pp_ref is the count of pointers (usually in page table entries)\n// to this page, for pages allocated using page_alloc.\n// Pages allocated at boot time using pmap.c's\n// boot_alloc do not have valid reference count fields.\n\nuint16_t pp_ref;\n};\n</code></pre> <ul> <li> <p><code>pp_link</code>\u662f\u4e00\u4e2a\u5185\u5b58\u5730\u5740\uff0c\u8be5\u5730\u5740\u5b58\u50a8\u4e00\u4e2a<code>PageInfo</code>\u7c7b\u578b\u7684\u53d8\u91cf\uff1b\u4ece\u529f\u80fd\u4e0a\uff0c\u5b83\u6307\u5411\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u9875\u6240\u5bf9\u5e94\u7684<code>PageInfo</code>\u3002</p> <p>\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u904d\u5386\u8fd9\u4e2a\u7a7a\u95f2\u9875\u94fe\u8868\uff1a</p> <pre><code>PageInfo* first_free_page, *free_page;\nfree_page = first_free_page; // first_free_page\u662f\u5df2\u77e5\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u9875\u7684PageInfo\u7684\u5730\u5740\nwhile(free_page){\n//do something;\nfree_page = free_page -&gt; pp_link;\n}\n</code></pre> </li> </ul> <ul> <li><code>pp_ref</code>\u662f\u8be5\u9875\u7684\u6307\u9488\u8ba1\u6570\u5668\u3002\u4ec5\u5728\u8be5\u9875\u901a\u8fc7<code>page_alloc</code>\u5206\u914d\u65f6<code>pp_ref</code>\u6709\u6548\uff0c<code>pp_ref=0</code>\u65f6\u8868\u793a\u8be5\u9875\u7a7a\u95f2\uff1b\u82e5\u8be5\u9875\u662f\u901a\u8fc7<code>boot_alloc</code>\u5206\u914d\u7684\uff0c\u4e0d\u9700\u8981\u7ba1\u7406<code>pp_ref</code>\u3002\u5177\u4f53\u7ec6\u8282\u5728 Part 2 \u4ecb\u7ecd\u3002</li> </ul> <p><code>pages</code>\uff1aLab 2 \u5b9a\u4e49\u597d\u7684\uff0c\u7528\u4e8e\u4fdd\u5b58\u7269\u7406\u5185\u5b58\u6240\u6709\u9875\u5bf9\u5e94<code>PageInfo</code>\u7684\u6570\u7ec4\uff1a</p> <pre><code>struct PageInfo *pages; </code></pre> <p><code>pages</code>\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u80fd\u4e0e\u76f8\u5e94\u7684\u7269\u7406\u5185\u5b58\u9875\u9762\u4e00\u4e00\u5bf9\u5e94\uff0c\u5982<code>pages[0]</code>\u5bf9\u5e94\u7269\u7406\u5185\u5b58\u7684\u7b2c\u4e00\u4e2a 4KB\uff0c<code>pages[1]</code>\u5bf9\u5e94\u7269\u7406\u5185\u5b58\u7684\u7b2c\u4e8c\u4e2a 4KB\u2026\u2026\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u76f4\u63a5\u8ba1\u7b97\u5f97\u5230\u5b83\u6240\u5bf9\u5e94\u7684\u7269\u7406\u5185\u5b58\u9875\u9762\u7684\u8d77\u59cb\u5730\u5740\u3002</p> <p><code>pages</code>\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684<code>pp_link</code>\u6784\u6210\u4e86\u4e00\u4e2a\u7a7a\u95f2\u9875\u94fe\u8868\uff0c\u94fe\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u90fd\u662f\u7a7a\u95f2\u9875\u5bf9\u5e94\u7684<code>PageInfo</code>\uff0c\u8fd9\u4e9b\u7a7a\u95f2\u9875\u5728\u7269\u7406\u4e0a\u4e0d\u4e00\u5b9a\u76f8\u90bb\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff08\u4ec5\u4e3a\u793a\u610f\u56fe\uff0c\u4e0d\u4ee3\u8868\u5b9e\u9645\u5185\u5b58\u5206\u914d\u60c5\u51b5\uff0c\u7bad\u5934\u65b9\u5411\u662f\u6839\u636e\u4e0b\u6587<code>page_init</code>\u51fd\u6570\u7684\u5b9e\u73b0\u753b\u7684\uff09\uff1a</p> <p></p> <p>\u663e\u7136\uff0c\u5bf9\u4e8e\u5df2\u5206\u914d\u7684<code>PageInfo</code>\uff0c\u5176<code>pp_link</code>\u5e94\u4e3a<code>NULL</code>\u3002</p> <p>\u6709\u4e86\u5bf9\u6574\u4f53\u5185\u5b58\u5e03\u5c40\u53ca\u76f8\u5173\u6570\u636e\u7ed3\u6784\u7684\u628a\u63e1\uff0c\u63a5\u4e0b\u6765\u53ef\u4ee5\u7740\u624b\u5b8c\u6210\u7ec3\u4e60 1\u4e86\u3002</p>"},{"location":"MIT6.828/Lab%202%3A%20Memory%20Management/#2","title":"2. \u7269\u7406\u5185\u5b58\u7ba1\u7406","text":"<p>JOS \u5185\u5b58\u7ba1\u7406\u521d\u59cb\u5316\u662f\u4ece<code>mem_init</code>\u5b8c\u6210\u7684\uff0c\u5b83\u505a\u4e86\u4ee5\u4e0b\u5de5\u4f5c\uff1a</p> <ol> <li>\u8c03\u7528<code>i386_detect_memory</code>\u8bfb\u786c\u4ef6\u72b6\u6001\uff0c\u83b7\u53d6\u7269\u7406\u5185\u5b58\u603b\u5927\u5c0f\u53ca\u7269\u7406\u5185\u5b58\u4e2d\u57fa\u672c\u5185\u5b58\u90e8\u5206\u7684\u5927\u5c0f\uff08\u5355\u4f4d KB\uff09\uff0c\u540c\u65f6\u6362\u7b97\u4e3a\u9875\u6570\uff1b</li> <li>\u8c03\u7528<code>boot_alloc</code>\uff0c\u5206\u914d\u5927\u5c0f\u4e3a<code>PGSIZE</code>\u7684\u5185\u5b58\u7528\u4e8e\u5b58\u50a8<code>kern_pgdir</code>\uff0c\u5b83\u662f\u5185\u6838\u7684\u9875\u76ee\u5f55\u8868\u3002</li> <li>\u8c03\u7528<code>boot_alloc</code>\uff0c\u5212\u5206\u51fa\u4e00\u5757\u5185\u5b58\u7528\u4e8e\u5b58\u50a8<code>pages</code>\uff0c\u5373\u7528\u4e8e\u8bb0\u5f55\u7269\u7406\u9875\u72b6\u6001\u7684\u6570\u7ec4</li> <li>\u8c03\u7528<code>page_init()</code>\uff0c\u521d\u59cb\u5316\u771f\u6b63\u7684\u5185\u5b58\u7ba1\u7406\u673a\u5236\u3002</li> </ol> <p><code>boot_alloc()</code>\u8d1f\u8d23\u5efa\u7acb\u7269\u7406\u5185\u5b58\u7ba1\u7406\u671f\u95f4\u7684\u5185\u5b58\u5206\u914d\u5de5\u4f5c\uff1a</p> <pre><code>if(n == 0){\nreturn nextfree;\n}\nelse if(n &gt; 0){\nchar* result = nextfree;\nnextfree = ROUNDUP((char*)(nextfree + n), PGSIZE);\n// \u9700\u8981\u4ee5\u9875\u4e3a\u5355\u4f4d\u5206\u914d\uff0c\u5982\u7533\u8bf7\u4e866KB\u4e5f\u8981\u5206\u914d8KB\uff0c\u56e0\u6b64\u4f7f\u7528ROUNDUP\uff0c\u5411\u4e0a\u53d6PGSIZE\u7684\u500d\u6570\nif(PADDR(nextfree) &gt;= npages * PGSIZE)\npanic(\"boot_alloc: out of memory!\\n\");\nelse return result; // \u8fd4\u56de\u4e00\u4e2a\u865a\u62df\u5730\u5740\n}\nelse panic(\"boot_alloc: the parameter n is invalid!\\n\");\n// \u8fd9\u4e2apanic\u5199\u4e0d\u5199\u65e0\u6240\u8c13\uff0c\u53ea\u662f\u8bb2\u7a76\u4e00\u4e2a\u9c81\u68d2\u6027\n</code></pre> <p>\u7136\u540e\u5728<code>mem_init()</code>\u4e2d\u8c03\u7528<code>boot_alloc()</code>\u4e3a<code>kern_pgdir</code>\u548c<code>pages</code>\u5206\u914d\u5185\u5b58\uff1a</p> <pre><code>// create initial page directory.\nkern_pgdir = (pde_t *) boot_alloc(PGSIZE);\nmemset(kern_pgdir, 0, PGSIZE);\n</code></pre> <pre><code>// \u4e3a\u7269\u7406\u9875\u72b6\u6001\u6570\u7ec4\u5206\u914d\u5185\u5b58\u5e76\u521d\u59cb\u5316\u4e3a0\npages = boot_alloc(npages * sizeof(struct PageInfo));\nmemset(pages, 0, npages * sizeof(struct PageInfo));\n</code></pre> <p><code>page_init()</code>\u9700\u8981\u6807\u8bb0\u54ea\u4e9b\u5185\u5b58\u662f\u53ef\u7528\u7684\uff0c\u54ea\u4e9b\u5185\u5b58\u662f\u4e0d\u53ef\u7528\u7684/\u5df2\u5360\u7528\u7684\u3002\u4ee3\u7801\u6ce8\u91ca\u5df2\u76f4\u63a5\u6307\u660e\uff0c\u7167\u7740\u5b9e\u73b0\u5373\u53ef\uff1a</p> <pre><code>//  1) Mark physical page 0 as in use.\npages[0].pp_ref = 1;\n</code></pre> <pre><code>//  2) The rest of base memory, [PGSIZE, npages_basemem * PGSIZE) is free.\nsize_t i;\nfor(i = 1; i &lt; npages_basemem; i++){\npages[i].pp_ref = 0;\npages[i].pp_link = page_free_list;\npage_free_list = &amp;pages[i];\n// pages[1].pp_link = NULL;\n// pages[2].pp_link = &amp;pages[1];\n// ...\n// pages[npages_basemem-1].pp_link = &amp;pagepages[npages_basemem-2]\n}\n</code></pre> <pre><code>// 3) Then comes the IO hole [IOPHYSMEM, EXTPHYSMEM), which must never be allocated.\n// \u5728inc/memlayout.h\u4e2d:IOPHYSMEM 0x0A0000, EXTPHYSMEM 0x100000\nfor(i = (IOPHYSMEM &gt;&gt; PGSHIFT); i &lt; (EXTPHYSMEM &gt;&gt; PGSHIFT); i++){ // PGSHIFT = 12\uff0cIOPHYSMEM&gt;&gt;PGSHIFT \u7b49\u4ef7\u4e8e IOPHYSMEM/4096\uff0c\u8ba1\u7b97\u673a\u505a\u9664\u6cd5\u5f88\u6162\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c3d\u91cf\u7528\u53f3\u79fb\u4ee3\u66ff\npages[i].pp_ref = 0;\n// \u4e0d\u5141\u8bb8\u88ab\u5206\u914d\uff0c\u901a\u8fc7pages[i].pp_link = NULL\u5b9e\u73b0\n}\n</code></pre> <pre><code>// 4) Then extended memory [EXTPHYSMEM, ...).\n/*    Some of it is in use, some is free. Where is the kernel in physical memory?  Which pages are already in use for page tables and other data structures? */\n// \u7b2c0\u9875\u5df2\u5360\u7528\uff0c0x0A0000 ~ 0x0FFFFF \u4e3aIO Hole\u5df2\u5360\u7528\uff0c0x100000 ~ 0x117000-0x1(0x116FFF) \u4e3a\u5185\u6838ELF\u6587\u4ef6\u533a\u57df\u5df2\u5360\u7528\uff0c\u4e0a\u8ff0\u90e8\u5206\u5df2\u7ecf\u6807\u8bb0\u5b8c\u6bd5\u3002\n// 0x117000 ~ 0x158000-0x1\u5df2\u7531boot_alloc\u5206\u914d\uff0c\u4ece0x158000\u5f00\u59cb\u540e\u9762\u5168\u90e8\u7a7a\u95f2\nsize_t EXT_first_free = PADDR(boot_alloc(0)) &gt;&gt; PGSHIFT;\n// boot_alloc(0)\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u865a\u62df\u5730\u5740\uff0c\u901a\u8fc7PADDR\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\n// EXT_first_free = 0x158000 &gt;&gt; 12\nfor(i = (EXTPHYSMEM &gt;&gt; PGSHIFT); i &lt; EXT_first_free; i++){\npages[i].pp_ref = 1; // \u5df2\u7531boot_alloc\u5206\u914d\u7684\u90e8\u5206\n}\n// \u4f59\u4e0b\u90e8\u5206\u5747\u6807\u8bb0\u4e3a\u7a7a\u95f2\nfor(i = EXT_first_free; i &lt; npages; i++){\npages[i].pp_ref = 0;\npages[i].pp_link = page_free_list;\npage_free_list = &amp;pages[i];\n}\n</code></pre> <p><code>page_alloc()</code>\u8d1f\u8d23\u5b9e\u73b0\u4e00\u9875\u7684\u5185\u5b58\u5206\u914d\uff1a</p> <pre><code>struct PageInfo *\npage_alloc(int alloc_flags)\n{\n// \u53ea\u9700\u8981\u8fd4\u56de\u6240\u5206\u914d\u7684\u9875\u7684\u5bf9\u5e94PageInfo\u865a\u62df\u5730\u5740\uff0c\u800c\u4e0d\u662f\u5b9e\u9645\u5206\u914d\u5185\u5b58\u7684\u8d77\u59cb\u5730\u5740\nif(page_free_list == NULL) return NULL;\n// page_free_list\u6b64\u65f6\u5df2\u6307\u5411\u7a7a\u95f2\u9875\u94fe\u8868\u7684\u8868\u5934\u7ed3\u70b9\uff0c\u662f\u4e00\u4e2a\u865a\u62df\u5730\u5740\nstruct PageInfo *ret = page_free_list;\npage_free_list = page_free_list-&gt;pp_link;\nif (alloc_flags &amp; ALLOC_ZERO){\nmemset(page2kva(ret),'\\0', PGSIZE); // page2kva\uff1a\u53c2\u6570\u4e3aPageInfo\u865a\u62df\u5730\u5740\uff0c\u8fd4\u56de\u8be5PageInfo\u5bf9\u5e94\u7684\u9875\u7684\u865a\u62df\u5730\u5740\n// \u5c06\u8be5\u9875\u4e2d\u6570\u503c\u5168\u90e8\u521d\u59cb\u5316\u4e3a'\\0'\n}\n// \u8bb0\u5f97\u5c06\u5206\u914d\u51fa\u53bb\u7684\u9875\u4ece\u7a7a\u95f2\u9875\u94fe\u8868\u4e2d\u6458\u51fa\u53bb\nret -&gt; pp_link = NULL;\n// \u4e0d\u589e\u52a0 pp_ref\uff0c\u8be5\u5de5\u4f5c\u7531\u8c03\u7528\u8005\u5b8c\u6210\nreturn ret; // \u8fd4\u56de\u865a\u62df\u5730\u5740\n}\n</code></pre> <p><code>page_free()</code>\u8d1f\u8d23\u5b9e\u73b0\u4e00\u9875\u7684\u5185\u5b58\u56de\u6536\uff1a</p> <p>\uff08\u6ce8\uff1a\u5982\u679c\u6b64\u5904\u52a0\u4e0a<code>panic</code>\u4f1a\u5bfc\u81f4<code>check_page_alloc()</code>\u65e0\u6cd5\u901a\u8fc7\uff0c\u8bf4\u660e<code>page_alloc</code>\u91cc\u6f0f\u4e86\u5199<code>ret -&gt; pp_link = NULL;</code>\uff09</p> <pre><code>void\npage_free(struct PageInfo *pp)\n{\n// Fill this function in\n// Hint: You may want to panic if pp-&gt;pp_ref is nonzero or\n// pp-&gt;pp_link is not NULL.\nif(pp-&gt;pp_ref != 0 || pp-&gt;pp_link != NULL) panic(\"page_free error!\");\npp-&gt;pp_link = page_free_list; page_free_list = pp;\n//\u4ece\u7a7a\u95f2\u9875\u94fe\u8868\u5934\u90e8\u63d2\u5165\u7ed3\u70b9\n}\n</code></pre> <p>\u81f3\u6b64\u7ec3\u4e60 1 \u5df2\u5b8c\u6210\uff0c<code>make grade</code>\u5e94\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a</p> <pre><code>running JOS: (1.0s) \n  Physical page allocator: OK \n  Page management: FAIL \n    AssertionError: ...\n         check_page_alloc() succeeded!\n</code></pre>"},{"location":"MIT6.828/Lab%202%3A%20Memory%20Management/#part-2-virtual-memory","title":"Part 2: Virtual Memory","text":""},{"location":"MIT6.828/Lab%202%3A%20Memory%20Management/#1_1","title":"1. \u9875\u5f0f\u3001\u6bb5\u5f0f\u3001\u6bb5\u9875\u5f0f","text":"<p>\u865a\u62df\u5185\u5b58\u7ba1\u7406\u7684\u610f\u4e49\u5728\u4e8e\uff0c\u5b83\u53ef\u4ee5\u5c06\u8ba1\u7b97\u673a\u53ef\u4f7f\u7528\u7684\u5185\u5b58\u8303\u56f4\u4ece\u7269\u7406\u5185\u5b58\u6269\u5c55\u5230\u7269\u7406\u5185\u5b58+\u78c1\u76d8\u3002\u67d0\u4e00\u65f6\u523b\uff0c\u4e00\u4e2a\u865a\u62df\u5185\u5b58\u5730\u5740\u5bf9\u5e94\u7684\u6570\u636e\u53ef\u80fd\u5e76\u4e0d\u5b9e\u9645\u5b58\u50a8\u5728\u7269\u7406\u5185\u5b58\u4e2d\u3002\u5f53\u7136\uff0cCPU\u80fd\u76f4\u63a5\u8bbf\u95ee\u7684\u53ea\u6709\u7269\u7406\u5185\u5b58\uff0c\u82e5\u9047\u5230\u4e86\u4e0a\u8ff0\u60c5\u51b5\uff0c\u9996\u5148\u4ece\u78c1\u76d8\u4e2d\u5c06\u76f8\u5173\u7684\u9875\u8c03\u5165\u7269\u7406\u5185\u5b58\uff0c\u518d\u8fdb\u884c\u8bbf\u95ee\u3002</p> <p>\u865a\u62df\u5185\u5b58\u7ba1\u7406\u65b9\u5f0f\u6709\u4e09\u79cd\uff1a\u9875\u5f0f\u7ba1\u7406\u3001\u6bb5\u5f0f\u7ba1\u7406\u3001\u6bb5\u9875\u5f0f\u7ba1\u7406\u3002</p> <ul> <li>\u9875\u5f0f\u7ba1\u7406\uff1a\u4e0e\u524d\u6587\u5bf9\u7269\u7406\u5185\u5b58\u7684\u7ba1\u7406\u65b9\u5f0f\u76f8\u540c\uff0c\u5c31\u662f\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u5c06\u5185\u5b58\u5212\u5206\u4e3a\u82e5\u5e72\u9875\u8fdb\u884c\u7ba1\u7406\u3002</li> </ul> <ul> <li>\u6bb5\u5f0f\u7ba1\u7406\uff1a\u5728Lab1 Part2\u76843.2\u8282\u5df2\u7ecf\u7b80\u5355\u4ecb\u7ecd\u4e86\u5982\u4f55\u7531\u6bb5\u5185\u504f\u79fb\u91cf\u548c\u6bb5\u9009\u62e9\u5668\u5f97\u51fa\u5b8c\u6574\u7684\u5185\u5b58\u5730\u5740\u3002\u4e0e\u9875\u5f0f\u7ba1\u7406\u76f4\u63a5\u6309\u56fa\u5b9a\u5927\u5c0f\u5206\u9875\u4e0d\u540c\uff0c\u6bb5\u5f0f\u7ba1\u7406\u5206\u6bb5\u7684\u4f9d\u636e\u662f\u7a0b\u5e8f\u4e2d\u5404\u90e8\u5206\u7684\u529f\u80fd\uff0c\u5982\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u7b49\u3002</li> <li>\u6bb5\u9875\u5f0f\u7ba1\u7406\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5148\u5206\u6bb5\uff0c\u540e\u5206\u9875\u3002\u5982\u4ee3\u7801\u6bb5\u957f\u5ea6\u6709 20KB\uff0c\u53ef\u5212\u5206\u4e3a 5 \u9875\u3002\u5730\u5740\u8f6c\u6362\u4e5f\u76f8\u5e94\u590d\u6742\u4e86\u8d77\u6765\u3002</li> </ul> <p>JOS \u4f7f\u7528\u5206\u9875\u673a\u5236\u6765\u5b9e\u73b0\u865a\u62df\u5185\u5b58\u548c\u4fdd\u62a4\uff0c\u4f46\u5728 x86 \u4e0a\u65e0\u6cd5\u7981\u7528\u6bb5\u8f6c\u6362\u548c\u57fa\u4e8e\u6bb5\u7684\u4fdd\u62a4\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u6bb5\u5f0f\u7ba1\u7406\u6709\u57fa\u672c\u4e86\u89e3\u3002</p>"},{"location":"MIT6.828/Lab%202%3A%20Memory%20Management/#2_1","title":"2. \u865a\u62df\u5730\u5740\u3001\u7ebf\u6027\u5730\u5740\u3001\u7269\u7406\u5730\u5740","text":"<ul> <li>\u865a\u62df\u5730\u5740\uff1a\u7531\u6bb5\u9009\u62e9\u5668\u548c\u6bb5\u5185\u504f\u79fb\u91cf\u6784\u6210\u7684\u5730\u5740</li> <li>\u7ebf\u6027\u5730\u5740\uff1a\u7ecf\u8fc7\u6bb5\u5f0f\u5730\u5740\u8f6c\u6362\u540e\u5f97\u5230\u7684\u5730\u5740</li> <li>\u7269\u7406\u5730\u5740\uff1a\u7ebf\u6027\u5730\u5740\u8fdb\u4e00\u6b65\u7ecf\u8fc7\u9875\u5f0f\u5730\u5740\u8f6c\u6362\u540e\u5f97\u5230\u7684\u5730\u5740\uff0c\u5b83\u660e\u786e\u5730\u6307\u5411\u4e00\u4e2a\u5b9e\u9645\u5b58\u5728\u7684\u7269\u7406\u5185\u5b58\u5355\u5143\u3002</li> </ul> <p>\u5728 JOS \u4e2d\uff0c\u5207\u6362\u4e3a\u4fdd\u62a4\u6a21\u5f0f\u4e4b\u540e\uff0c\u65e0\u6cd5\u76f4\u63a5\u7528\u7ebf\u6027\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u8bbf\u95ee\u6570\u636e\uff0c\u6240\u6709\u7684\u5730\u5740\u90fd\u88ab\u89c6\u4e3a\u865a\u62df\u5730\u5740\u3002</p> <p>JOS \u5185\u6838\u7ecf\u5e38\u9700\u8981\u5bf9\u5730\u5740\u672c\u8eab\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e3a\u4e86\u533a\u5206\uff0c\u5b9a\u4e49\u4e86\u4ee5\u4e0b\u4e24\u79cd\u7c7b\u578b\uff0c\u5b83\u4eec\u5b9e\u9645\u4e0a\u90fd\u662f32\u4f4d\u6574\u578b\uff1a</p> <ul> <li><code>uintptr_t</code>\uff1a\u865a\u62df\u5730\u5740</li> <li><code>physaddr_t</code>\uff1a\u7269\u7406\u5730\u5740</li> </ul> <pre><code>int x = 1;\nint *p = &amp;x;\nuintptr_t addr = 0xf0112f4c; // \u662fp\u7684\u503c\uff0c\u590d\u73b0\u672c\u4ee3\u7801\u9700\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4fee\u6539\ncprintf(\"*p = %d\\np = %x\\naddr = %x\\n\", *p, p, addr);\n// *p = 1\n// p = f0112f4c\n// addr = f0112f4c\n</code></pre> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c<code>addr</code>\u53ea\u662f\u4e00\u4e2a\u666e\u901a\u7684 32 \u4f4d\u6574\u6570\uff0c\u5e76\u975e<code>int*</code>\u7c7b\u578b\uff0c\u56e0\u6b64\u65e0\u6cd5\u4f7f\u7528\u89e3\u5f15\u7528\uff08derefference\uff09\u8fd0\u7b97\u7b26<code>*addr</code>\u3002\u4f46\u8fd9\u4e2a<code>addr</code>\u53c8\u786e\u5b9e\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u8981\u60f3\u8bbf\u95ee\u8fd9\u4e2a\u5730\u5740\u5bf9\u5e94\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u5c06<code>addr</code>\u5f3a\u5236\u8f6c\u6362\u4e3a<code>int*</code>\u7c7b\u578b\u540e\u518d\u89e3\u5f15\u7528\uff1a</p> <pre><code>cprintf(\"*addr = %d\\n\", *(int*)addr);\n// *addr = 1\n</code></pre> <p>\u4f46\u5bf9\u4e8e<code>physaddr_t</code>\u7c7b\u578b\uff0c\u4e0d\u80fd\u4f7f\u7528\u7c7b\u578b\u8f6c\u6362\u6765\u89e3\u5f15\u7528\uff0c\u5b9e\u9645\u8bbf\u95ee\u7684\u5730\u5740\u53ef\u80fd\u4e0e\u9884\u671f\u4e0d\u7b26\u3002</p> <p>\u603b\u7ed3\uff1a\u5728 Lab 2 \u4e2d\uff0c\u5c06\u4f1a\u63a5\u89e6\u548c\u4f7f\u7528\u7684\u4fdd\u5b58\u5730\u5740\u7684\u7c7b\u578b\u5982\u4e0b\u8868\u6240\u793a\uff1a</p> C type \u4fdd\u5b58\u7684\u5730\u5740\u7c7b\u578b T (int, char*, double*, etc.) \u865a\u62df\u5730\u5740 uintptr_t \u865a\u62df\u5730\u5740 physaddr_t \u7269\u7406\u5730\u5740 <p>Question</p> <ol> <li> <p>\u5047\u8bbe\u4ee5\u4e0b\u5185\u6838\u4ee3\u7801\u662f\u6b63\u786e\u7684, <code>x</code>\u5e94\u8be5\u662f\u4ec0\u4e48\u7c7b\u578b\uff1f<code>uintptr_t</code>or<code>physaddr_t</code>?</p> <pre><code> mystery_t x;\nchar* value = return_a_pointer();\n*value = 10;\nx = (mystery_t) value;\n</code></pre> <p><code>x</code>\u5e94\u8be5\u662f<code>uintptr_t</code>\u3002<code>value</code>\u4e3a<code>char*</code>\uff0c\u5b83\u4fdd\u5b58\u4e86\u5bf9\u5e94\u4e8e<code>char</code>\u7684\u4e00\u4e2a\u865a\u62df\u5730\u5740\uff0c\u8981\u4fdd\u8bc1\u6b63\u786e\uff0c\u53ea\u80fd\u5f3a\u5236\u8f6c\u6362\u4e3a\u540c\u4e3a\u4fdd\u5b58\u865a\u62df\u5730\u5740\u7684<code>uintptr_t</code>\u7c7b\u578b\u3002</p> </li> </ol> <p>\u65e2\u7136 C \u4ee3\u7801\u4e2d\u53ea\u80fd\u7528\u865a\u62df\u5730\u5740\uff0cJOS \u5185\u6838\u53c8\u5982\u4f55\u8bbf\u95ee\u90a3\u4e9b\u53ea\u77e5\u9053\u7269\u7406\u5730\u5740\u7684\u5185\u5b58\uff1f\u5982<code>PageInfo* pages</code>\u7684\u5185\u5b58\u5206\u914d\u9700\u8981\u5728\u7269\u7406\u5185\u5b58\u4e0a\u76f4\u63a5\u8fdb\u884c\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u5728 Lab1 Part3 \u5c31\u5df2\u7ecf\u9884\u5148\u505a\u597d\u4e86\u8fd9\u9879\u5de5\u4f5c\uff1a\u901a\u8fc7\u624b\u5199\u7684\u3001\u9759\u6001\u521d\u59cb\u5316\u7684\u9875\u76ee\u5f55\u548c\u9875\u8868\u6765\u5b8c\u6210\u5bf9\u524d 4MB \u7684\u7269\u7406\u5730\u5740\u5230\u865a\u62df\u5730\u5740\u7684\u8f6c\u6362\uff0c\u5982\u7269\u7406\u5730\u5740<code>0</code> \u6620\u5c04\u4e3a\u865a\u62df\u5730\u5740<code>0xf0000000</code>\u3002</p> <p>\u5728\u4ee3\u7801\u4e2d\u4e24\u8005\u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\u53ef\u4ee5\u7528\u4ee5\u4e0b\u4e24\u4e2a\u5b8f\u5b9a\u4e49\uff08\u7ec3\u4e60 1 \u5df2\u7ecf\u7528\u8fc7\u4e86\uff09\uff1a</p> <pre><code>vir_addr = KADDR(phy_addr)\nphy_addr = PADDR(vir_addr)\n</code></pre>"},{"location":"MIT6.828/Lab%202%3A%20Memory%20Management/#3","title":"3. \u5f15\u7528\u8ba1\u6570","text":"<p><code>struct PageInfo</code>\u7ed3\u6784\u4e2d\u5b9a\u4e49\u4e86<code>pp_ref</code>\u7528\u4e8e\u5f15\u7528\u8ba1\u6570\u3002\u5b83\u7528\u4e8e\u540c\u65f6\u5c06\u540c\u4e00\u4e2a\u7269\u7406\u9875\u9762\u6620\u5c04\u5230\u591a\u4e2a\u865a\u62df\u5730\u5740\u3002</p> <p>\u4f8b\u5982\uff0c\u6709\u591a\u4e2a\u8fdb\u7a0b\u9700\u8981\u5171\u7528\u7269\u7406\u9875\u9762<code>phy_page</code>\uff0c\u5728\u5b83\u4eec\u5404\u81ea\u7684\u5730\u5740\u7a7a\u95f4\u91cc\uff0c<code>phy_page</code>\u6240\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u90fd\u662f\u4e0d\u4e00\u6837\u7684\u3002\u6b64\u65f6\u7684<code>pp_ref</code>\u5c31\u662f\u5728\u8bb0\u5f55\u6709\u591a\u5c11\u4e2a\u8fdb\u7a0b\u5728\u4f7f\u7528<code>phy_page</code>\u3002\u82e5<code>pp_ref</code>\u4e3a<code>0</code>\uff0c\u5219\u8be5\u7269\u7406\u9875\u6240\u5360\u7528\u7684\u5185\u5b58\u53ef\u4ee5\u56de\u6536\u3002</p> <p>\u4e25\u683c\u6765\u8bf4\uff0c<code>pp_ref</code>\u5e94\u8be5\u7b49\u4e8e\u8be5\u7269\u7406\u9875\u5728\u6240\u6709\u9875\u8868\u4e2d<code>UTOP</code>\u4ee5\u4e0b\u51fa\u73b0\u7684\u6b21\u6570\u3002\uff08<code>UTOP</code>\u4ee5\u4e0a\u7684\u9875\u8868\u9879\u7531\u5185\u6838\u5728\u542f\u52a8\u65f6\u8bbe\u7f6e\uff0c\u4e14\u6c38\u8fdc\u4e0d\u91ca\u653e\uff0c\u6240\u4ee5\u6ca1\u5fc5\u8981\u7eb3\u5165\u8ba1\u6570\uff09</p> <p><code>page_alloc</code>\u8fd4\u56de\u503c\u7684<code>pp_ref</code>\u5e94\u4e3a 0\u3002\u5f53\u8c03\u7528\u8005\u5bf9\u9875\u9762\u8fdb\u884c\u4e86\u5176\u4ed6\u64cd\u4f5c\uff0c\u5982<code>page_insert</code>\u65f6\uff0c<code>pp_ref</code>\u624d\u4f1a\u9012\u589e\u3002</p>"},{"location":"MIT6.828/Lab%202%3A%20Memory%20Management/#4","title":"4. \u9875\u8868\u7ba1\u7406","text":"<p>\u8fd9\u91cc\u8981\u5148\u77e5\u9053\u9875\u8868\u662f\u4ec0\u4e48\u3002\u4ee5\u4e0b\u4e3axv6 - Charpter2.Page Table\u7684\u539f\u6587\u7ffb\u8bd1\uff0c\u6709\u90e8\u5206\u4fee\u6539\u4ee5\u589e\u5f3a\u53ef\u8bfb\u6027\uff1a</p> <p>x86 \u6307\u4ee4\uff08\u5305\u62ec\u5185\u6838\u6001\u548c\u7528\u6237\u6001\uff09\u4f7f\u7528\u865a\u62df\u5730\u5740\u3002\u4f46\u8ba1\u7b97\u673a\u7684RAM\uff0c\u6216\u8005\u8bf4\uff0c\u7269\u7406\u5185\u5b58\uff0c\u662f\u7528\u7269\u7406\u5730\u5740\u4f5c\u4e3a\u7d22\u5f15\u7684\u3002x86 \u9875\u8868\u786c\u4ef6\u5c06\u6bcf\u4e2a\u865a\u62df\u5730\u5740\uff0832 bit\uff09\u4e00\u4e00\u6620\u5c04\u4e3a\u7269\u7406\u5730\u5740\uff0832 bit\uff09\u3002</p> <p>\u4e00\u4e2a x86 \u9875\u8868\u5728\u903b\u8f91\u4e0a\u662f\u4e00\u4e2a\u5305\u542b 2^20 \u4e2a\u9875\u8868\u9879\uff08page table entry, PTE\uff09\u7684\u6570\u7ec4\u3002\u6bcf\u4e2a\u9875\u8868\u9879\u5305\u542b\u4e00\u4e2a 20 bit \u957f\u7684\u7269\u7406\u9875\u53f7\uff08physical page number, PPN\uff09\u4ee5\u53ca\u4e00\u4e9b\u6807\u5fd7\u4f4d\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>Paging hardware\uff08\u6211\u4e60\u60ef\u7684\u79f0\u547c\u662f\u5730\u5740\u53d8\u6362\u673a\u6784\uff09\u4f1a\u53d6\u51fa\u4e00\u4e2a\u865a\u62df\u5730\u5740\u7684\u524d 20 bit \u4f5c\u4e3a\u7d22\u5f15\uff0c\u5728\u9875\u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u9875\u8868\u9879\uff0c\u5e76\u7528\u8be5\u9875\u8868\u9879\u7684\u7269\u7406\u9875\u53f7\u4ee3\u66ff\u8fd9 20 bit\uff0c\u4f59\u4e0b\u7684 12 bit \u539f\u5c01\u4e0d\u52a8\uff0c\u5c31\u5f97\u5230\u4e86\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u3002\u8fd9\u4e5f\u610f\u5473\u7740\uff0c\u4e00\u9875\u7684\u5927\u5c0f\u4e3a 2^12 \u5b57\u8282\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u9875\u5f0f\u5730\u5740\u53d8\u6362\u4e00\u5171\u6709 2 \u6b65\u3002\u6240\u6709\u7684\u9875\u8868\u4ee5\u4e00\u68f5 2 \u5c42\u7684\u6811\uff08\u4e8c\u7ea7\u9875\u8868\uff09\u7684\u5f62\u5f0f\u7ec4\u7ec7\u8d77\u6765\u5b58\u50a8\u5728\u7269\u7406\u5185\u5b58\u4e2d\u3002</p> <ul> <li>\u6811\u7684\u6839\u7ed3\u70b9\u79f0\u4e3a\u9875\u76ee\u5f55\uff0c\u603b\u5927\u5c0f\u4e3a 4096 \u5b57\u8282\uff0c\u5305\u542b 1024 \u4e2a\u6761\u76ee\uff08page directory entry, PDE\uff09\u3002\u6bcf\u4e2a PDE \u5bf9\u5e94\u4e00\u4e2a\u9875\u8868\uff0c\u6bcf\u4e2a\u9875\u8868\u90fd\u662f\u4e00\u4e2a\u5305\u542b 1024 \u4e2a\u9875\u8868\u9879\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u9875\u8868\u9879 32 bit.</li> <li>Paging hardware \u53d6\u51fa\u865a\u62df\u5730\u5740\u7684\u524d 10 bit \u4f5c\u4e3a\u7d22\u5f15\uff0c\u5728\u9875\u76ee\u5f55\u4e2d\u627e\u5230\u5bf9\u5e94\u9875\u8868\uff1b\u518d\u53d6\u63a5\u4e0b\u6765 10 bit \u4f5c\u4e3a\u7d22\u5f15\uff0c\u5728\u9875\u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u9875\u8868\u9879\u3002\u5982\u679c\u627e\u4e0d\u5230\u9875\u8868\u6216\u8005\u627e\u4e0d\u5230\u9875\u8868\u9879\uff0cPaging hardware \u4f1a\u62a5\u544a\u51fa\u9519\u3002</li> </ul> <p>\u4e3a\u4e86\u52a8\u6001\u66f4\u65b0\u548c\u7ef4\u62a4\u9875\u8868\uff0c\u8fd8\u9700\u8981\u8bb0\u5f55\u5404\u9875\u8868\u9879\u5bf9\u5e94\u9875\u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u56e0\u6b64\u6bcf\u4e2a\u9875\u8868\u9879\u90fd\u6709\u4e00\u4e9b\u6807\u5fd7\u4f4d\u3002\u6700\u57fa\u672c\u5730\uff0c\u9700\u8981\u77e5\u9053\u9875\u662f\u5426\u5141\u8bb8\u8bfb\u3001\u5141\u8bb8\u5199\u7b49\u3002\u5e38\u7528\u6807\u5fd7\u4f4d\u5982\uff1a</p> <ul> <li>PTE_P\uff1a\u6307\u793a\u8be5\u9875\u662f\u5426\u5b58\u5728\uff08\u4e8e\u7269\u7406\u5185\u5b58\u4e2d\uff09\u3002\u82e5\u4e3a<code>0</code>\uff0c\u5219\u62a5\u544a\u51fa\u9519\u3002</li> <li>PTE_W\uff1a\u662f\u5426\u5141\u8bb8\u5199\u8be5\u9875\u3002\u82e5\u4e3a<code>0</code>\uff0c\u5219\u9875\u662f\u53ea\u8bfb\u7684\u3002</li> <li>PTE_U\uff1a\u7528\u6237\u7a0b\u5e8f\u80fd\u5426\u4f7f\u7528\u8be5\u9875\u3002\u82e5\u4e3a<code>0</code>\uff0c\u53ea\u6709\u5185\u6838\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u3002</li> </ul> <p>\u7ec3\u4e60 4. \u73b0\u5728\u4f60\u5c06\u7f16\u5199\u4e00\u7ec4\u51fd\u6570\u6765\u7ba1\u7406\u9875\u8868\uff1a\u63d2\u5165\u548c\u5220\u9664\u7ebf\u6027\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u6620\u5c04\uff0c\u5e76\u5728\u9700\u8981\u65f6\u521b\u5efa\u9875\u8868\u9875\u3002\u5728\u6587\u4ef6<code>kern/pmap.c</code>\u4e2d\uff0c\u4f60\u5fc5\u987b\u5b9e\u73b0\u4ee5\u4e0b\u51fd\u6570\u7684\u4ee3\u7801\u3002</p> <pre><code>pgdir_walk() \nboot_map_region() \npage_lookup() \npage_remove() \npage_insert()\n</code></pre> <p><code>check_page()</code>\u4f1a\u6d4b\u8bd5\u4f60\u7684\u9875\u8868\u7ba1\u7406\u51fd\u6570\u3002\u786e\u4fdd\u5b83\u62a5\u544a\u6210\u529f\u540e\u518d\u8fdb\u884c\u540e\u9762\u7684\u90e8\u5206\u3002</p> <p><code>pgdir_walk</code>\uff1a\u7ebf\u6027\u5730\u5740\u2192\u67e5\u9875\u76ee\u5f55\u2192\u67e5\u9875\u8868\u2192\u627e\u5230\u5bf9\u5e94\u9875\u8868\u9879\uff0c\u8fd4\u56de\u9875\u8868\u9879\u7684\u865a\u62df\u5730\u5740\u3002\u6ce8\u610f\u5904\u7406\u9875\u8868\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u3002</p> <p>\u8fd9\u91cc\u9700\u8981\u7740\u91cd\u7406\u89e3\u4e00\u4e0b\u76f8\u5173\u7684\u7c7b\u578b\u53ca\u5b8f\u5b9a\u4e49\uff1a</p> <p><code>pde_t* pde;</code>\uff1a\u58f0\u660e\u4e86\u4e00\u4e2a\u6307\u9488<code>pde</code>\uff0c\u5b83\u4fdd\u5b58\u4e86\u4e00\u4e2a<code>pde_t</code>\u7c7b\u578b\u7684\u5730\u5740\u3002\u4f7f\u7528\u65f6\uff0c<code>pde</code>\u662f\u5730\u5740\uff0c<code>*pde</code>\u662f\u8be5\u5730\u5740\u5185\u5b58\u4e2d\u4fdd\u5b58\u7684\u503c\uff0c\u670932\u4f4d\u957f\uff0c\u662f\u9875\u76ee\u5f55\u9879\u7684\u5185\u5bb9\u3002</p> <ul> <li><code>PTE_ADDR(*pde)</code>\uff1a\u53d6\u51fa\u8be5\u9875\u76ee\u5f55\u9879\u5185\u5bb9\u4e2d\u7684\u7269\u7406\u5730\u5740\u90e8\u5206\uff0c\u5373\u4e00\u4e2a\u9875\u8868\u7684\u7269\u7406\u5730\u5740</li> <li><code>*pde &amp; PTE_P</code>\uff1a\u53d6\u51fa\u8be5\u9875\u76ee\u5f55\u9879\u5185\u5bb9\u4e2d\u7684<code>PTE_P</code>\u4f4d\uff0c\u7ed3\u679c\u4e3a<code>0</code>\u6216<code>1</code>\u3002</li> </ul> <pre><code>pte_t *\npgdir_walk(pde_t *pgdir, const void *va, int create)\n{ // \u6839\u636e\u865a\u62df\u5730\u5740va\u627e\u5230\u5bf9\u5e94\u9875\u8868\u9879\uff0c\u8fd4\u56de\u9875\u8868\u9879\u7684\u865a\u62df\u5730\u5740\n\npde_t* pde = &amp;pgdir[PDX(va)];\n// PDX(va)\u53d6va\u7684\u524d10bit\u4f5c\u4e3a\u4e0b\u6807\uff0c\u627e\u5230\u5bf9\u5e94PDE\npte_t* pte;\nif(*pde &amp; PTE_P){ // \u82e5\u8be5PDE\u7684PTE_P\u6807\u5fd7\u4f4d\u4e3a1\uff0c\u5bf9\u5e94\u9875\u8868\u5b58\u5728\npte = KADDR(PTE_ADDR(*pde));\n// PTE_ADDR(*pde)\u53d6\u51fa\u8be5\u9875\u8868\u7269\u7406\u5730\u5740\uff0c\u5e76\u8f6c\u4e3a\u865a\u62df\u5730\u5740\npte = &amp;pte[PTX(va)];\n// \u5c06pte\u89c6\u4e3a\u6570\u7ec4\u7684\u8d77\u59cb\u5730\u5740\uff0c&amp;pte[PTX(va)]\u5373\u5bf9\u5e94\u9875\u8868\u9879\u7684\u5730\u5740\n// \u4e0a\u9762\u4e24\u884c\u7b49\u4ef7\u4e8e pte = KADDR(PTE_ADDR(*pde)) + 4 * PTX(va);\nreturn pte; // \u8fd4\u56de\u9875\u8868\u9879\u865a\u62df\u5730\u5740\n}\nelse if (create){\n// \u5982\u679c\u8fde\u5bf9\u5e94\u7684\u9875\u8868\u90fd\u6ca1\u6709\uff0c\u65b0\u5efa\u5e76\u5206\u914d\u7269\u7406\u9875\nstruct PageInfo *pg = page_alloc(ALLOC_ZERO);\nif(pg){\npg -&gt; pp_ref ++;\n*pde = (page2pa(pg)) | PTE_P | PTE_U | PTE_W;\n// \u5728\u9875\u76ee\u5f55\u9879\u4e2d\u586b\u5165\u5185\u5bb9\uff1a\u9875\u8868\u7269\u7406\u5730\u5740 + PTE_P\u6807\u8bb0\u9875\u8868\u5b58\u5728\npte = KADDR(PTE_ADDR(*pde));\npte = &amp;pte[PTX(va)];\nreturn pte; // \u65b0\u7684\u9875\u8868\u9879\u865a\u62df\u5730\u5740\n}\n}\nreturn NULL;\n}\n</code></pre> <p>\u6ce8\u610f\uff1a<code>PTX(va)</code>\u548c<code>PDX(va)</code>\u90fd\u662f<code>index</code>\uff0c\u800c\u975e<code>offset</code>\uff0c\u8fd9\u662f\u6ce8\u91ca\u91cc\u660e\u786e\u6307\u51fa\u7684\u3002\u5047\u8bbe\u9875\u8868\u8d77\u59cb\u865a\u62df\u5730\u5740\u4e3a<code>pte_head</code>\uff0c\u5219\u5728\u8be5\u9875\u8868\u4e2d\u67e5\u627e<code>va</code>\u7684\u9875\u8868\u9879<code>pte</code>\uff0c\u5e94\u4e3a<code>pte = pte_head[PTX(va)]</code>\uff0c\u800c\u4e0d\u80fd\u5199\u6210<code>pte = pte_head + PTX(va)</code>\u3002\u56e0\u4e3a\u9875\u8868\u4e2d\u7684\u6bcf\u4e00\u9879\u957f\u5ea6\u90fd\u4e3a 4B\uff0c\u5199\u6210\u6570\u7ec4\u4e0b\u6807\u5f62\u5f0f\u65f6\u4f1a\u81ea\u7136\u5730\u4ee5 4B \u4e3a\u5355\u4f4d\uff0c\u800c\u5199\u6210\u504f\u79fb\u91cf\u5f62\u5f0f\u65f6\u662f\u4ee5 1B \u4e3a\u5355\u4f4d\u3002\u6240\u4ee5<code>pte = pte_head[PTX(va)]</code>\u5176\u5b9e\u7b49\u4ef7\u4e8e<code>pte = pte_head + 4 * PTX(va)</code>.\uff08\u56e0\u4e3a\u6ca1\u6709\u641e\u6e05\u695a<code>PTX(va)</code>\u5230\u5e95\u662f\u5f53\u4e0b\u6807\u7528\u8fd8\u662f\u5f53\u504f\u79fb\u91cf\u7528\uff0c\u6211\u5728\u8fd9\u91cc\u6d6a\u8d39\u4e86\u975e\u5e38\u591a\u7684\u65f6\u95f4Debug\u2026\u2026\uff09</p> <p><code>boot_map_region</code>\uff1a\u5c06\u865a\u62df\u5730\u5740 va~va+size \u6620\u5c04\u5230\u7269\u7406\u5730\u5740 pa~pa+size\u3002\u8c03\u7528\u8005\u4fdd\u8bc1 size \u662f PGSIZE \u7684\u6574\u6570\u500d\u3002\u904d\u5386\u6240\u6709\u865a\u62df\u5730\u5740\uff0c\u8c03\u7528pgdir_walk\u9010\u4e2a\u751f\u6210\u5bf9\u5e94\u9875\u8868\u9879\uff1a</p> <pre><code>static void\nboot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm)\n{\npte_t *pte;\nint i;\nfor(i = 0; i &lt; size; i+=PGSIZE){ // size\u662f\u8981\u6620\u5c04\u7684\u603b\u5b57\u8282\u6570\uff0c\u6d89\u53casize/PGSIZE\u4e2a\u9875\u8868\u9879\npte = pgdir_walk(pgdir, (void*)va, 1);\n*pte = pa | perm | PTE_P; // \u586b\u5165\u5bf9\u5e94\u7269\u7406\u5730\u5740\u53ca\u6807\u5fd7\u4f4d\nva += PGSIZE;\npa += PGSIZE;\n// \u6bcf\u5efa\u7acb\u4e00\u4e2a\u9875\u8868\u9879\uff0c\u5b8c\u6210PGSIZE\u4e2a\u865a\u62df\u5730\u5740\u7684\u6620\u5c04\n}\n}\n</code></pre> <p><code>page_lookup</code>\uff1a\u8fd4\u56de\u865a\u62df\u5730\u5740<code>va</code>\u5bf9\u5e94\u7684\u7269\u7406\u9875\u7269\u7406\u5730\u5740\uff1b\u5fc5\u8981\u65f6\u5c06\u9875\u8868\u9879\u5730\u5740\u4fdd\u5b58\u5728<code>*pte_store</code>\u4e2d\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\uff1a</p> <pre><code>struct PageInfo *\npage_lookup(pde_t *pgdir, void *va, pte_t **pte_store)\n{\nstruct PageInfo* ret = NULL; pte_t* pte = pgdir_walk(pgdir, va, 0);\nif(pte &amp;&amp; (*pte &amp; PTE_P)){\nif(pte_store){\n*pte_store = pte;\n}\nret =  pa2page(PTE_ADDR(*pte)); }\nreturn ret;\n}\n</code></pre> <p><code>page_remove</code>\uff1a\u5220\u9664\u865a\u62df\u5730\u5740<code>va</code>\u5bf9\u7269\u7406\u9875\u5730\u5740\u7684\u4e00\u4e2a\u6620\u5c04\uff1a</p> <pre><code>void\npage_remove(pde_t *pgdir, void *va)\n{\npte_t* pte = NULL;\nstruct PageInfo* pgInfo = page_lookup(pgdir, va, &amp;pte); // \u8981\u6c42\u8fd4\u56de\u5bf9\u5e94\u9875\u8868\u9879\u5730\u5740\uff0c\u4fdd\u5b58\u5728pte\u4e2d\nif(pgInfo != NULL &amp;&amp; (*pte &amp; PTE_P)){ // \u7269\u7406\u9875\u9762\u6709\u53ef\u80fd\u4e0d\u5b58\u5728\uff0c\u5982\u8fde\u7eed\u5bf9\u540c\u4e00\u4e2ava\u8c03\u7528\u4e24\u6b21page_remove\npage_decref(pgInfo); // \u5305\u542b\u4e86 pgInfo-&gt;ref--;\n*pte = 0;\ntlb_invalidate(pgdir, va);\n}\n}\n</code></pre> <p><code>page_insert</code>\uff1a\u5efa\u7acb\u7269\u7406\u9875<code>pp</code>\u5230\u865a\u62df\u5730\u5740<code>va</code>\u7684\u4e00\u4e2a\u6620\u5c04\uff1a</p> <pre><code>int\npage_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)\n{\n// \u5efa\u7acb\u7269\u7406\u9875pp\u5230\u865a\u62df\u5730\u5740va\u7684\u6620\u5c04\n// \u5982\u679c\u5df2\u7ecf\u6709\u5176\u4ed6\u7269\u7406\u9875\u6620\u5c04\u5230va\uff0c\u6267\u884cpage_remove\u5220\u9664\u5b83\n// \u5982\u679c\u5df2\u6709pp\u5230va\u7684\u6620\u5c04\uff0c\u540c\u4e0a\uff0c\u7edf\u4e00\u505a\u6cd5\npte_t * pte = pgdir_walk(pgdir, va, 1);\nif(pte == NULL){\nreturn -E_NO_MEM; // \u5bf9\u5e94\u9875\u8868\u4e0d\u5b58\u5728\u4e14\u65e0\u6cd5\u5206\u914d\u5185\u5b58\u65b0\u5efa\u9875\u8868\n}\npp -&gt; pp_ref ++; //\u5fc5\u987b\u5728page_remove\u524d\u6267\u884c\nif((*pte) &amp; PTE_P){\npage_remove(pgdir, va); // \u5df2\u6709\u6620\u5c04\uff0c\u5220\u6389\uff0cTLB invalidate\u5df2\u5305\u542b\u5728page_remove\u4e2d\n}\n*pte = page2pa(pp) | perm | PTE_P; // \u586b\u5199\u9875\u8868\u9879\nreturn 0;\n}\n</code></pre> <p>\u6ce8\u610f\uff1a<code>pp-&gt;pp_ref++</code>\u5fc5\u987b\u5728<code>page_remove</code>\u4e4b\u524d\u3002\u56e0\u4e3a<code>page_remove</code>\u4f1a\u8c03\u7528<code>page_decref(pgInfo);</code>\uff0c\u540e\u8005\u4f1a\u5728\u6267\u884c<code>pp-&gt;pp_ref--</code>\u4e4b\u540e\u7acb\u5373\u5224\u65ad\u8be5\u7269\u7406\u9875\u662f\u54260\u6620\u5c04\uff0c\u82e5\u4e3a0\u6620\u5c04\u5219\u4f1a\u7acb\u5373\u5c06\u9875<code>free</code>\u6389\u3002\u5982\u679c<code>pp-&gt;pp_ref++</code>\u5728\u540e\u9762\u6267\u884c\uff0c\u4f1a\u5f15\u8d77\u9519\u8bef\u3002</p> <p>\u6700\u540e\u8fd0\u884c\u51fa\u73b0<code>check_page() succeeded!</code>\uff0c\u7ec3\u4e60 4 \u5b8c\u6210\u3002</p>"},{"location":"MIT6.828/Lab%202%3A%20Memory%20Management/#part-3-kernel-address-space","title":"Part 3: Kernel Address Space","text":""},{"location":"MIT6.828/Lab%202%3A%20Memory%20Management/#1_2","title":"1. \u5efa\u7acb\u5185\u6838\u865a\u62df\u5730\u5740\u7684\u6620\u5c04","text":"<p>\u5728 Part 3\uff0c\u6211\u4eec\u9700\u8981\u5efa\u7acb\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\u5185\u6838\u90e8\u5206\u7684\u6620\u5c04\u3002</p> <p>Exercise 5. Fill in the missing code in <code>mem_init()</code> after the call to <code>check_page()</code>.</p> <p>Your code should now pass the <code>check_kern_pgdir()</code> and <code>check_page_installed_pgdir()</code> checks.</p> <p>\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff1a</p> <ol> <li> <p>\u5efa\u7acb\u7528\u6237\u7a7a\u95f4\u865a\u62df\u5730\u5740<code>UPAGES</code>\u5230\u7269\u7406\u5730\u5740<code>pages</code>\u7684\u6620\u5c04\uff0c\u5927\u5c0f\u5e94\u4e3a\u5373<code>pages</code>\u7684\u5927\u5c0f<code>npages * sizeof(struct PageInfo)</code>\uff080x40000\uff09\uff0c\u4f46\u5728<code>inc/memlayout.h</code>\u7684\u56fe\u4e2d\uff0cR0 PAGES \u6240\u5360\u5730\u5740\u7a7a\u95f4\u5927\u5c0f\u4e3a<code>PTSIZE</code>\uff0c\u6240\u4ee5\u5e94\u8be5\u8bbe\u4e3a<code>PTSIZE</code>\u3002\uff08\u4f46 0x40000 \u548c PTSIZE \u90fd\u80fd\u901a\u8fc7\u6d4b\u8bd5\uff09</p> </li> <li> <p>\u5efa\u7acb\u5185\u6838\u7a7a\u95f4\u6808\u7684\u865a\u62df\u5730\u5740<code>KSTACKTOP</code>\u5230\u7269\u7406\u5730\u5740<code>bootstack</code>\uff08\u5728<code>entry.S</code>\u4e2d\u5b9a\u4e49\u7684\uff09\u7684\u6620\u5c04\uff0c\u6ce8\u610f\u5730\u5740\u662f\u9012\u51cf\u7684\u3002\u6620\u5c04\u7684\u5730\u5740\u7a7a\u95f4\u5927\u5c0f\uff08\u5927\u4e8e<code>KSTKSIZE</code>\uff09\u88ab\u89c4\u5b9a\u4e3a<code>PTSIZE</code>\uff0c\u5373\u4e00\u4e2a\u9875\u76ee\u5f55\u9879\u53ef\u6620\u5c04\u5230\u7684\u6240\u6709\u9875\u9762\u7684\u603b\u5b57\u8282\u6570\uff081024\u9875*4KB\uff09\u3002</p> <p>\u4f46\u8fd8\u9700\u8981\u7279\u6b8a\u5904\u7406\uff0c\u5c06 [KSTACKTOP-PTSIZE, KSTACKTOP) \u5206\u4e3a\u4e24\u90e8\u5206\u8fdb\u884c\u6620\u5c04\uff0c\u4ee5<code>KSTACKTOP-KSTKSIZE</code>\u4e3a\u754c\u3002\u5176\u4e2d [KSTACKTOP-KSTKSIZE, KSTACKTOP) \u90e8\u5206\u6620\u5c04\u5230\u7269\u7406\u5730\u5740\uff0c\u800c [KSTACKTOP-PTSIZE, KSTACKTOP-KSTKSIZE) \u4e0d\u8fdb\u884c\u6620\u5c04\u3002</p> <p>\u8fd9\u6837\u505a\uff0c\u53ef\u4ee5\u786e\u4fdd\u6808\u5411\u4f4e\u5730\u5740\u589e\u957f\u65f6\u59cb\u7ec8\u4e0e\u5176\u4ed6\u6570\u636e\u4fdd\u6301\u7740\u4e00\u5b9a\u7684\u7a7a\u767d\u533a\u57df\uff0c\u4e00\u65e6\u6808\u6ea2\u51fa\uff0c\u4e5f\u53ea\u4f1a\u6ea2\u51fa\u5230\u8fd9\u7247\u533a\u57df\u5185\uff0c\u800c\u4e0d\u4f1a\u8986\u76d6\u6389\u5176\u4ed6\u6570\u636e\u3002</p> </li> <li> <p>\u5efa\u7acb\u865a\u62df\u5730\u5740 [KERNBASE, 2^32) \u5230\u5168\u90e8\u7269\u7406\u5730\u5740 [0, 2^32 - KERNBASE) \u7684\u6620\u5c04\uff0c\u5927\u5c0f\u4e3a <code>0xffffffff - 0xf0000000</code>\u3002\u5f53\u7136\uff0c\u5b9e\u9645\u7269\u7406\u5185\u5b58\u5e76\u6ca1\u6709\u8fd9\u4e48\u5927\uff0c\u4f46\u4e0d\u7ba1\u600e\u6837\u5c31\u662f\u8fd9\u4e48\u8bbe\u4e86\u2026\u2026\u6ce8\u91ca\u4e5f\u6ca1\u8bf4\u4e3a\u4ec0\u4e48\u3002</p> </li> </ol> <pre><code>// UPAGES\nboot_map_region(kern_pgdir, UPAGES, PTSIZE, PADDR(pages), PTE_U);\n// kernel stack\nboot_map_region(kern_pgdir, KSTACKTOP-KSTKSIZE, KSTKSIZE, PADDR(bootstack), PTE_W);\n// all of physical memory\nboot_map_region(kern_pgdir, KERNBASE, 0xffffffff - KERNBASE, 0, PTE_W);\n</code></pre> <p>\u5230\u8fd9\u91cc<code>pmap.c</code>\u5168\u90e8\u5b8c\u6210\u3002</p> <pre><code>running JOS: (1.1s) \n  Physical page allocator: OK \n  Page management: OK \n  Kernel page directory: OK \n  Page management 2: OK \nScore: 70/70\n</code></pre> <p>\u73b0\u5728\u6765\u770b\u4e00\u4e0b\u5efa\u7acb\u4e0a\u8ff0\u6620\u5c04\u540e<code>kern_pgdir</code>\u7684\u5177\u4f53\u60c5\u51b5\u3002\u5728<code>mem_init</code>\u4e2d\u52a0\u4e00\u70b9\u6253\u5370\u8f85\u52a9\uff1a</p> <pre><code>void\nmem_init(void)\n{\n...\ncheck_kern_pgdir();\n...\n// \u904d\u5386kern_pgdir\uff0c\u6253\u5370\u6bcf\u4e2aPDE\u5bf9\u5e94\u9875\u8868\u7684\u7b2c\u4e00\u9879\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\nint i;\nfor(i = 0; i &lt; 1024; i++){ // \u51711024\u4e2a\u9875\u76ee\u5f55\u9879\nif(!kern_pgdir[i]) continue;\npte_t* first_pte = KADDR(PTE_ADDR(kern_pgdir[i]));\nphysaddr_t pa = PTE_ADDR(*first_pte);\n// \u4f7f\u7528\u9875\u76ee\u5f55\u7d22\u5f15\u3001\u9875\u8868\u7d22\u5f15\u3001\u7269\u7406\u5730\u5740\u4f4e12bit\uff0c\u62fc\u63a5\u5f97\u5230\u865a\u62df\u5730\u5740\npte_t* va = PGADDR(i, 0, (pa &amp; 0xfff));\ncprintf(\"kern_pgdir[%d]: 0x%x\\n\", i, va);\n}\n}\n</code></pre> <p>\u8f93\u51fa\u7ed3\u679c\uff1a</p> <pre><code>kern_pgdir[956]: 0xef000000  # UPAGES\uff0c\u5360\u4e00\u4e2a\u9875\u76ee\u5f55\u9879\nkern_pgdir[957]: 0xef400000  # UVPT\nkern_pgdir[959]: 0xefc00000\u3000# stack\uff0c\u5360\u4e00\u4e2a\u9875\u76ee\u5f55\u9879\nkern_pgdir[960]: 0xf0000000  # KERNBASE\nkern_pgdir[961]: 0xf0400000\n...\nkern_pgdir[1021]: 0xff400000\nkern_pgdir[1022]: 0xff800000\nkern_pgdir[1023]: 0xffc00000\n</code></pre>"},{"location":"MIT6.828/Lab%202%3A%20Memory%20Management/#2_2","title":"2. \u9875\u7684\u6743\u9650\u7ba1\u7406","text":"<p>\u53c2\u8003\uff1aIntel 80386 Reference Programmer's Manual Table of Contents 6.4 Page-Level Protection</p> <p>\u524d\u9762\u63d0\u8fc7\uff0c\u9875\u8868\u9879\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u5176\u4e2d\uff1a</p> <ul> <li>U\u4f4d\uff1a1-\u7528\u6237\u7ea7\uff0c0-\u7279\u6743\u7ea7\u3002\u7528\u6237\u6001\u4e0b\u4ec5\u80fd\u5bfb\u5740\u7528\u6237\u7ea7\u9875\u9762\uff0c\u5185\u6838\u6001\u4e0b\u80fd\u5bfb\u5740\u6240\u6709\u9875\u9762\u3002\u7528\u6237\u6001/\u5185\u6838\u6001\u662f\u7531 CPL \uff08\u5f53\u524d\u7279\u6743\u7ea7\uff09\u5b57\u6bb5\u7684\u503c\u51b3\u5b9a\u7684\uff0cCPL\u4fdd\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\u3002</li> <li>W\u4f4d\uff1a1-\u53ef\u8bfb\u53ef\u5199\uff0c0-\u53ea\u8bfb\u3002\u7528\u6237\u6001\u4e0b\u53ea\u80fd\u5199\u90a3\u4e9b\u53ef\u8bfb\u53ef\u5199\u7684\u7528\u6237\u7ea7\u9875\u9762\uff0c\u4e14\u6240\u6709\u7684\u7279\u6743\u7ea7\u754c\u9762\u90fd\u4e0d\u53ef\u8bfb\u4e0d\u53ef\u5199\u3002\u5185\u6838\u6001\u4e0b\u53ef\u4ee5\u8bfb\u5199\u6240\u6709\u9875\u9762\u3002</li> </ul> <p>\u8fd9\u4e24\u4f4d\u7ed3\u5408\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u9875\u7684\u5404\u7c7b\u6743\u9650\u8bbe\u7f6e\u3002</p>"},{"location":"MIT6.828/Lab%202%3A%20Memory%20Management/#3-questions","title":"3. Questions","text":"<p>Question</p> <ol> <li> <p>What entries (rows) in the page directory have been filled in at this point? What addresses do they map and where do they point? In other words, fill out this table as much as possible:</p> <p>\u5bf9\u7167\u524d\u9762\u7684\u6253\u5370\u4fe1\u606f\u53ca<code>memlayout.h</code>\u4e2d\u7684\u865a\u62df\u5730\u5740\u5e03\u5c40\u586b\u5199\u3002</p> Entry Base Virtual Address Points to (logically): 1023 0xffc00000 Page table for top 4MB of phys memory ... ... ... 961 0xf0400000 Page table for [4,8) MB of phys memory 960 0xf0000000 Page table for [0,4) MB of phys memory 959 0xefc00000 \u5185\u6838\u6808\u7a7a\u95f4\uff08\u542b\u65e0\u6620\u5c04\u90e8\u5206\uff09 ... ... ... 957 0xef400000 UVPT 956 0xef000000 UPAGES ... ... ... </li> <li> <p>\u6211\u4eec\u5df2\u7ecf\u5c06\u5185\u6838\u548c\u7528\u6237\u73af\u5883\u653e\u5728\u540c\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4\u4e2d\u3002\u4e3a\u4ec0\u4e48\u7528\u6237\u7a0b\u5e8f\u65e0\u6cd5\u8bfb\u53d6\u6216\u5199\u5165\u5185\u6838\u5185\u5b58\uff1f\u54ea\u4e9b\u5177\u4f53\u673a\u5236\u4fdd\u62a4\u5185\u6838\u5185\u5b58\uff1f</p> <p>\u5185\u6838\u5185\u5b58\u76f8\u5173\u9875\u9762\u7684\u9875\u8868\u9879\u7684U\u4f4d\u7f6e0\uff0c\u8bbe\u4e3a\u7279\u6743\u7ea7\u9875\u9762\uff0c\u62d2\u7edd\u7528\u6237\u6001\u4e0b\u5bf9\u8fd9\u4e9b\u9875\u9762\u7684\u5bfb\u5740\uff0c\u56e0\u6b64\u7528\u6237\u7a0b\u5e8f\u65e0\u6cd5\u8bfb\u53d6\u6216\u5199\u5165\u5185\u6838\u5185\u5b58\u3002</p> <p>\u673a\u5236\u5df2\u5728\u524d\u6587\u8bf4\u660e\u3002</p> </li> <li> <p>\u8be5\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u652f\u6301\u7684\u6700\u5927\u7269\u7406\u5185\u5b58\u91cf\u662f\u591a\u5c11\uff1f\u4e3a\u4ec0\u4e48\uff1f</p> <p>2GB\u3002<code>UPAGE</code>\u7a7a\u95f4\u4e3a 4MB\uff0c\u5373\u6570\u7ec4<code>pages</code>\u6700\u591a\u53ef\u4ee5\u6709 4MB/8B = 512K \u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u7269\u7406\u9875\u9762 4KB\uff0c\u5219 512K \u4e2a\u7269\u7406\u9875\u9762\u603b\u5927\u5c0f\u4e3a 512*1024*4*1024 B = 2 GB\u3002</p> </li> <li> <p>How much space overhead is there for managing memory, if we actually had the maximum amount of physical memory? How is this overhead broken down?</p> <p>\u8fbe\u5230\u6700\u5927\u7269\u7406\u5185\u5b58\u65f6\uff0c<code>pages</code>\u9700\u8981 4MB\uff0c512K \u4e2a\u7269\u7406\u9875\u9762\u5bf9\u5e94 512K \u4e2a\u9875\u8868\u9879\uff0c\u6bcf\u4e2a\u9875\u8868\u9879 4B\uff0c\u9700\u8981 2MB \u5b58\u50a8\u5168\u90e8\u9875\u8868\u9879\u3002\u53e6\u9875\u76ee\u5f55\u8868<code>kern_pgdir</code>\u53604KB\uff08\u5b9e\u9645\u4e0a\u8c8c\u4f3c2KB\u5c31\u591f\u7528\u4e86\uff09\u3002\u6545\u5185\u5b58\u7ba1\u7406\u5f00\u9500\u4e3a 6MB + 4KB.</p> </li> <li> <p>\u91cd\u65b0\u67e5\u770b<code>kern/entry.S</code>\u548c <code>kern/entrypgdir.c</code>\u4e2d\u7684\u9875\u8868\u8bbe\u7f6e\u3002\u5728\u6211\u4eec\u5f00\u542f\u5206\u9875\u540e\uff0cEIP \u4ecd\u7136\u662f\u4e00\u4e2a\u8f83\u4f4e\u7684\u6570\u5b57\uff08\u7565\u9ad8\u4e8e 1MB\uff09\u3002\u6211\u4eec\u5728\u4ec0\u4e48\u65f6\u5019\u5207\u6362\u5230\u5728 KERNBASE \u4e4b\u4e0a\u7684 EIP \u4e0a\u8fd0\u884c\uff1f\u4ece\u542f\u7528\u5206\u9875\u5230\u5f00\u59cb\u4f7f\u7528\u9ad8\u4e8e KERNBASE \u7684 EIP \u8fd9\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u80fd\u591f\u7ee7\u7eed\u4f7f\u7528\u4f4e EIP \uff1f\u4e3a\u4ec0\u4e48\u8fd9\u79cd\u5207\u6362\u662f\u5fc5\u8981\u7684\uff1f</p> <p>\u5728<code>kern/entry.S</code>\u7684<code>jmp *%eax</code>\u5904\u5207\u6362\u3002<code>entrypgdir.c</code>\u786c\u7f16\u7801\u4e86\u4e00\u4e2a\u9759\u6001\u9875\u8868\uff0c\u5efa\u7acb\u4e86\u865a\u62df\u5730\u5740 [0, 4M) \u5230\u7269\u7406\u5730\u5740 [0, 4M) \u7684\u6620\u5c04\uff0c\u56e0\u6b64\u5728\u5207\u6362\u4e4b\u524d\u4f4e EIP \u53ef\u7528\u3002\u5fc5\u987b\u8fdb\u884c\u5207\u6362\uff0c\u56e0\u4e3a\u5185\u6838\u503e\u5411\u4e8e\u8fd0\u884c\u5728\u5f88\u9ad8\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u4ee5\u4fdd\u8bc1\u5185\u6838\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u6709\u8db3\u591f\u7684\u5197\u4f59\u6765\u540c\u65f6\u6620\u5c04\u5230\u5b83\u4e0b\u9762\u7684\u7528\u6237\u73af\u5883\u4e2d\uff08\uff1f\u4e0d\u662f\u5f88\u786e\u5b9a\uff09</p> </li> </ol>"},{"location":"MIT6.828/Lab%202%3A%20Memory%20Management/#4-jos-monitor","title":"4. \u6311\u6218\uff1a\u6269\u5c55 JOS monitor","text":"<p>Lab 2 \u7559\u4e86\u51e0\u9053\u6311\u6218\u9898\uff0c\u6211\u83dc\uff0c\u6311\u4e2a\u6700\u7b80\u5355\u7684\u2026\u2026</p> <p>Challenge! Extend the JOS kernel monitor with commands to:</p> <ul> <li>Display in a useful and easy-to-read format all of the physical page mappings (or lack thereof) that apply to a particular range of virtual/linear addresses in the currently active address space. For example, you might enter <code>showmappings 0x3000 0x5000</code>to display the physical page mappings and corresponding permission bits that apply to the pages at virtual addresses 0x3000, 0x4000, and 0x5000.</li> <li>Explicitly set, clear, or change the permissions of any mapping in the current address space.</li> <li>Dump the contents of a range of memory given either a virtual or physical address range. Be sure the dump code behaves correctly when the range extends across page boundaries!</li> <li>Do anything else that you think might be useful later for debugging the kernel. (There's a good chance it will be!)</li> </ul> <pre><code>int mon_showmappings(int argc, char **argv, struct Trapframe *tf)\n{\nif(argc == 1 || argc &gt; 3) {\ncprintf(\"Usage: showmappings &lt;begin_addr&gt; &lt;end_addr&gt;\\n\");\nreturn 0;\n}\nuint32_t begin_addr = xtoi(argv[1]);\nuint32_t end_addr = xtoi(argv[2]);\n// cprintf(\"begin: %x, end: %x\\n\", begin_addr, end_addr);\nint i;\nfor(i = begin_addr; i &lt;= end_addr; i+=PGSIZE){\npte_t* pte = pgdir_walk(kern_pgdir, (void *)i, 0);\nif(!pte || !(*pte &amp; PTE_P)) {\ncprintf(\"missing physical page\\n\");\ncontinue;\n}\nelse {\ncprintf(\"page %x \", KADDR(PTE_ADDR(*pte)));\ncprintf(\"PTE_P: %d, PTE_W: %d, PTE_U: %d\", *pte &amp; PTE_P, (*pte &amp; PTE_W) &gt;&gt; 1, (*pte &amp; PTE_U) &gt;&gt; 2);\ncprintf(\"\\n\");\n}\n}\nreturn 0;\n}\n</code></pre> <pre><code>int mon_change_mappings_permission(int argc, char** argv, struct Trapframe *tf)\n{\nif(argc == 1 || argc &gt; 4) {\ncprintf(\"Usage: chmapper &lt;addr&gt; &lt;set|clear&gt; &lt;PTE_W|PTE_U&gt;\\n\");\nreturn 0;\n}\nuint32_t addr = xtoi(argv[1]);\npte_t* pte = pgdir_walk(kern_pgdir, (void *)addr, 0);\nif(!pte || !(*pte &amp; PTE_P)){\ncprintf(\"missing phiscal page\\n\");\nreturn 0;\n}\nif(strcmp(argv[3], \"PTE_W\") == 0){\nif(strcmp(argv[2], \"set\") == 0){\n*pte |= PTE_W;\n}\nelse if(strcmp(argv[2], \"clear\") == 0){\n*pte = *pte &amp; (~PTE_W);\n}\n}\nelse if(strcmp(argv[3], \"PTE_U\") == 0){\nif(strcmp(argv[2], \"set\") == 0){\n*pte |= PTE_U;\n}\nelse if(strcmp(argv[2], \"clear\") == 0){\n*pte = *pte &amp; (~PTE_U);\n}\n}\nelse{\ncprintf(\"Usage: chmapper &lt;addr&gt; &lt;set|clear&gt; &lt;PTE_W|PTE_U&gt;\\n\");\nreturn 0;\n}\nreturn 0;\n}\n</code></pre> <pre><code>K&gt; showmappings ef000000 ef005000\npage f011c000 PTE_P: 1, PTE_W: 0, PTE_U: 1\npage f011d000 PTE_P: 1, PTE_W: 0, PTE_U: 1\npage f011e000 PTE_P: 1, PTE_W: 0, PTE_U: 1\npage f011f000 PTE_P: 1, PTE_W: 0, PTE_U: 1\npage f0120000 PTE_P: 1, PTE_W: 0, PTE_U: 1\npage f0121000 PTE_P: 1, PTE_W: 0, PTE_U: 1\nK&gt; chmapper ef000000 set PTE_W\nK&gt; showmappings  ef000000  ef000000\npage f011c000 PTE_P: 1, PTE_W: 1, PTE_U: 1\nK&gt; chmapper ef000000 clear PTE_W\nK&gt; showmappings  ef000000  ef000000\npage f011c000 PTE_P: 1, PTE_W: 0, PTE_U: 1\n</code></pre>"},{"location":"MIT6.828/Lab%202%3A%20Memory%20Management/#_1","title":"\u53c2\u8003\u8d44\u6599","text":"<ol> <li>xv6 - Chapter 2 Page tables</li> <li>https://github.com/Clann24/jos/tree/master/lab2</li> </ol>"},{"location":"MIT6.828/Lab%203%3A%20User%20Environments/","title":"MIT 6.828-Lab3: User Environments","text":"<p>\u672c\u6b21 Lab \u4e2d\u7684 environment \u4e00\u8bcd\u53ef\u4ee5\u4e0e process \u4e92\u6362\uff0c\u4e5f\u5c31\u662f\u8bf4\u672c\u6b21 Lab \u7684\u76ee\u6807\u662f\u5b9e\u73b0\u8fdb\u7a0b\uff0c\u5373\u8fd0\u884c\u7a0b\u5e8f\u7684\u62bd\u8c61\u3002\u4f46\u6587\u6863\u4e2d\u90fd\u4f7f\u7528\u201c\u73af\u5883\u201d\u4e00\u8bcd\uff0c\u610f\u5728\u5f3a\u8c03 JOS \u7684\u201c\u73af\u5883\u201d\u4e0e Unix \u7684\u201c\u8fdb\u7a0b\u201d\u5728\u63a5\u53e3\u548c\u8bed\u4e49\u4e0a\u5747\u6709\u5dee\u5f02\u3002</p>"},{"location":"MIT6.828/Lab%203%3A%20User%20Environments/#part-a-user-environments-and-exception-handling","title":"Part A: User Environments and Exception Handling","text":""},{"location":"MIT6.828/Lab%203%3A%20User%20Environments/#1","title":"1. \u7528\u6237\u73af\u5883\u7684\u7ba1\u7406\u3001\u521b\u5efa\u4e0e\u8fd0\u884c","text":"<p>\u5982\u679c\u5b66\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\uff0c\u5c31\u4f1a\u77e5\u9053\u64cd\u4f5c\u7cfb\u7edf\u901a\u8fc7\u6570\u636e\u7ed3\u6784 PCB \u6765\u8bb0\u5f55\u8fdb\u7a0b\u4fe1\u606f\u3002\u5728 JOS \u4e2d\u540c\u6837\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u8bb0\u5f55\u7528\u6237\u73af\u5883\u4fe1\u606f\u3002\u8be5\u6570\u636e\u7ed3\u6784<code>env</code>\u5df2\u58f0\u660e\u5728\u6587\u4ef6<code>inc/env.h</code>\u4e2d\uff0c\u5b9a\u4e49\u4f4d\u4e8e\u6587\u4ef6<code>kern/env.c</code>\u3002</p> <p>\u9996\u5148\uff0c\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u7ba1\u7406\u591a\u4e2a\u73af\u5883\uff0c\u5728<code>kern/env.c</code>\u4e2d\uff1a</p> <p><pre><code>struct Env *envs = NULL;        // All environments\nstruct Env *curenv = NULL;      // The current env\nstatic struct Env *env_free_list;   // Free environment list\n// (linked by Env-&gt;env_link)\n</code></pre> - <code>envs</code>\uff1a\u662f\u4e00\u4e2a\u6570\u7ec4\u7684\u6307\u9488\u3002JOS \u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u4fdd\u5b58\u6240\u6709\u6fc0\u6d3b\u7684\u7528\u6237\u73af\u5883\u7684<code>Env</code>\u7ed3\u6784\u3002\u8fd9\u4e2a\u6570\u7ec4\u7684\u6700\u5927\u5927\u5c0f\u7531<code>NENV</code>\u9650\u5236\uff0c<code>NENV</code>\u4e3a\u4e00\u4e2a\u5e38\u91cf\uff0c\u5b9a\u4e49\u5728<code>inc/env.h</code>\u4e2d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u540c\u4e00\u65f6\u523b\uff0c\u7cfb\u7edf\u6700\u591a\u652f\u6301<code>NENV</code>\u4e2a\u7528\u6237\u73af\u5883\u5b58\u5728\u3002 - <code>curenv</code>\uff1a\u7528\u4e8e\u8ffd\u8e2a\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u73af\u5883\u3002 - <code>env_free_list</code>\uff1a\u4e3a\u4e00\u4e2a<code>Env</code>\u94fe\u8868\uff0c\u4fdd\u5b58\u672a\u88ab\u6fc0\u6d3b\u7684\u73af\u5883\u3002\u53ef\u4ee5\u901a\u8fc7\u8be5\u94fe\u8868\u7684\u589e\u5220\u6765\u8fdb\u884c\u73af\u5883\u7684\u7ba1\u7406\uff08\u5982\u521b\u5efa\u3001\u7ed3\u675f\u56de\u6536\u7b49\uff09\u3002</p> <p>\u7136\u540e\uff0c\u6765\u4e86\u89e3<code>Env</code>\u4e2d\u90fd\u6709\u54ea\u4e9b\u5b57\u6bb5\uff1a</p> <pre><code>struct Env {\nstruct Trapframe env_tf;\n// \u5f53\u73af\u5883\u88ab\u5207\u6362/\u4e2d\u65ad\u65f6\uff0c\u8be5\u73af\u5883\u6240\u4f7f\u7528\u7684\u91cd\u8981\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\uff0c\u5c06\u88ab\u4fdd\u5b58\u5728env_tf\u4e2d\n// \u5373\u7528\u4e8e\u4fdd\u5b58\u6240\u8c13\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u7684\u53d8\u91cf\nstruct Env *env_link;\n// \u6307\u5411env_free_list\u4e2d\u7684\u4e0b\u4e00\u4e2a\u7a7a\u95f2Env\nenvid_t env_id;\n// \u73af\u5883\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff0c32\u4f4d\u6574\u578b\uff0c\u6709\u4e09\u4e2a\u90e8\u5206\uff1a\u72b6\u6001\u6807\u5fd7\u4f4d\u3001\u552f\u4e00\u6807\u5fd7\u5b57\u6bb5\u3001Env\u4e0b\u6807\n// \u7cfb\u7edf\u4e2d\u5148\u540e\u6fc0\u6d3b\u7684\u4e24\u4e2a\u73af\u5883\u53ef\u80fd\u4f7f\u7528\u76f8\u540c\u7684Env\u4e0b\u6807\uff0c\u4f46\u4f1a\u62e5\u6709\u4e0d\u540c\u7684\u552f\u4e00\u6807\u5fd7\u5b57\u6bb5\nenvid_t env_parent_id;\n// \u7236\u73af\u5883\u7684Id\uff0c\u8bb0\u5f55\u672c\u73af\u5883\u7531\u8c01\u521b\u5efa\nenum EnvType env_type; // \u73af\u5883\u7c7b\u578b\uff0c\u503c\u901a\u5e38\u662f ENV_TYPE_USER\n// \u540e\u7eedLab\u4f1a\u51fa\u73b0\u66f4\u591a\u73af\u5883\u7c7b\u578b\nunsigned env_status;        // \u503c\uff1aENV_FREE\u3001ENV_DYING\u3001ENV_RUNNABLE\u3001ENV_RUNNING\u3001ENV_NOT_RUNNABLE\n// \u672a\u6fc0\u6d3b\u3001\u7ed3\u675f\u6001\u3001\u5c31\u7eea\u6001\u3001\u8fd0\u884c\u6001\u3001\u4e0d\u53ef\u8fd0\u884c\uff08\u5982\u963b\u585e\uff09\nuint32_t env_runs;\n// \u8fd0\u884c\u6b21\u6570\npde_t *env_pgdir;\n// \u9875\u76ee\u5f55\u6307\u9488\uff0c\u8be5\u9875\u76ee\u5f55\u7ba1\u7406\u5f53\u524d\u73af\u5883\u4f7f\u7528\u7684\u6240\u6709\u9875\u8868\u3002\n};\n</code></pre> <p>JOS \u4e2d\uff0c\u540c\u4e00\u65f6\u95f4\u5728\u5185\u6838\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u73af\u5883\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\uff0c\u56e0\u6b64 JOS \u53ea\u9700\u8981\u4e00\u4e2a\u5185\u6838\u6808\u3002</p> <p>\u5728\u521b\u5efa\u4e00\u4e2a\u7528\u6237\u73af\u5883\u4e4b\u524d\uff0c\u5148\u6765\u521d\u59cb\u5316\u7cfb\u7edf\u4e2d\u7528\u4e8e\u7ba1\u7406\u7528\u6237\u73af\u5883\u7684\u6570\u7ec4<code>envs</code>\u3002</p> <p>\u7ec3\u4e60 1\uff1a\u4fee\u6539<code>kern/pmap.c</code>\u4e2d\u7684<code>mem_init()</code>\u51fd\u6570\uff0c\u5b9e\u73b0<code>envs</code>\u6570\u7ec4\u7684\u5206\u914d\u548c\u6620\u5c04\u3002\u6ce8\u610f\uff0c<code>envs</code>\u6570\u7ec4\u6240\u4ee3\u8868\u7684\u5185\u5b58\u7a7a\u95f4\u9700\u8981\u88ab\u6620\u5c04\u5230\u53ea\u8bfb\u6570\u7ec4<code>UENVS</code>\u4e2d\uff08<code>inc/memlayout.h</code>\u5b9a\u4e49\uff09\uff0c\u4ee5\u4fbf\u7528\u6237\u8fdb\u7a0b\u8bfb\u53d6\u3002\u5b8c\u6210\u540e\u8fd0\u884c\u4ee3\u7801\uff0c\u786e\u4fdd<code>check_kern_pgdir()</code>\u901a\u8fc7\u3002</p> <p>\u5728 Lab2 \u4e2d\uff0c\u6211\u4eec\u5b8c\u6210\u7684<code>mem_init()</code>\u51fd\u6570\u7684\u6267\u884c\u6d41\u7a0b\u4e3a\uff1a<code>i386_detect_memory</code>\u2192<code>boot_alloc</code>\u2192<code>page_init</code>\u3002</p> <p>\u73b0\u5728\u9700\u8981\u5728<code>page_init</code>\u4e4b\u524d\u521d\u59cb\u5316<code>envs</code>\u6570\u7ec4\uff0c\u901a\u8fc7<code>boot_alloc</code>\u5206\u914d\u5927\u5c0f\u4e3a<code>NENV * sizeof(struct Env)</code>\u7684\u5185\u5b58\u7a7a\u95f4\u7ed9\u5b83\u5373\u53ef\u3002</p> <pre><code>void\nmem_init(void)\n{\n...\n//////////////////////////////////////////////////////////////////////\n// Make 'envs' point to an array of size 'NENV' of 'struct Env'.\n// LAB 3: Your code here.\nenvs = boot_alloc(NENV * sizeof(struct Env));\n...\n}\n</code></pre> <p>\u867d\u7136\u8f83 Lab2 \u591a\u5206\u914d\u4e86\u4e00\u6bb5\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u540e\u9762\u7684<code>page_init</code>\u65e0\u9700\u6539\u52a8\uff0c\u56e0\u4e3a\u5b83\u662f\u4ece<code>boot_alloc(0)</code>\uff08\u76f4\u63a5\u8fd4\u56de<code>boot_alloc</code>\u5206\u914d\u7a7a\u95f4\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5185\u5b58\u5730\u5740\uff09\u5f00\u59cb\u8fdb\u884c\u9875\u9762\u521d\u59cb\u5316\u7684\u3002</p> <p>\u5206\u914d\u7a7a\u95f4\u4e4b\u540e\uff0c\u8fd8\u8981\u4eff\u7167<code>pages</code>\u5230<code>UPAGES</code>\u7684\u6620\u5c04\u64cd\u4f5c\uff0c\u5efa\u7acb<code>envs</code>\u5230<code>UENVS</code>\u7684\u6620\u5c04\uff1a</p> <pre><code>//////////////////////////////////////////////////////////////////////\n// Map the 'envs' array read-only by the user at linear address UENVS\n// (ie. perm = PTE_U | PTE_P).\n// Permissions:\n//    - the new image at UENVS  -- kernel R, user R\n//    - envs itself -- kernel RW, user NONE\n// LAB 3: Your code here.\nboot_map_region(kern_pgdir, UENVS, PTSIZE, PADDR(envs), PTE_U);\n</code></pre> <p>\u6700\u540e<code>make qemu-nox</code>\u8fd0\u884c JOS\uff0c\u663e\u793a\u4ee5\u4e0b\u4fe1\u606f\uff0c\u8868\u793a\u7ec3\u4e601\u5b8c\u6210\u3002</p> <pre><code>...\ncheck_page_free_list() succeeded!\ncheck_page_alloc() succeeded!\ncheck_page() succeeded!\ncheck_kern_pgdir() succeeded!\ncheck_page_free_list() succeeded!\ncheck_page_installed_pgdir() succeeded!\nkernel panic at kern/env.c:461: env_run not yet implemented\nWelcome to the JOS kernel monitor!\n...\n</code></pre> <p>\u663e\u7136\u73af\u5883\u7684\u521d\u59cb\u5316\u662f\u7cfb\u7edf\u521d\u59cb\u5316\u7684\u4e00\u90e8\u5206\u3002\u56de\u987e Lab 1\uff0c\u4f7f\u7528\u6c47\u7f16\u4ee3\u7801\u8fdb\u884c\u4e86\u90e8\u5206\u521d\u59cb\u5316\u5de5\u4f5c\uff0c\u5e76\u51c6\u5907\u597d C \u7684\u8fd0\u884c\u73af\u5883\u4e4b\u540e\uff0cCPU \u63a7\u5236\u6743\u8f6c\u4ea4\u7ed9\u4e86 <code>kern/init.c</code>\u4e2d\u7684<code>i386_init()</code>\u51fd\u6570\u3002\u5728<code>mem_init()</code>\u521d\u59cb\u5316\u5185\u5b58\u4e4b\u540e\uff0cLab 3 \u5728\u5176\u540e\u65b0\u589e\u4e86\u73af\u5883\u521d\u59cb\u5316<code>env_init()</code>\u548c\u81ea\u9677\u529f\u80fd\u7684\u521d\u59cb\u5316<code>trap_init()</code>\u3002</p> <p>\u7ec3\u4e60 2\uff1a\u5b8c\u6210<code>kern/env.c</code>\u6587\u4ef6\u4e2d\u7684\u4ee5\u4e0b\u51fd\u6570\uff1a</p> <ul> <li>env_init(): \u521d\u59cb\u5316<code>envs</code>\u6570\u7ec4\u4e2d\u7684\u6240\u6709<code>Env</code>\u7ed3\u6784\u4f53\uff0c\u5e76\u628a\u5b83\u4eec\u52a0\u5165\u5230<code>env_free_list</code>\u4e2d\u3002\u8be5\u51fd\u6570\u8fd8\u4f1a\u8c03\u7528<code>env_init_percpu</code>\uff0c\u8fd9\u4e2a\u51fd\u6570\u8d1f\u8d23\u521d\u59cb\u5316\u6bb5\u5f0f\u5185\u5b58\u7ba1\u7406\u673a\u5236\uff0c\u5e76\u8ba9\u5b83\u6240\u7ba1\u7406\u7684\u6bb5\u5177\u6709\u4e24\u79cd\u4f18\u5148\u7ea7\u8bbe\u7f6e\uff1a\u5185\u6838\u8fd0\u884c\u65f6\u76840\u4f18\u5148\u7ea7\u3001\u7528\u6237\u8fd0\u884c\u65f6\u76843\u4f18\u5148\u7ea7\u3002</li> <li>env_setup_vm(): \u4e3a\u4e00\u4e2a\u65b0\u7684\u7528\u6237\u73af\u5883\u5206\u914d\u4e00\u4e2a\u9875\u76ee\u5f55\u8868\uff0c\u5e76\u4e14\u521d\u59cb\u5316\u8fd9\u4e2a\u7528\u6237\u73af\u5883\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u548c\u5185\u6838\u76f8\u5173\u7684\u90e8\u5206\u3002</li> <li>region_alloc(): \u4e3a\u7528\u6237\u73af\u5883\u5206\u914d\u7269\u7406\u5730\u5740\u7a7a\u95f4\u3002</li> <li>load_icode(): \u7c7b\u4f3c\u4e8e boot loader \u7684\u529f\u80fd\uff0c\u8d1f\u8d23\u89e3\u6790\u4e00\u4e2a ELF \u955c\u50cf\uff0c\u5e76\u5c06\u5b83\u7684\u5185\u5bb9\u52a0\u8f7d\u5230\u7528\u6237\u73af\u5883\u3002</li> <li>env_create(): \u901a\u8fc7<code>env_alloc</code>\u51fd\u6570\u5206\u914d\u4e00\u4e2a\u7528\u6237\u73af\u5883\uff0c\u5e76\u8c03\u7528<code>load_icode</code>\u51fd\u6570\uff0c\u52a0\u8f7d\u4e00\u4e2a ELF \u955c\u50cf\u5230\u7528\u6237\u73af\u5883</li> <li>env_run(): \u5728\u7528\u6237\u6a21\u5f0f\u4e0b\uff0c\u5f00\u59cb\u8fd0\u884c\u4e00\u4e2a\u7528\u6237\u73af\u5883\u3002</li> </ul> <p>\u63d0\u793a\uff1a\u4f7f\u7528<code>%e</code>\u6765\u6253\u5370\u9519\u8bef\u4ee3\u7801\u7684\u8be6\u7ec6\u63cf\u8ff0\uff0c\u793a\u4f8b\uff1a</p> <pre><code>r = -E_NO_MEM;\npanic(\"env_alloc: %e\",r);\n</code></pre> <p>\u5148\u4ece\u6574\u4e2a JOS \u521d\u59cb\u5316\u6d41\u7a0b\u7684\u89d2\u5ea6\u7406\u89e3\u4e00\u4e0b\u6211\u4eec\u6b63\u5728\u54ea\u91cc\u5de5\u4f5c\uff1a</p> <ul> <li>start( kern/entry.S)</li> <li>i386_init( kern/init.c)<ul> <li>cons_init</li> <li>mem_init\uff08\u5728 Lab2 \u5df2\u5b8c\u6210\uff09</li> <li>env_init</li> <li>trap_init\uff08\u5728\u4e0b\u4e00\u4e2a\u7ec3\u4e60\u5b8c\u6210\uff09</li> <li>env_create</li> <li>env_run<ul> <li>env_pop_tf</li> </ul> </li> </ul> </li> </ul> <p>\u5bf9\u4e8e<code>env_init()</code>\uff0c\u53c2\u8003\u6ce8\u91ca\u53ef\u77e5\u9700\u8981\u5b8c\u6210\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <ol> <li>\u5c06<code>envs</code>\u4e2d\u7684\u6240\u6709<code>Env</code>\u6807\u8bb0\u4e3a free\uff0c <code>env_id</code>\u8bbe\u4e3a 0</li> <li><code>Env</code>\u9700\u8981\u4e25\u683c\u6309\u7167\u5728<code>envs</code>\u7684\u987a\u5e8f\u63d2\u5165\u5230<code>env_free_list</code>\u4e2d\u3002\u8fd9\u6837\uff0c\u7b2c\u4e00\u6b21\u8c03\u7528<code>env_alloc()</code>\u65f6\u8fd4\u56de\u7684\u4f1a\u662f<code>envs[0]</code>\u3002</li> </ol> <pre><code>void\nenv_init(void)\n{\n// Set up envs array\n// LAB 3: Your code here.\nfor(int i = 0; i &lt; NENV; i++){\nenvs[i].env_status = ENV_FREE;\nenvs[i].env_id = 0;\nif(i == NENV - 1){\nenvs[i].env_link = NULL;\n}\nelse envs[i].env_link = &amp;envs[i+1];\n}\nenv_free_list = &amp;envs[0];\n\n// Per-CPU part of the initialization\nenv_init_percpu();\n}\n</code></pre> <p>\u5bf9\u4e8e<code>env_setup_vm()</code>\uff0c\u5b83\u4e3a\u7528\u6237\u73af\u5883<code>e</code>\u5206\u914d\u9875\u76ee\u5f55\u8868\u5e76\u8bbe\u7f6e\u8868\u4e2d\u4e0e\u5185\u6838\u76f8\u5173\u7684\u9875\u76ee\u5f55\u9879\uff0c\u56e0\u4e3a\u8fd9\u90e8\u5206\u9875\u76ee\u5f55\u9879\u5bf9\u4e8e\u6240\u6709\u7528\u6237\u73af\u5883\u6765\u8bf4\u90fd\u662f\u76f8\u540c\u7684\uff0c\u90fd\u662f\u5171\u7528\u5185\u6838\u9875\u76ee\u5f55\u8868\u4e2d\u7684\u5bf9\u5e94\u9879\u3002</p> <pre><code>static int\nenv_setup_vm(struct Env *e)\n{\nint i;\nstruct PageInfo *p = NULL;\n\n// \u4e3a\u9875\u76ee\u5f55\u8868\u7533\u8bf7\u7a7a\u95f4\nif (!(p = page_alloc(ALLOC_ZERO)))\nreturn -E_NO_MEM;\n// LAB 3: Your code here.\ne-&gt;env_pgdir = (pde_t*)page2kva(p); // \u9875\u76ee\u5f55\u7684\u865a\u62df\u5730\u5740\uff0c\u8bbe\u4e3a\u73af\u5883e\u7684env_pgidr\np-&gt;pp_ref++;\nfor(i = 0;i &lt; PDX(UTOP); i++){ //\u904d\u5386\u4f4d\u4e8eUTOP\u4e0b\u65b9\u7684\u9875\u76ee\u5f55\u9879\ne-&gt;env_pgdir[i] = 0; //\u5168\u90e8\u521d\u59cb\u5316\u4e3a0\n}\nfor(i = PDX(UTOP); i &lt; NPDENTRIES; i++){\ne-&gt;env_pgdir[i] = kern_pgdir[i]; //UTOP\u4ee5\u4e0a\u7684\u90e8\u5206\u5168\u90e8\u5171\u7528\u5185\u6838\u9875\u76ee\u5f55\u8868\u7684\u9875\u76ee\u5f55\u9879\n}\n// UVPT maps the env's own page table read-only.\n// Permissions: kernel R, user R\ne-&gt;env_pgdir[PDX(UVPT)] = PADDR(e-&gt;env_pgdir) | PTE_P | PTE_U;\nreturn 0;\n}\n</code></pre> <p><code>region_alloc</code>\u9700\u8981\u6839\u636e\u4f20\u5165\u7684\u8d77\u59cb\u865a\u62df\u5730\u5740<code>va</code>\u548c\u7533\u8bf7\u7a7a\u95f4\u5927\u5c0f<code>len</code>\uff0c\u5206\u914d\u76f8\u5e94\u5927\u5c0f\u7684\u7269\u7406\u5185\u5b58\uff0c\u5e76\u901a\u8fc7\u65b0\u5efa\u548c\u586b\u5199\u9875\u8868\u9879\uff08<code>kern/pmap.c</code>\u4e2d\u7684<code>page_insert</code>\u7684\u529f\u80fd\uff09\u6765\u5efa\u7acb\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5185\u5b58\u4e4b\u95f4\u7684\u6620\u5c04\u3002</p> <p>\u6ce8\u610f\uff0c\u5185\u5b58\u5206\u914d\u662f\u4ee5\u9875\u4e3a\u5355\u4f4d\u7684\uff0c\u800c<code>va</code>\u548c<code>len</code>\u4e0d\u4e00\u5b9a\u4ee5\u9875\u4e3a\u5355\u4f4d\u5bf9\u9f50\u3002\u56e0\u6b64\u6700\u597d\u7684\u505a\u6cd5\u662f\u8d77\u59cb\u5730\u5740\u5411\u4e0b\u53d6\u6574\u800c\u7ed3\u675f\u5730\u5740\u5411\u4e0a\u53d6\u6574\uff0c\u4fdd\u8bc1\u5b9e\u9645\u5206\u914d\u7684\u5185\u5b58\u5927\u5c0f\u4e0d\u5c0f\u4e8e<code>len</code>\u3002</p> <pre><code>static void\nregion_alloc(struct Env *e, void *va, size_t len)\n{\nvoid* start = (void*) ROUNDDOWN((uint32_t)va, PGSIZE); // \u4ee5\u9875\u4e3a\u5355\u4f4d\uff0c\u8d77\u59cb\u5730\u5740\u5411\u4e0b\u53d6\u6574\nvoid* end = (void*) ROUNDUP((uint32_t)va + len, PGSIZE); // \u7ed3\u675f\u5730\u5740\u5411\u4e0a\u53d6\u6574\n// \u5373\u5b9e\u9645\u5206\u914d\u7684\u7269\u7406\u5185\u5b58\u4e0d\u5c0f\u4e8elen\nstruct PageInfo *p = NULL;\nvoid* i;\nfor(i = start; i &lt; end; i+=PGSIZE){\np = page_alloc(ALLOC_ZERO); //\u7533\u8bf7\u5185\u5b58\nif(!p) panic(\"region_alloc failed: allocation failed!\\n\");\n//\u586b\u5199\u9875\u8868\u9879\uff0c\u5efa\u7acb\u6620\u5c04\nif(page_insert(e-&gt;env_pgdir, p, i, PTE_W | PTE_U))\npanic(\"region_alloc failed: page_insert failed!\\n\");\n}\n}\n</code></pre> <p>\u5728\u4e3a\u7528\u6237\u73af\u5883\u51c6\u5907\u597d\u5185\u5b58\u7a7a\u95f4\u4e4b\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7<code>load_icode</code>\u52a0\u8f7d\u7528\u6237\u7a0b\u5e8f\u4e86\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u8f7d\u5165\u7684\u662f\u4e00\u4e2a ELF \u955c\u50cf\u6587\u4ef6\uff0c\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e<code>boot/main.c</code>\u4e2d\u5c06 JOS \u7684 ELF \u6587\u4ef6\u8f7d\u5165\u5185\u5b58\u3002</p> <pre><code>static void\nload_icode(struct Env *e, uint8_t *binary)\n{\nstruct Proghdr *ph, *eph;\nstruct Elf* ELFHeader = (struct Elf*)binary;\nif (ELFHeader-&gt;e_magic != ELF_MAGIC)\npanic(\"load_icode error: invalid ELF image.\\n\");\n\n// \u7528\u6237\u7a0b\u5e8f\u5e94\u8be5\u88ab\u52a0\u8f7d\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u7528\u6237\u7a7a\u95f4\u7531\u7528\u6237\u73af\u5883\u9875\u76ee\u5f55 e-&gt;env_pgdir \u7ba1\u7406\n// \u4f46\u4ece\u52a0\u8f7d\u5185\u6838\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6240\u4f7f\u7528\u7684\u9875\u76ee\u5f55\u8fd8\u662f kern_pgdir\n// \u56e0\u6b64\u9700\u8981\u901a\u8fc7 lcr3(PADDR(e-&gt;env_pgdir)) \u5207\u6362\u9875\u76ee\u5f55\uff08\u5728 env_free \u51fd\u6570\u4e2d\u6709\u53c2\u8003\uff09\nlcr3(PADDR(e-&gt;env_pgdir));\n\n// \u52a0\u8f7d ELF \u4e2d\u7684\u5404\u6bb5\nph = (struct Proghdr *) ((uint8_t *) ELFHeader + ELFHeader-&gt;e_phoff);\neph = ph + ELFHeader-&gt;e_phnum;\nfor (; ph &lt; eph; ph++){\nif(ph-&gt;p_type == ELF_PROG_LOAD){ // \u53ea\u9700\u8981\u52a0\u8f7d\u6709\u8be5\u6807\u5fd7\u7684\u6bb5\nregion_alloc(e, ph-&gt;p_va, ph-&gt;p_memsz);\nmemset((void*)ph-&gt;p_va, 0, ph-&gt;p_memsz); // \u5c06\u7533\u8bf7\u5230\u7684\u7528\u6237\u7a7a\u95f4\u5148\u5168\u90e8\u521d\u59cb\u5316\u4e3a0\nmemcpy((void*)ph, (void*)ph-&gt;p_va, ph-&gt;p_filesz); // \u62f7\u8d1d\u6bb5\u5185\u5bb9\uff08\u5b9e\u9645\u5927\u5c0f\u4e3aph-&gt;p_filesze\uff09\u5230\u7528\u6237\u7a7a\u95f4\n}\n}\n// \u4e3a\u7a0b\u5e8f\u7684\u6808\u5206\u914d\u7a7a\u95f4\uff0c\u5927\u5c0f\u4e3a\u4e00\u9875\uff0c\u5730\u5740\u8303\u56f4\u4e3a USTACKTOP - PGSIZE \u5230 USTACKTOP\nregion_alloc(e, (void*)(USTACKTOP - PGSIZE), PGSIZE);\n\n// \u5c06\u5165\u53e3\u4fe1\u606f\u7ed9\u5230\u7528\u6237\u73af\u5883\ne-&gt;env_tf.tf_eip = ELFHeader-&gt;e_entry;\n\n// \u6700\u540e\u5c06\u9875\u76ee\u5f55\u5207\u6362\u56de\u53bb\nlcr3(PADDR(kern_pgdir));\n}\n</code></pre> <p>\u6700\u540e\u5728<code>env_create</code>\u4e2d\u8c03\u7528\u4e0a\u8ff0\u5b50\u51fd\u6570\uff0c\u521b\u5efa\u65b0\u7684\u7528\u6237\u73af\u5883\uff1a</p> <pre><code>void\nenv_create(uint8_t *binary, enum EnvType type)\n{\n// LAB 3: Your code here.\nstruct Env *e;\nenv_alloc(&amp;e, 0);\nload_icode(e, binary);\ne-&gt;env_type = type;\n}\n</code></pre> <p><code>env_run</code>\u7528\u6237\u73af\u5883\u6267\u884c\u7a0b\u5e8f\uff1a</p> <pre><code>void\nenv_run(struct Env *e)\n{\nif(curenv){\nif(curenv-&gt;env_status == ENV_RUNNING)\ncurenv-&gt;env_status = ENV_RUNNABLE;\n}\ncurenv = e;\ncurenv-&gt;env_status = ENV_RUNNING;\ncurenv-&gt;env_runs++;\nlcr3(PADDR(curenv-&gt;env_pgdir));\ncprintf(\"env_run success!!!\\n\"); // \u80fd\u8fd0\u884c\u5230\u8fd9\u91cc\u8bf4\u660e\u524d\u9762\u7684\u51fd\u6570\u57fa\u672c\u6b63\u786e\nenv_pop_tf(&amp;curenv-&gt;env_tf); // \u52a0\u8f7d\u7528\u6237\u73af\u5883\u4e0a\u4e0b\u6587\n}\n</code></pre> <p>\u5b8c\u6210\u4e0a\u8ff0\u51fd\u6570\u540e\uff0c<code>make qemu</code>\u8fd0\u884c\u5185\u6838\u3002\u82e5\u80fd\u6253\u5370<code>env_run success!!!</code>\uff0c\u5219\u524d\u9762\u7684\u51fd\u6570\u57fa\u672c\u6b63\u786e\u3002\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8c03\u8bd5\u65b9\u6cd5\uff0c\u5982\u679c\u5b58\u5728\u9519\u8bef\uff0c\u53ef\u4ee5\u901a\u8fc7\u6253\u5370\u4fe1\u606f\u6765\u8fdb\u4e00\u6b65\u5b9a\u4f4d\u3002</p> <p>\u7cfb\u7edf\u5728\u5b8c\u6210\u7cfb\u5217\u521d\u59cb\u5316\u4e4b\u540e\uff0c\u8fdb\u5165\u7528\u6237\u7a7a\u95f4\u5e76\u6267\u884c<code>hello</code>\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c<code>hello</code>\u7a0b\u5e8f\u4f1a\u6267\u884c\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528<code>int</code>\u3002\u6b64\u65f6\u9700\u8981\u53d1\u751f\u7528\u6237\u6001\u5230\u5185\u6838\u6001\u7684\u5207\u6362\uff0c\u4f46\u76ee\u524d JOS \u8fd8\u6ca1\u6709\u5b8c\u6210\u8fd9\u4e2a\uff0cCPU \u65e0\u6cd5\u5904\u7406\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u901a\u7528\u5f02\u5e38\u3002\u800c\u540e\u56e0\u4e3a\u540c\u6837\u7684\u539f\u56e0\uff0cCPU \u4e5f\u65e0\u6cd5\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\uff0c\u518d\u4ea7\u751f\u4e00\u4e2a<code>double fault</code>\u5f02\u5e38\uff0c\u53d1\u73b0\u4ecd\u7136\u65e0\u6cd5\u5904\u7406\uff0c\u4ea7\u751f<code>Triple fault</code>\u4e4b\u540e\uff0cCPU \u91cd\u7f6e\uff0c\u7cfb\u7edf\u91cd\u542f\uff08\u5728\u901a\u5e38\u7684 QEMU \u4e0a\u5982\u6b64\u3002\u5982\u679c\u4f7f\u7528\u8bfe\u7a0b\u914d\u5957\u7684\u8865\u4e01\u7248 QEMU \u5219\u4f1a\u505c\u6b62\u5e76\u63d0\u793a Triple fault \uff09\u3002</p> <p>\u5728<code>hello</code>\u7a0b\u5e8f\u4e2d<code>sys_cputs</code>\u51fd\u6570\u4e2d\u7684<code>int $0x30</code>\u8bbe\u7f6e\u65ad\u70b9\uff08\u5730\u5740\u53c2\u8003<code>obj/user/hello.asm</code>\uff09\uff0c\u6765\u68c0\u67e5\u524d\u9762\u6240\u6267\u884c\u7684\u4e00\u5207\u662f\u5426\u6b63\u786e\uff1a</p> <pre><code>(gdb) b *0x800b52\nBreakpoint 1 at 0x800b52\n(gdb) c\nContinuing.\nThe target architecture is set to \"i386\".\n=&gt; 0x800b52:    int    $0x30\n\nBreakpoint 1, 0x00800b52 in ?? ()\n</code></pre> <p>\u80fd\u6b63\u5e38\u8fd0\u884c\u81f3 0x800b52\uff0c \u7ec3\u4e60 2 \u5b8c\u6210\u3002</p>"},{"location":"MIT6.828/Lab%203%3A%20User%20Environments/#2","title":"2. \u4e2d\u65ad\u548c\u5f02\u5e38","text":"<p>\u7ec3\u4e60 3 \uff1a\u9605\u8bfb 80386 \u7a0b\u5e8f\u5458\u624b\u518c \u4e2d\u7684 \u7b2c 9 \u7ae0\u5f02\u5e38\u548c\u4e2d\u65ad</p> <p>\u4e2d\u65ad\u548c\u5f02\u5e38\u7684\u57fa\u672c\u6982\u5ff5\u53ca\u5176\u533a\u522b\u5728\u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u4e0a\u5b66\u8fc7\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\uff0c\u53ea\u5173\u6ce8\u5b83\u5728 80386 \u53ca JOS \u4e0a\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002</p> <p>\u4e2d\u65ad\u548c\u5f02\u5e38\u7684\u5171\u540c\u70b9\u662f\uff0c\u5f53\u5b83\u4eec\u53d1\u751f\u65f6\uff0c\u7cfb\u7edf\u8981\u8fdb\u884c\u7528\u6237\u6001\u5230\u5185\u6838\u6001\u7684\u5207\u6362\uff0c\u5373\u4e2d\u6b62\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u4fdd\u5b58\u597d\u4e0a\u4e0b\u6587\uff0c\u8ba9 CPU \u8f6c\u800c\u6267\u884c\u5bf9\u5e94\u7684\u5185\u6838\u7a0b\u5e8f\u8fdb\u884c\u4e2d\u65ad/\u5f02\u5e38\u5904\u7406\uff0c\u5904\u7406\u5b8c\u6bd5\u4e4b\u540e\u518d\u6062\u590d\u7a0b\u5e8f\u4e0a\u4e0b\u6587\uff0c\u4ece\u4e2d\u6b62\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c\u539f\u5148\u7684\u7a0b\u5e8f\u3002</p> <p>Q\uff1a\u600e\u4e48\u77e5\u9053\u8981\u6267\u884c\u54ea\u4e9b\u201c\u5185\u6838\u7a0b\u5e8f\u201d\uff1f\u201c\u5185\u6838\u7a0b\u5e8f\u201d\u53c8\u662f\u54ea\u91cc\u6765\u7684\uff1f\u4fdd\u5b58\u5728\u54ea\u91cc\uff1f</p> <p>\u4ea7\u751f\u4e2d\u65ad/\u5f02\u5e38\u7684\u539f\u56e0\u4f1a\u56e0\u4e0d\u540c\u7684\u8bbe\u5907\u3001\u9519\u8bef\u6761\u4ef6\u6216\u8bf7\u6c42\u7c7b\u522b\u800c\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u603b\u7684\u6765\u8bf4\u5b83\u4eec\u7684\u79cd\u7c7b\u662f\u6709\u9650\u7684\u4e14\u53ef\u786e\u5b9a\u7684\uff0c\u5e76\u4e3a\u5b83\u4eec\u7f16\u53f7\uff0c\u4e5f\u5c31\u662f\u4e2d\u65ad\u5411\u91cf\uff08x86 \u652f\u6301\u6700\u591a 256 \u79cd\u4e2d\u65ad/\u5f02\u5e38\uff0c\u56e0\u6b64\u4e2d\u65ad\u5411\u91cf\u662f\u4ecb\u4e8e0\u5230255\u4e4b\u95f4\u7684\u6570\u5b57\uff09\u3002</p> <p>\u4e5f\u56e0\u6b64\uff0c\u53ef\u4ee5\u4e3a\u4e0d\u540c\u4e2d\u65ad/\u5f02\u5e38\u9884\u5148\u7f16\u5236\u597d\u5bf9\u5e94\u7684\u5185\u6838\u7a0b\u5e8f\u8fdb\u884c\u5904\u7406\uff0c\u5e76\u5c06\u8fd9\u4e9b\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\uff08\u5bc4\u5b58\u5668 eip \u548c cs \u7684\u503c\uff09\u4e0e\u4e2d\u65ad\u5411\u91cf\u4e00\u4e00\u5bf9\u5e94\uff0c\u8fd9\u5c31\u662f\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\uff08Interrupte Descriptor Table, IDT\uff09\u3002\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\u7531\u5185\u6838\u8bbe\u7f6e\uff0c\u9a7b\u7559\u5728\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u5176\u5185\u5b58\u5730\u5740\u7531\u4e13\u7528\u5bc4\u5b58\u5668 IDTR \u8d1f\u8d23\u4fdd\u5b58\u3002</p> <p>\u5728 80386 \u4e2d\uff08\u53c2\u8003\u8d44\u6599\uff09\uff0cIDT \u5305\u542b\u4e09\u79cd\u7c7b\u578b\u7684\u4e2d\u65ad\u63cf\u8ff0\u7b26\uff1a\u4efb\u52a1\u95e8\u3001\u4e2d\u65ad\u95e8\u3001\u9677\u9631\u95e8\u3002\u683c\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>JOS \u4e2d\uff0c\u90e8\u5206\u4e2d\u65ad/\u5f02\u5e38\u7c7b\u578b\u53ca\u5176\u5bf9\u5e94\u7684\u5411\u91cf\u5728<code>inc/trap.h</code>\u4e2d\u5b9a\u4e49\uff1a</p> <pre><code>// Trap numbers\n// These are processor defined:\n#define T_DIVIDE     0      // divide error\n#define T_DEBUG      1      // debug exception\n#define T_NMI        2      // non-maskable interrupt\n#define T_BRKPT      3      // breakpoint\n#define T_OFLOW      4      // overflow\n#define T_BOUND      5      // bounds check\n#define T_ILLOP      6      // illegal opcode\n#define T_DEVICE     7      // device not available\n#define T_DBLFLT     8      // double fault\n\u2026\u2026\n</code></pre> <p>\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868 IDT \u5219\u5b9a\u4e49\u5728<code>kern/trap.c</code>\u4e2d\uff1a</p> <pre><code>/* Interrupt descriptor table.  (Must be built at run time because\n * shifted function addresses can't be represented in relocation records.)\n */\nstruct Gatedesc idt[256] = { { 0 } };\n</code></pre> <p>Q\uff1a\u5982\u4f55\u4fdd\u5b58\u7a0b\u5e8f\u4e0a\u4e0b\u6587\uff1f\u53c8\u662f\u5982\u4f55\u6062\u590d\u7684\uff1f</p> <p>\u51fa\u4e8e\u5185\u6838\u5b89\u5168\u8003\u8651\uff08This save area for the old processor state must in turn be protected from unprivileged user-mode code; otherwise buggy or malicious user code could compromise the kernel.\uff09\uff0c\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u9700\u8981\u4fdd\u5b58\u5728\u5185\u6838\u7a7a\u95f4\u7684\u4e00\u4e2a\u6808\u4e0a\u3002</p> <p>\u4e3a\u4e86\u6307\u660e\u8fd9\u4e2a\u6808\u7684\u4f4d\u7f6e\uff0c\u9700\u8981\u6570\u636e\u7ed3\u6784 TTS\uff08Task State Segment\uff09\uff0c\u5b83\u4fdd\u5b58\u4e86\u8fd9\u4e2a\u6808\u7684\u6bb5\u9009\u62e9\u5b50<code>ts_ss0</code>\u548c\u6808\u6307\u9488<code>ts_esp0</code>\u3002\u4e8b\u5b9e\u4e0a TTS \u5305\u542b\u7684\u5185\u5bb9\u8fdc\u4e0d\u6b62\u8fd9\u4e24\u4e2a\uff0c\u5177\u4f53\u5b57\u6bb5\u53ef\u67e5\u770b\u5728<code>inc/mmu.h</code>\u7684<code>Taskstate</code>\u7ed3\u6784\u4f53\u58f0\u660e\u3002\u4f46\u5728 JOS \u4e2d\uff0c\u53ea\u6709\u4e0a\u8ff0\u4e24\u4e2a\u5b57\u6bb5\u88ab\u4f7f\u7528\u3002</p> <p>\u5f53\u9700\u8981\u4fdd\u5b58\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u65f6\uff0c\u5904\u7406\u5668\u9996\u5148\u4ece TSS \u4e2d\u8bfb\u53d6<code>ts_ss0</code>\u548c<code>ts_esp0</code>\uff0c\u5e76\u636e\u6b64\u5207\u6362\u5230\u65b0\u6808\uff1b\u63a5\u7740\u5f80\u65b0\u6808\u538b\u5165\u7a0b\u5e8f\u4e0a\u4e0b\u6587\uff08\u5177\u4f53\u4e3a\u5bc4\u5b58\u5668 SS\u3001ESP\u3001EFLAGS\u3001CS\u3001EIP \u7684\u503c\uff0c\u4ee5\u53ca err code\uff08\u5982\u679c\u6709\uff09\uff09\uff1b\u7136\u540e\uff0c\u5904\u7406\u5668\u8bbf\u95ee IDT\uff0c\u53d6\u51fa\u5bf9\u5e94\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684 cs\u3001eip \u503c\uff0c\u8df3\u8f6c\u81f3\u8be5\u7a0b\u5e8f\u3002</p> <p>Q\uff1a\u5982\u679c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u6267\u884c\u65f6\u53c8\u53d1\u751f\u4e2d\u65ad\uff08\u5d4c\u5957\u4e2d\u65ad\uff09\uff0c\u8fd8\u9700\u8981\u5207\u6362\u6808\u5417\uff1f</p> <p>\u53ea\u6709\u5f53\u4e2d\u65ad\u53d1\u751f\u5bfc\u81f4\u4ece\u7528\u6237\u6001\u5207\u6362\u5230\u5185\u6838\u6001\u65f6\uff0c\u624d\u9700\u8981\u5207\u6362\u6808\u3002\u5982\u679c\u53d1\u751f\u4e86\u5d4c\u5957\u4e2d\u65ad\uff0c\u5219\u7b2c\u4e8c\u6b21\u4e2d\u65ad\u53d1\u751f\u65f6\u5904\u7406\u5668\u5df2\u7ecf\u4f4d\u4e8e\u5185\u6838\u6001\uff0c\u5219\u9700\u8981\u4fdd\u5b58\u7684\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u4f1a\u88ab\u7ee7\u7eed\u538b\u6808\u3002\u8fd9\u6837\uff0c\u5f53\u5904\u7406\u5668\u5904\u7406\u5b8c\u7b2c\u4e8c\u6b21\u4e2d\u65ad\u65f6\uff0c\u53ea\u9700\u8981\u7b80\u5355\u5730\u5f39\u51fa\u6808\u4e2d\u6570\u636e\u5c31\u53ef\u4ee5\u56de\u5230\u7b2c\u4e00\u6b21\u4e2d\u65ad\u7684\u5904\u7406\u7a0b\u5e8f\u7ee7\u7eed\u6267\u884c\u3002</p> <p>\u7136\u800c\uff0c\u5982\u679c\u6808\u7a7a\u95f4\u4e0d\u8db3\uff0c\u4e0d\u80fd\u7ee7\u7eed\u5c06\u6570\u636e\u538b\u6808\uff0c\u5219\u5904\u7406\u5668\u65e0\u6cd5\u56de\u5230\u539f\u6765\u72b6\u6001\uff0c\u4f1a\u81ea\u52a8\u91cd\u542f\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0 JOS \u4e2d\u5411\u91cf\u53f7 0 \u5230 31 \uff08\u5185\u90e8\u5f02\u5e38\uff09\u7684\u5f02\u5e38\u6355\u83b7\u3002\u5728\u8fd9\u90e8\u5206\u6211\u4eec\u6682\u65f6\u4e0d\u5177\u4f53\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u51fd\u6570\uff0c\u6240\u4ee5\u4ec5\u4ec5\u662f\u6355\u83b7\u800c\u975e\u5904\u7406.</p> <p></p> <p><code>kern/trap.c</code>\u7684<code>trap_init()</code>\u51fd\u6570\u8d1f\u8d23\u521d\u59cb\u5316 IDT\u3002\u6bcf\u4e00\u4e2a\u4e2d\u65ad/\u5f02\u5e38\u7684\u5bf9\u5e94\u5904\u7406\u51fd\u6570\u5b9a\u4e49\u5728<code>trapentry.S</code>\u4e2d\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5904\u7406\u51fd\u6570\uff0c\u9700\u8981\u5148\u5728\u6808\u4e0a\u6784\u5efa\u4e00\u4e2a Trapframe \u7ed3\u6784\u4f53\uff08\u5373\u4fdd\u5b58\u539f\u7a0b\u5e8f\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u58f0\u660e\u5728<code>inc/trap.h</code>\u4e2d\uff09\uff0c\u7136\u540e\u4ee5\u8be5 Trapframe \u7684\u5730\u5740\u4e3a\u53c2\u6570\uff0c\u8c03\u7528<code>kern/trap.c</code>\u4e2d\u7684<code>trap()</code>\u51fd\u6570\u3002<code>trap()</code>\u4f1a\u8d1f\u8d23\u5177\u4f53\u5904\u7406\u4e2d\u65ad/\u5f02\u5e38\u3002</p>"},{"location":"MIT6.828/Lab%203%3A%20User%20Environments/#3","title":"3. \u5b9e\u73b0\u5f02\u5e38\u6355\u83b7","text":"<p>\u7ec3\u4e60 4\uff1a\u7f16\u8f91 <code>kern/trapentry.S</code> \u548c <code>kern/trap.c</code> \u6587\u4ef6\uff0c\u5e76\u4e14\u5b9e\u73b0\u4e0a\u9762\u6240\u8bf4\u7684\u529f\u80fd \u3002\u5177\u4f53\u5730\uff0c\u4f60\u9700\u8981\u5b8c\u6210\uff1a</p> <ol> <li> <p>\u5728<code>trapentry.S</code>\u6587\u4ef6\u4e2d\u4e3a <code>inc/trap.h</code>\u6587\u4ef6\u4e2d\u7684\u6bcf\u4e00\u4e2a trap \u6dfb\u52a0\u5bf9\u5e94\u5904\u7406\u51fd\u6570\u3002\u53ef\u53c2\u8003\u5b8f\u5b9a\u4e49 <code>TRAPHANDLER</code> \u3001<code>TRAPHANDLER_NOEC</code></p> </li> <li> <p>\u5b9e\u73b0<code>TRAPHANDLER</code>\u6240\u5f15\u7528\u7684<code>_alltraps</code>\uff0c\u5177\u4f53\u8981\u6c42\u4e3a\uff1a</p> <ul> <li>\u628a\u503c\u538b\u5165\u5806\u6808\uff0c\u4f7f\u6808\u4e2d\u5143\u7d20\u770b\u8d77\u6765\u50cf\u4e00\u4e2a Trapframe \u7ed3\u6784\u4f53 <ul> <li>\u5c06 GD_KD \u7684\u503c\u52a0\u8f7d\u5230 %ds \u548c %es \u5bc4\u5b58\u5668\u4e2d</li> <li>\u901a\u8fc7<code>pushl %esp</code>\u6765\u5411<code>trap()</code>\u51fd\u6570\u4f20\u9012\u4e00\u4e2a\u6307\u5411 Trapframe \u7684\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u3002</li> <li><code>call trap</code>\uff08<code>trap</code>\u80fd\u8fd4\u56de\u5417\uff1f\uff09</li> </ul> </li> </ul> <p>\u8003\u8651\u4f7f\u7528<code>pushal</code>\u6307\u4ee4\u3002</p> </li> <li> <p>\u4fee\u6539<code>trap_init()</code>\u51fd\u6570\u6765\u521d\u59cb\u5316 IDT\uff0c\u4f7f\u8868\u4e2d\u6bcf\u4e00\u9879\u6307\u5411\u5b9a\u4e49\u5728<code>trapentry.S</code>\u4e2d\u7684\u5165\u53e3\u6307\u9488\u3002\u53ef\u53c2\u8003\u5b8f\u5b9a\u4e49<code>SETGATE</code>\u3002</p> </li> </ol> <p>\u5b8c\u6210\u4e4b\u540e\uff0c\u6267\u884c<code>make grade</code>\uff0c\u5e94\u901a\u8fc7<code>divzero</code>\uff0c<code>softint</code>\uff0c<code>badsegment</code>\u4e09\u4e2a\u6d4b\u8bd5\u3002\u5bf9\u5e94\u7684\u6d4b\u8bd5\u7a0b\u5e8f\u53ef\u5728<code>usr</code>\u76ee\u5f55\u4e0b\u627e\u5230\u3002</p> <p>\u5148\u6765\u8bfb\u4e00\u4e0b<code>trapentry.S</code>\u7684\u4ee3\u7801\uff1a</p> <pre><code>// TRAPHANDLER(name, num) \uff0cname\u4e3a\u5904\u7406\u51fd\u6570\u540d\uff0cnum\u5411\u91cf\u53f7\n// \u5c06\u5411\u91cf\u53f7num\u538b\u6808\u5e76\u8df3\u8f6c\u81f3_alltraps\n// \u9002\u7528\u4e8eCPU\u4f1a\u81ea\u52a8\u5c06error code\u538b\u6808\u7684traps\n#define TRAPHANDLER(name, num)                      \\\n    .globl name;        /* define global symbol for 'name' */   \\\n    .type name, @function;  /* symbol type is function */       \\\n    .align 2;       /* align function definition */     \\\n    name:           /* function starts here */      \\\n    pushl $(num);                           \\\n    jmp _alltraps\n\n// \u529f\u80fd\u540c\u4e0a\uff0c\u4f46\u9002\u7528\u4e8e\u6ca1\u6709error code\u7684traps\n// \u4f5c\u4e3a\u66ff\u4ee3\uff0c\u4f1a\u5c060\u538b\u6808\uff0c\u4ee5\u4fdd\u8bc1trap frame\u5728\u5404\u79cd\u60c5\u51b5\u4e0b\u683c\u5f0f\u7edf\u4e00\n#define TRAPHANDLER_NOEC(name, num)                 \\\n    .globl name;                            \\\n    .type name, @function;                      \\\n    .align 2;                           \\\n    name:                               \\\n    pushl $0;                           \\\n    pushl $(num);                           \\\n    jmp _alltraps\n\n.text\n</code></pre> <p>\u5173\u4e8e\u54ea\u4e9b traps \u4f1a\u538b\u6808 error code \u800c\u54ea\u4e9b\u4e0d\u4f1a\uff0c\u5728\u5b9e\u9a8c\u91cc\u597d\u50cf\u6ca1\u6709\u63d0\u793a\u2026\u2026\u4f46\u53ef\u4ee5\u76f4\u63a5\u4ece wiki \u641c\u5230\u3002\u8fd9\u91cc\u7684\u5de5\u4f5c\u5176\u5b9e\u662f\u901a\u8fc7\u4e0a\u8ff0\u4e24\u4e2a\u5b8f\u5c06\u5904\u7406\u51fd\u6570\u540d\u548c\u5411\u91cf\u53f7\u4e00\u4e00\u7ed1\u5b9a\u8d77\u6765\u3002\u5904\u7406\u51fd\u6570\u9700\u8981\u540e\u9762\u81ea\u5df1\u5b9a\u4e49\uff0c\u6240\u4ee5\u8fd9\u91cc\u81ea\u5df1\u8d77\u4e00\u5806\u51fd\u6570\u540d\u5c31\u597d\u3002</p> <pre><code>/*\n * Lab 3: Your code here for generating entry points for the different traps.\n */\n/* t_divide \u662f\u81ea\u5df1\u8d77\u7684\u51fd\u6570\u540d\uff0c\u4e0b\u540c */\nTRAPHANDLER_NOEC(t_divide, T_DIVIDE)\nTRAPHANDLER_NOEC(t_debug, T_DEBUG)\nTRAPHANDLER_NOEC(t_nmi, T_NMI)\nTRAPHANDLER_NOEC(t_brkpt, T_BRKPT)\nTRAPHANDLER_NOEC(t_oflow, T_OFLOW)\nTRAPHANDLER_NOEC(t_bound, T_BOUND)\nTRAPHANDLER_NOEC(t_illop, T_ILLOP)\nTRAPHANDLER_NOEC(t_device, T_DEVICE)\nTRAPHANDLER(t_dblflt, T_DBLFLT)\nTRAPHANDLER(t_tss, T_TSS)\nTRAPHANDLER(t_segnp, T_SEGNP)\nTRAPHANDLER(t_stack, T_STACK)\nTRAPHANDLER(t_gpflt, T_GPFLT)\nTRAPHANDLER(t_pgflt, T_PGFLT)\nTRAPHANDLER_NOEC(t_fperr, T_FPERR)\nTRAPHANDLER(t_align, T_ALIGN)\nTRAPHANDLER_NOEC(t_mchk, T_MCHK)\nTRAPHANDLER_NOEC(t_simderr, T_SIMDERR)\n</code></pre> <p>\u7136\u540e\u5b9e\u73b0<code>_alltraps</code>\u3002\u9898\u76ee\u7684\u610f\u601d\u662f\u5f97\u6309\u7ed3\u6784\u4f53<code>Trapframe</code>\u4e2d\u5b57\u6bb5\u7684\u987a\u5e8f\u6765\u5165\u6808\uff0c\u56e0\u4e3a\u51fd\u6570\u7684\u6700\u540e\u4f1a\u8c03\u7528<code>trap()</code>\uff0c\u5176\u53c2\u6570\u5c31\u662f<code>Trapframe</code>\u7684\u6307\u9488\u3002\u8fd9\u91cc\u5b9e\u9645\u4e0a\u662f\u624b\u52a8\u5b8c\u6210\u4e86C\u8bed\u8a00\u4e2d\u51fd\u6570\u8c03\u7528\u65f6\u81ea\u52a8\u8fdb\u884c\u7684\u53c2\u6570\u5165\u6808\u3002</p> <p>\u5148\u6765\u770b<code>inc/trap.h</code>\u4e2d<code>Trapframe</code>\u7684\u58f0\u660e\uff1a</p> <pre><code>struct PushRegs {\n/* registers as pushed by pusha */\nuint32_t reg_edi;\nuint32_t reg_esi;\nuint32_t reg_ebp;\nuint32_t reg_oesp;      /* Useless */\nuint32_t reg_ebx;\nuint32_t reg_edx;\nuint32_t reg_ecx;\nuint32_t reg_eax;\n} __attribute__((packed));\n\nstruct Trapframe {\nstruct PushRegs tf_regs;\nuint16_t tf_es;\nuint16_t tf_padding1;\nuint16_t tf_ds;\nuint16_t tf_padding2;\nuint32_t tf_trapno;\n/* below here defined by x86 hardware */\nuint32_t tf_err;\nuintptr_t tf_eip;\nuint16_t tf_cs;\nuint16_t tf_padding3;\nuint32_t tf_eflags;\n/* below here only when crossing rings, such as from user to kernel */\nuintptr_t tf_esp;\nuint16_t tf_ss;\nuint16_t tf_padding4;\n} __attribute__((packed));\n</code></pre> <p>\u5177\u4f53\u662f\u4ec0\u4e48\u987a\u5e8f\uff0c\u53ef\u4ee5\u6ce8\u610f\u5230\u5728\u8df3\u8f6c\u5230<code>_alltraps</code>\u4e4b\u524d\uff0c\u524d\u6587\u7684\u4e24\u4e2a\u5b8f\u5b9a\u4e49\u5df2\u7ecf\u4f9d\u6b21\u5c06 error code \u548c\u5411\u91cf\u53f7\u5165\u6808\uff0c\u5bf9\u5e94\u7684\u5c31\u662f<code>Trapframe</code>\u4e2d\u7684<code>tf_err</code>\u548c<code>tf_trapno</code>\uff0c\u7531\u6b64\u53ef\u4ee5\u63a8\u6d4b\u5165\u6808\u987a\u5e8f\u5c31\u662f\u7ed3\u6784\u4f53\u5b57\u6bb5\u4ece\u4e0b\u5f80\u4e0a\u7684\u987a\u5e8f\u3002</p> <p>\u7406\u8bba\u4e0a\u800c\u8a00\u6211\u4eec\u9700\u8981\u5c06\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u5165\u6808\uff0c\u4f46\u5177\u4f53\u662f\u54ea\u4e9b\u5bc4\u5b58\u5668\u5462\uff1f</p> <p>\u7531\u4e8e<code>_alltraps</code>\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\u4f1a\u4fee\u6539 ds \u548c es \u5bc4\u5b58\u5668\uff0c\u56e0\u6b64\u8fd9\u4e24\u4e2a\u662f\u5fc5\u987b\u5165\u6808\u7684\uff1b</p> <p>\u9898\u76ee\u4e2d\u63d0\u793a\u4f7f\u7528<code>pushal</code>\u6307\u4ee4\uff0c\u8fd9\u662f\u5c06 8 \u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u5168\u90e8\u5165\u6808\u7684\u6307\u4ee4\uff0c\u4e5f\u7528\u4e0a\u3002</p> <p>\u7f51\u4e0a\u7684\u7b54\u6848\u90fd\u53ea\u5c06\u4e0a\u8ff0\u5bc4\u5b58\u5668\u5165\u6808\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u80fd\u786e\u5b9a\u4f59\u4e0b\u7684\u5176\u4ed6\u5bc4\u5b58\u5668\u4e0d\u9700\u8981\u5165\u6808\uff0c\u8fd9\u91cc\u4e5f\u6ca1\u641e\u6e05\u695a\uff08\u53ef\u80fd\u662f\u56e0\u4e3a\u6211\u6ca1\u5b66\u6e05\u695a\u5bc4\u5b58\u5668\u2026\u2026\uff09\u3002</p> <p>\u89e3\u51b3\u4e86\u4e0a\u8ff0\u95ee\u9898\u4e4b\u540e\uff0c<code>_alltraps</code>\u7684\u4f59\u4e0b\u90e8\u5206\u76f4\u63a5\u7167\u7740\u9898\u76ee\u5199\u5c31\u597d\uff1a</p> <ul> <li>GD_KD\u7684\u5b9a\u4e49\u53ef\u5728<code>inc/memlayout.h</code>\u627e\u5230\uff1a<code>#define GD_KD 0x10 // kernel data</code>\uff0c\u8fd9\u4e2a\u5176\u5b9e\u662f\u6bb5\u9009\u62e9\u5b50\uff0c\u8f7d\u5165\u5bc4\u5b58\u5668\u5b9e\u9645\u4e0a\u662f\u8ba9CPU\u8f6c\u5411\u6267\u884c\u5185\u6838\u4ee3\u7801\u3002</li> </ul> <pre><code>/*\n * Lab 3: Your code here for _alltraps\n */\n_alltraps:\n# pushl\u4e2d\u7684l\u540e\u7f00\u8868\u793a\u64cd\u4f5c\u6570\u5927\u5c0f\u4e3a4\u5b57\u8282\uff0c\u4e5f\u5c31\u662fLab 1\u4e2d\u6808\u5143\u7d20\u7684\u5927\u5c0f\n# \u7ed3\u6784\u4f53\u58f0\u660e\u4e2d\u4ece\u4e0b\u5f80\u4e0a\u5148\u662freg_edx\uff0c\u540e\u662freg_esi\uff0c\u6240\u4ee5\u5165\u6808\u987a\u5e8f\u4e5f\u662f\u5148ds\u518des\npushl %ds\npushl %es\npushal\n\n# \u5c06GD_KD\u8f7d\u5165ds\u3001es\u5bc4\u5b58\u5668\nmovl $GD_KD, %eax\nmovw %ax, %ds\nmovw %ax, %es\n\n# \u8fd9\u91cc\u5165\u6808\u7684\u5176\u5b9e\u5c31\u662ftrap()\u6240\u9700\u8981\u7684\u53c2\u6570\uff1astruct Trapframe *tf\npushl %esp\ncall trap\n</code></pre> <p>\u6700\u540e\u662f<code>trap_init()</code>\u3002\u9700\u8981\u5411 IDT \u8868\u4e3a\u4e0a\u8ff0\u6bcf\u4e00\u4e2a\u5f02\u5e38\u8bbe\u7f6e\u5bf9\u5e94\u63cf\u8ff0\u7b26\u3002\u5148\u770b\u4e00\u4e0b\u9898\u76ee\u63d0\u793a\u7684<code>SETGATE</code>\u5b8f\uff08\u5728<code>inc/mmu.h</code>\u4e2d\uff09\uff1a</p> <pre><code>#define SETGATE(gate, istrap, sel, off, dpl)\n/*\n * \u7531\u6ce8\u91ca\u53ef\u77e5\uff1a\n * SETGATE\u5b8f\u7528\u4e8e\u8bbe\u7f6e\u4e2d\u65ad\u95e8/\u9677\u9631\u95e8\u63cf\u8ff0\u7b26\n * gate\u53c2\u6570\u6ca1\u6709\u8bf4\u660e\uff0c\u5b9e\u9645\u4e0a\u8981\u4f20\u5165\u7684\u662f\u63cf\u8ff0\u7b26\u672c\u8eab\uff0c\u5982idt[T_DIVIDE]\n * istrap: 1\u8868\u793a\u9677\u9631\u95e8\uff0c0\u8868\u793a\u4e2d\u65ad\u95e8\n * sel\uff1a\u5904\u7406\u51fd\u6570\u7684\u6bb5\u9009\u62e9\u5b50\n * off\uff1a\u5904\u7406\u51fd\u6570\u7684\u6bb5\u504f\u79fb\u91cf\n * dpl\uff1a\u63cf\u8ff0\u7b26\u7684\u7279\u6743\u7ea7\n */\n</code></pre> <p><code>gate</code>\u548c<code>istrap</code>\u90fd\u53ef\u4ee5\u5f88\u5feb\u786e\u5b9a\u8981\u5199\u4ec0\u4e48\uff1b<code>sel</code>\u4e5f\u663e\u7136\u4f20\u5165\u5185\u6838\u4ee3\u7801\u7684\u6bb5\u9009\u62e9\u5b50<code>GD_KD</code>\uff1b<code>off</code>\u5176\u5b9e\u662f\u76f8\u5e94\u5904\u7406\u51fd\u6570\u7684\u5730\u5740\uff08C\u8bed\u8a00\u4e2d\u5c31\u662f\u4f20\u4e2a\u51fd\u6570\u540d\uff09\uff1b<code>dpl</code>\u57fa\u672c\u90fd\u8bbe\u4e3a\u5185\u6838\u7279\u6743\u7ea70\uff0c\u4f46<code>T_BRKPT</code>\u662f\u4e2a\u4f8b\u5916\uff0c\u8981\u8bbe\u6210\u7528\u6237\u7ea73\u3002\uff08\u7f51\u4e0a\u662f\u8fd9\u4e48\u5199\uff0c\u4f46\u4e0d\u77e5\u9053\u662f\u600e\u4e48\u60f3\u5230\u7684\u2026\u2026\uff09</p> <p>\u6700\u540e\u8981\u8bb0\u5f97\u58f0\u660e\u6240\u6709\u5904\u7406\u51fd\u6570\uff0c\u51fd\u6570\u540d\u8981\u548c<code>trapentry.S</code>\u4e2d\u5199\u7684\u4e00\u81f4\u3002</p> <pre><code>void\ntrap_init(void)\n{\nextern struct Segdesc gdt[];\n\n// LAB 3: Your code here.\nvoid t_divide();\nvoid t_debug();\nvoid t_nmi();\nvoid t_brkpt();\nvoid t_oflow();\nvoid t_bound();\nvoid t_illop();\nvoid t_device();\nvoid t_dblflt();\nvoid t_tss();\nvoid t_segnp();\nvoid t_stack();\nvoid t_gpflt();\nvoid t_pgflt();\nvoid t_fperr();\nvoid t_align();\nvoid t_mchk();\nvoid t_simderr();\n\nSETGATE(idt[T_DIVIDE], 0, GD_KT, t_divide, 0);\nSETGATE(idt[T_DEBUG], 0, GD_KT, t_debug, 0);\nSETGATE(idt[T_NMI], 0, GD_KT, t_nmi, 0);\nSETGATE(idt[T_BRKPT], 0, GD_KT, t_brkpt, 3);    // USER PRIVILEGE\nSETGATE(idt[T_OFLOW], 0, GD_KT, t_oflow, 0);\nSETGATE(idt[T_BOUND], 0, GD_KT, t_bound, 0);\nSETGATE(idt[T_ILLOP], 0, GD_KT, t_illop, 0);\nSETGATE(idt[T_DEVICE], 0, GD_KT, t_device, 0);\nSETGATE(idt[T_DBLFLT], 0, GD_KT, t_dblflt, 0);\nSETGATE(idt[T_TSS], 0, GD_KT, t_tss, 0);\nSETGATE(idt[T_SEGNP], 0, GD_KT, t_segnp, 0);\nSETGATE(idt[T_STACK], 0, GD_KT, t_stack, 0);\nSETGATE(idt[T_GPFLT], 0, GD_KT, t_gpflt, 0);\nSETGATE(idt[T_PGFLT], 0, GD_KT, t_pgflt, 0);\nSETGATE(idt[T_FPERR], 0, GD_KT, t_fperr, 0);\nSETGATE(idt[T_ALIGN], 0, GD_KT, t_align, 0);\nSETGATE(idt[T_MCHK], 0, GD_KT, t_mchk, 0);\nSETGATE(idt[T_SIMDERR], 0, GD_KT, t_simderr, 0);\n\n// Per-CPU setup\ntrap_init_percpu();\n}\n</code></pre> <p>\u81f3\u6b64 PartA \u7ec3\u4e60\u5168\u90e8\u5b8c\u6210\uff0c<code>make grade</code>\u68c0\u67e5\u4ee3\u7801\uff0c\u5e94\u6709\u4ee5\u4e0b\u7ed3\u679c\uff1a</p> <pre><code>divzero: OK (1.5s) \nsoftint: OK (0.9s) \nbadsegment: OK (0.9s) \nPart A score: 30/30\n</code></pre> <p>\u6311\u6218\uff01\u4f60\u73b0\u5728\u5e94\u8be5\u6709\u4e00\u5806\u76f8\u4f3c\u7684\u4ee3\u7801\uff0c\u8bd5\u7740\u7b80\u5316\u5b83\u4eec\u3002\u4fee\u6539<code>trapentry.S</code>\u4e2d\u7684\u5b8f\u5b9a\u4e49\u6765\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u8868\u683c\uff0c\u4ee5\u4fbf<code>trap.c</code>\u4f7f\u7528\u3002\u53ef\u4ee5\u4f7f\u7528.text\u548c.data\u6307\u4ee4\u5728\u6c47\u7f16\u7a0b\u5e8f\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u4e4b\u95f4\u5207\u6362\u3002</p> <p>\u95ee\u9898\uff1a</p> <ol> <li> <p>What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)</p> <p>\u56e0\u4e3a\u4e0d\u540c\u7684\u5f02\u5e38/\u4e2d\u65ad\u80af\u5b9a\u9700\u8981\u4e0d\u540c\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u6ca1\u529e\u6cd5\u901a\u7528\u540c\u4e00\u4e2a\u5904\u7406\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u6709\u4e9b\u5f02\u5e38/\u4e2d\u65ad\u5728\u5904\u7406\u4e4b\u540e\u4e0d\u9700\u8981\u56de\u5230\u539f\u7a0b\u5e8f\u7ee7\u7eed\u6267\u884c\uff0c\u5982\u539f\u7a0b\u5e8f\u6307\u4ee4\u9519\u8bef\uff1b\u800c\u6709\u4e9b\u9700\u8981\u7ee7\u7eed\u6267\u884c\u539f\u7a0b\u5e8f\uff0c\u5982\u7f3a\u9875\u5f02\u5e38\uff0c\u5728\u8c03\u9875\u4e4b\u540e\u4ecd\u9700\u7ee7\u7eed\u6267\u884c\u3002</p> </li> <li> <p>Did you have to do anything to make the <code>user/softint</code> program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but <code>softint</code>'s code says <code>int $14</code>. Why should this produce interrupt vector 13? What happens if the kernel actually allows <code>softint</code>'s <code>int $14</code> instruction to invoke the kernel's page fault handler (which is interrupt vector 14)?</p> <p><code>obj/user/softint.asm</code>\u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u7a0b\u5e8f\u8bd5\u56fe\u76f4\u63a5\u901a\u8fc7<code>int $14</code>\u6765\u5f15\u53d1 trap 14\uff08\u7f3a\u9875\u5f02\u5e38\uff09\u3002\u4f46\u5728\u7ec3\u4e60 4 \u7684\u8bbe\u7f6e\u4e2d\uff0ctrap 14\u7684\u63cf\u8ff0\u7b26\u7279\u6743\u7ea7\u4e3a 0\uff0c\u5373\u53ea\u6709\u5185\u6838\u7a0b\u5e8f\u624d\u88ab\u5141\u8bb8\u6267\u884c<code>int $14</code>\u4ee5\u8bbf\u95ee\u8be5\u63cf\u8ff0\u7b26\u3002<code>softint</code>\u4f5c\u4e3a\u7528\u6237\u7a0b\u5e8f\uff0c\u8fd0\u884c\u5728\u7528\u6237\u6001\uff0c\u5374\u5c1d\u8bd5\u6267\u884c\u7279\u6743\u6307\u4ee4\uff0c\u8fd9\u672c\u8eab\u5c31\u5e94\u89e6\u53d1\u5f02\u5e38\uff0c\u56e0\u6b64<code>softint</code>\u8fd0\u884c\u65f6\u5b9e\u9645\u5f15\u53d1\u7684\u662f trap 13.</p> </li> </ol>"},{"location":"MIT6.828/Lab%203%3A%20User%20Environments/#part-b-page-faults-breakpoints-exceptions-and-system-calls","title":"Part B: Page Faults, Breakpoints Exceptions, and System Calls","text":""},{"location":"MIT6.828/%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B/","title":"MIT 6.828 \u64cd\u4f5c\u7cfb\u7edf\u5de5\u7a0b","text":"<p>\u8bfe\u7a0b\u7f51\u7ad9\uff1ahttps://pdos.csail.mit.edu/6.828/2018/schedule.html</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","title":"\u4e8c\u5206\u67e5\u627e\u603b\u7ed3","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#1","title":"1. \u57fa\u7840\u4e8c\u5206","text":"<p>\u5728\u95ed\u533a\u95f4<code>[l,r]</code>\u67e5\u627e\u7ed9\u5b9a\u6570<code>target</code>\uff0c\u7ec8\u6b62\u6761\u4ef6<code>l&gt;r</code>\uff0c\u82e5\u627e\u4e0d\u5230\u5219\u8fd4\u56de<code>-1</code></p> <pre><code>int bs1(int nums[], int target){\nint l = 0, r = nums.length - 1; //\u5de6\u95ed\u53f3\u95ed\u533a\u95f4\nwhile(l&lt;=r){ //\u7ec8\u6b62\u6761\u4ef6l&gt;r\nint mid = (l+r)/2;\nif(nums[mid] == target) return mid;\nelse if(nums[mid] &gt; target) r = mid-1;\nelse if(nums[mid] &lt; target) l = mid+1;\n}\nreturn -1; //\u5faa\u73af\u7ec8\u6b62\u4e86\u4ecd\u627e\u4e0d\u5230\u5c31\u662f\u627e\u4e0d\u5230\uff0c\u6b64\u65f6\u641c\u7d22\u533a\u95f4\u5df2\u7a7a\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#2","title":"2. \u786e\u5b9a\u4e0b\u754c\u7684\u4e8c\u5206","text":"<p>\u5728\u95ed\u533a\u95f4<code>[l,r]</code>\u67e5\u627e\u7ed9\u5b9a\u6570<code>target</code>\uff0c\u7ec8\u6b62\u6761\u4ef6<code>l&gt;r</code></p> <ul> <li>\u82e5<code>target</code>\u5728<code>nums</code>\u4e2d\u6709\u591a\u4e2a\uff0c\u5219\u8fd4\u56de\u6700\u5c0f\u7684\u4e0b\u6807</li> <li>\u82e5<code>target</code>\u4e0d\u5b58\u5728\u4e8e<code>nums</code>\u4e2d\uff0c\u8fd4\u56de\u5927\u4e8etarget\u7684\u6700\u5c0f\u7684\u6570\u7684\u4e0b\u6807</li> <li>\u82e5<code>target</code>\u4e0d\u5b58\u5728\u4e8e<code>nums</code>\u4e2d\u4e14\u5927\u4e8e<code>nums</code>\u4e2d\u6700\u5927\u7684\u6570\uff0c\u8fd4\u56denums.length</li> </ul> <pre><code>int lower_bound(int nums[], int target) {\nint l = 0, r = nums.length - 1;\nwhile (l &lt;= r) {\nint mid = (l + r) / 2;\nif (nums[mid] == target)\nr = mid - 1 ; //\u5373\u4f7f\u627e\u5230\u4e86\u4e5f\u662f\u7ee7\u7eed\u7f29\u5c0f\u53f3\u8fb9\u754c\u800c\u975e\u8fd4\u56de\nelse if (nums[mid] &gt; target)\nr = mid - 1;\nelse if (nums[mid] &lt; target)\nl = mid + 1;\n}\nreturn l;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#3","title":"3. \u786e\u5b9a\u4e0a\u754c\u7684\u4e8c\u5206","text":"<p>\u5728\u95ed\u533a\u95f4<code>[l,r]</code>\u67e5\u627e\u7ed9\u5b9a\u6570<code>target</code>\uff0c\u7ec8\u6b62\u6761\u4ef6<code>l&gt;r</code></p> <ul> <li>\u82e5<code>target</code>\u5728<code>nums</code>\u4e2d\u6709\u591a\u4e2a\uff0c\u5219\u8fd4\u56de\u6700\u5927\u7684\u4e0b\u6807</li> <li>\u82e5<code>target</code>\u4e0d\u5b58\u5728\u4e8e<code>nums</code>\u4e2d\uff0c\u8fd4\u56de\u4e0d\u8d85\u8fc7target\u7684\u6700\u5927\u7684\u6570\u7684\u6700\u5927\u4e0b\u6807</li> <li>\u82e5<code>target</code>\u4e0d\u5b58\u5728\u4e8e<code>nums</code>\u4e2d\u4e14\u5c0f\u4e8e<code>nums</code>\u4e2d\u6700\u5c0f\u7684\u6570\uff0c\u8fd4\u56de-1</li> </ul> <pre><code>int upper_bound(int nums[], int target){\nint l = 0, r = nums.length - 1;\nwhile(l &lt;= r){\nint mid  = (l+r)/2;\nif(nums[mid] == target)\nl = mid + 1;\nelse if(nums[mid] &gt; target)\nr = mid - 1;\nelse if(nums[mid] &lt; target)\nl = mid + 1;\n}\nreturn r;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#4","title":"4. \u4e8c\u5206\u7b54\u6848","text":"<p>\u6700\u57fa\u7840\u7684\u6a21\u578b\u5c31\u662f\u731c\u6570\u5b57\u6e38\u620f\uff0c\u6bcf\u6b21\u4ee5\u4e8c\u5206\u7684\u65b9\u6cd5\u7ed9\u51fa\u4e00\u4e2a\u7b54\u6848\uff0c\u5e76\u5224\u65ad\u7b54\u6848\u662f\u5927\u4e86\u3001\u5c0f\u4e86\u8fd8\u662f\u521a\u597d\uff0c\u76f4\u5230\u5224\u65ad\u7ed3\u679c\u4e3a\u521a\u597d/\u641c\u7d22\u533a\u95f4\u4e3a\u7a7a\u4e3a\u6b62</p> <p>\u4e8c\u5206\u8fc7\u7a0b\u5957\u6a21\u677f\uff0c\u4f46<code>judge</code>\u51fd\u6570\u9700\u8981\u6839\u636e\u9898\u76ee\u6761\u4ef6\u7f16\u5199\uff0c\u4f46\u6700\u7ec8\u76ee\u7684\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5c31\u662f\u7528\u6765<code>judge</code>\u4e8c\u5206\u8fc7\u7a0b\u7ed9\u51fa\u7684\u7b54\u6848\u662f\u5927\u4e86\u3001\u5c0f\u4e86\u8fd8\u662f\u521a\u597d\u3002</p> <ul> <li> <p>1011.\u5728d\u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b</p> <pre><code>class Solution {\npublic:\n//\u5224\u65ad\u4e8c\u5206\u51fa\u7684\u8fd0\u8f7d\u80fd\u529bx\u662f\u5426\u80fd\u4f7f\u5f97\u8239\u5728days\u5929\u5185\u8fd0\u8f93\u5b8c\u8d27\u7269\nint judge(vector&lt;int&gt;&amp; weights, int x, int days){\nint cnt = 0;\nint now = 0;\nfor(int i = 0; i&lt; weights.size();i ++){\nif(now == 0 &amp;&amp; now + weights[i] &gt; x) return -1;\nif(now + weights[i] &gt; x){\ncnt ++;\nnow = 0;\ni--;\n}\nelse now += weights[i];\n}\ncnt ++;\n//cnt\u7edf\u8ba1\u6240\u9700\u7684\u5929\u6570\nif(cnt &gt; days) return -1; //\u8fd0\u8f7d\u80fd\u529b\u5c0f\u4e86\uff0c\u8981\u66f4\u5927\nelse if(cnt == days) return 0; //\u8fd0\u8f7d\u80fd\u529b\u521a\u521a\u597d\nelse return 1; // \u8fd0\u8f7d\u80fd\u529b\u5927\u4e86\uff0c\u53ef\u4ee5\u518d\u5c0f\u70b9\n}\nint shipWithinDays(vector&lt;int&gt;&amp; weights, int days) {\nint sum = 0;\nint max = 0;\nfor(int i = 0;i &lt;weights.size();i++){\nsum += weights[i];\nif(weights[i] &gt; max) max = weights[i];\n}\nint l = max, r = sum;\nwhile(l &lt;= r){\nint mid = l + (r-l)/2;\nint res = judge(weights, mid, days);\nif(res == 1){\nr = mid - 1;\n}\nelse if(res == -1){\nl = mid + 1;\n}\nelse{\nr = mid - 1;\n}\n}\nreturn l;\n}\n};\n</code></pre> </li> </ul> <ul> <li> <p>410.\u5206\u5272\u6570\u7ec4\u7684\u6700\u5927\u503c</p> <p>\u8be5\u9898\u9700\u8981\u786e\u5b9a\u7684\u662f\u4e8c\u5206\u679a\u4e3e\u7684\u5e94\u8be5\u662f\u4e2a\u4ec0\u4e48\u4e1c\u897f\u3002</p> <p>\u8981\u6c42\u5c06\u6570\u7ec4\u5212\u5206\u4e3am\u4e2a\u5b50\u6570\u7ec4\uff0c\u663e\u7136\u6709\u5f88\u591a\u79cd\u4e0d\u540c\u7684\u5212\u5206\u65b9\u5f0f\uff0c\u800c\u8fd9\u662f\u65e0\u6cd5\u679a\u4e3e\u7684</p> <p>\u518d\u770b\u9898\u76ee\u7ed9\u51fa\u7684\u5173\u952e\u8bcd\uff1a\u6700\u5927\u503c\u6700\u5c0f\u3002</p> <p>\u201c\u6700\u5c0f\u201d\u8fd9\u4e2a\u6761\u4ef6\u53ef\u4ee5\u8054\u60f3\u5230\u786e\u5b9a\u4e0b\u754c\u7684\u4e8c\u5206\u3002\u5982\u679c\u5c06\u8fd9\u4e2a\u201c\u6700\u5927\u503c\u201d\u4f5c\u4e3a\u4e8c\u5206\u679a\u4e3e\u7684\u5bf9\u8c61\uff0c\u5982\u4f55judge\u5b83\u662f\u5927\u4e86\u3001\u5c0f\u4e86\u8fd8\u662f\u521a\u597d\u5462\uff1f</p> <p>\u82e5\u6700\u5927\u503cmax\u5df2\u7ecf\u786e\u5b9a\uff0c\u5219\u6570\u7ec4\u7684\u5212\u5206\u65b9\u5f0f\u4e5f\u53ef\u4ee5\u540c\u65f6\u786e\u5b9a\u4e86\uff1a\u8d2a\u5fc3\u3002\u6bcf\u6b21\u90fd\u5c06\u5c3d\u53ef\u80fd\u591a\u7684\u5143\u7d20\u5212\u5206\u4e3a\u4e00\u7ec4\uff0c\u76f4\u5230\u5b50\u6570\u7ec4\u548c\u8d85\u51fa\u4e86\u8fd9\u4e2a\u6700\u5927\u503c\uff0c\u518d\u5f00\u65b0\u7684\u4e00\u7ec4\uff0c\u82e5\u6700\u7ec8\u5f97\u5230\u7684\u603b\u7ec4\u6570\u4e3am\uff0cmax\u5c31\u662f\u201c\u521a\u597d\u201d\uff0c\u82e5\u5c0f\u4e8em\uff0cmax\u5c31\u662f\u201c\u5927\u4e86\u201d\uff0cmax\u53ef\u4ee5\u518d\u5c0f\u4e00\u4e9b\uff0c\u4f7f\u5f97\u5b50\u6570\u7ec4\u7ec4\u6570\u66f4\u5927\u4e00\u4e9b\uff1b\u82e5\u5927\u4e8em\uff0cmax\u5c31\u662f\u201c\u5c0f\u4e86\u201d\u3002</p> <p>\u7531\u4e8e\u5b50\u6570\u7ec4\u4e2d\u81f3\u5c11\u8981\u67091\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u4e8c\u5206\u679a\u4e3e\u7684<code>l</code>\u8d77\u59cb\u503c\u5e94\u8be5\u4e3a\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\uff0c\u786e\u4fdd\u5212\u5206\u6570\u7ec4\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u7a7a\u7684\u5b50\u6570\u7ec4\u3002</p> <p>\u901a\u8fc7\u4ee5\u4e0a\u5206\u6790\uff0c\u53ef\u4ee5\u77e5\u9053\u8fd9\u9053\u9898\u672c\u8d28\u4e0a\u548c1011\u662f\u4e00\u6837\u7684\uff0c\u8fde<code>judge</code>\u51fd\u6570\u90fd\u662f\u4e00\u6837\u7684\u3002</p> <pre><code>class Solution {\npublic:\n//\u8fd9\u91cc\u4e8c\u5206\u8981\u679a\u4e3e\u7684\u662f\u5b50\u6570\u7ec4\u548c\u7684\u6700\u5927\u503c\n//\u518d\u770b\u8be5\u6700\u5927\u503c\u9650\u5236\u4e0b\u8d2a\u5fc3\u5212\u5206\u662f\u5426\u80fd\u6070\u597d\u5212\u5206\u51fa\u9898\u76ee\u8981\u6c42\u7684k\u4e2a\u5b50\u6570\u7ec4\nint judge(vector&lt;int&gt;&amp; nums, int max, int k){\nint cnt = 0;\nint now = 0;\nfor(int i = 0; i &lt; nums.size(); i ++){\nif(now + nums[i] &gt; max){\nnow = 0;\ncnt ++;\ni --;\n}\nelse now += nums[i];\n}\ncnt ++;\nif(cnt &gt; k) return -1; //\u5c0f\u4e86\nelse if(cnt &lt; k ) return 1; //\u5927\u4e86\nelse return 0;//\u521a\u597d\n\n}\nint splitArray(vector&lt;int&gt;&amp; nums, int k) {\nint sum =0, max = 0;\nfor(int i = 0; i &lt; nums.size();i++){\nsum+=nums[i];\nif(nums[i] &gt; max) max = nums[i];\n}\nint l = max, r = sum;\nwhile(l&lt;=r){\nint mid = (l + r)/2;\nint res = judge(nums, mid, k);\nif(res == -1){\nl = mid+1;\n}\nelse if(res == 1){\nr = mid -1;\n}\nelse r = mid -1;\n}\nreturn l;\n}\n};\n</code></pre> </li> </ul> <ul> <li> <p>2528.\u6700\u5927\u5316\u57ce\u5e02\u7684\u6700\u5c0f\u4f9b\u7535\u7ad9\u6570\u76ee</p> <p>\u9898\u76ee\u8868\u8ff0\u7565\u6709\u95ee\u9898\uff0c\u201d\u7535\u91cf\u201c\u8fd9\u4e2a\u8bcd\u9664\u4e86\u7ed9\u51fa\u5b9a\u4e49\u4ee5\u5916\u5c31\u518d\u4e5f\u6ca1\u51fa\u73b0\u8fc7\u4e86\uff0c\u4f46\u7ed3\u5408\u4e0a\u4e0b\u6587\u6765\u770b\uff0c\u6700\u540e\u95ee\u7684\u5176\u5b9e\u662f\u6240\u6709\u57ce\u5e02\u4e2d\u6700\u5c0f\u7535\u91cf\u7684\u6700\u5927\u503c\uff1b\u793a\u4f8b1\u7684\u89e3\u91ca\u91cc<code>- \u57ce\u5e02 0 \u7684\u4f9b\u7535\u7ad9\u6570\u76ee\u4e3a 1 + 4 = 5 \u3002</code>\u5176\u5b9e\u5e94\u8be5\u662f<code>- \u57ce\u5e02 0 \u7684\u7535\u91cf\u4e3a 1 + 4 = 5 \u3002</code></p> <ul> <li> <p>\u7b2c\u4e00\u6b65\uff0c\u786e\u5b9a\u4e8c\u5206\u6cd5</p> <p>\u5173\u952e\u8bcd<code>\u6700\u5c0f\u4f9b\u7535\u7ad9\u6570\u76ee\uff08\u5e94\u8be5\u662f\u7535\u91cf\uff09\u7684\u6700\u5927\u503c\u662f\u591a\u5c11</code>\uff0c\u201d\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\u201c\u8fd9\u79cd\u8868\u8ff0\u5341\u6709\u516b\u4e5d\u662f\u4e8c\u5206\uff0c\u4e14\u4e8c\u5206\u8981\u679a\u4e3e\u7684\u5bf9\u8c61\u5c31\u662f\u8fd9\u4e2a<code>\u6700\u5c0f\u7535\u91cf</code>.</p> <p>\u7136\u540e\u786e\u5b9a\u8d77\u59cb\u7684<code>left</code>\u548c<code>right</code>\u5e94\u8be5\u662f\u591a\u5c11\uff1a</p> <ul> <li>\u8003\u8651\u6700\u5c0f\u7535\u91cf\u7684\u4e0b\u754c\uff0c\u5efa\u989d\u5916\u4f9b\u7535\u7ad9\u53ea\u4f1a\u589e\u5927\u4e00\u4e2a\u57ce\u5e02\u7684\u7535\u91cf\uff0c\u56e0\u6b64\u521d\u59cb\u60c5\u51b5\u4e0b\u6240\u6709\u57ce\u5e02\u7535\u91cf\u7684\u6700\u5c0f\u503c\u5c31\u662f<code>left</code>\uff0c\u5373<code>left = min(power[i])</code>\uff1b</li> <li>\u8651\u6700\u5c0f\u7535\u91cf\u7684\u4e0a\u754c\uff0c\u6700\u6781\u7aef\u7684\u60c5\u51b5\u5c31\u662f\u628a\u6240\u6709\u7684$k$\u4e2a\u989d\u5916\u4f9b\u7535\u7ad9\u90fd\u5806\u5728\u521d\u59cb\u60c5\u51b5\u4e0b\u7535\u91cf\u6700\u5927\u7684\u57ce\u5e02\uff0c\u5176\u4ed6\u4efb\u4f55\u5efa\u6cd5\u6240\u80fd\u8fbe\u5230\u7684\u7535\u91cf\u90fd\u4e0d\u4f1a\u8d85\u8fc7\u8fd9\u4e2a\u503c\uff0c\u5373<code>right = max(power[i]) + k</code></li> </ul> <p>\u5206\u6790\u5230\u8fd9\u91cc\uff0c\u4e8c\u5206\u6a21\u677f\u53ef\u4ee5\u5148\u6253\u4e00\u4e2a\uff1a</p> <pre><code>//power[i]\u5373\u521d\u59cb\u65f6\u57ce\u5e02i\u7684\u7535\u91cf\uff08\u4e0d\u662f\u4f9b\u7535\u7ad9\u6570\u76ee\uff09\nint left = min(power[i]), right = max(power[i]) + k;\nwhile (left &lt;= right){\nint mid = left + (right - left)/2; //\u679a\u4e3e\u6700\u5c0f\u7535\u91cf\nif(judge(...)){ //\u5982\u679cjudge\u51fd\u6570\u8fd4\u56deTrue\uff0c\u5219mid\u8fd9\u4e2a\u6700\u5c0f\u7535\u91cf\u662f\u53ef\u4ee5\u901a\u8fc7\u5efa\u989d\u5916\u4f9b\u7535\u7ad9\u8fbe\u5230\u7684\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6700\u5c0f\u7535\u91cf\u518d\u589e\u5927\u4e00\u70b9\u8bd5\u8bd5\nleft = mid + 1;\n}\nelse{\n//\u5982\u679cjudge\u51fd\u6570\u8fd4\u56deFalse\uff0c\u5219mid\u8fd9\u4e2a\u6700\u5c0f\u7535\u91cf\u592a\u5927\u4e86\uff0c\u600e\u4e48\u5efa\u4f9b\u7535\u7ad9\u90fd\u4e0d\u53ef\u80fd\u6ee1\u8db3\uff0c\u9700\u8981\u7f29\u5c0f\u4e00\u70b9\nright = mid - 1;\n}\n}\nreturn right; //\u6c42\u7684\u662f\u6700\u5927\u503c\uff0c\u5373\u4e0a\u754c\n</code></pre> </li> </ul> <ul> <li> <p>\u7b2c\u4e8c\u6b65\uff0c\u601d\u8003\u5982\u4f55\u5224\u5b9a\u4e8c\u5206\u679a\u4e3e\u7684\u6700\u5c0f\u7535\u91cf\u662f\u5426\u7b26\u5408\u8981\u6c42\uff08\u5982\u4f55\u5199<code>judge</code>\u51fd\u6570\uff09</p> <p>\u6709\u4e86\u6700\u5c0f\u7535\u91cf<code>mid</code>\uff0c\u63a5\u4e0b\u6765\u662f\u8003\u8651\u600e\u4e48\u5efa\u4f9b\u7535\u7ad9\u4f7f\u5f97\u6240\u6709\u7684<code>power[i]</code>\u90fd<code>\u2265mid</code></p> <p>\u663e\u7136\u8fd9\u4e2a\u5efa\u6cd5\u6709\u5f88\u591a\u79cd\uff0c\u6ce8\u610f\uff0c\u5982\u679c\u5f00\u59cb\u7ea0\u7ed3\u201d\u5047\u5982\u8fd9\u6837\u5b89\u6392\u4e5f\u53ef\u4ee5\uff0c\u90a3\u6837\u5b89\u6392\u4e5f\u53ef\u4ee5\u201c\uff0c\u901a\u5e38\u7b54\u6848\u662f\u8d2a\u5fc3\u5730\u5b89\u6392</p> <p>\uff08\u5c5e\u4e8e\u662f\u4e8c\u5206\u9898\u7684\u4e00\u79cd\u5957\u8def\u5427\uff0c\u7c7b\u4f3c\u7684\u9898\u76ee\u67091011. \u5728 D \u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b\uff0c\u4e8c\u5206+\u8d2a\u5fc3\u5730\u628a\u5c3d\u53ef\u80fd\u591a\u7684\u8d27\u7269\u5b89\u6392\u5728\u540c\u4e00\u5929\u8fd0\uff1b\u4ee5\u53ca410. \u5206\u5272\u6570\u7ec4\u7684\u6700\u5927\u503c\uff0c\u4e8c\u5206+\u8d2a\u5fc3\u5730\u5c06\u5c3d\u53ef\u80fd\u591a\u7684\u5143\u7d20\u7eb3\u5165\u540c\u4e00\u4e2a\u5b50\u6570\u7ec4\uff09</p> <p>\u5047\u8bbe\u8303\u56f4<code>r=2</code>\uff0c\u6211\u4eec\u9700\u8981\u5c06<code>power[3]</code>\u589e\u5927<code>1</code>\uff0c\u5219\u8d2a\u5fc3\u5efa\u6cd5\u662f\u8ba9\u57ce\u5e023\u4f4d\u4e8e\u65b0\u5efa\u4f9b\u7535\u7ad9\u7684\u6700\u5de6\u4fa7\uff0c\u5373\u8ba9<code>power[3]</code>\u3001<code>power[4]</code>\u3001<code>power[5]</code>\u3001<code>power[6]</code>\u3001<code>power[7]</code>\u5168\u90e8\u589e\u5927<code>1</code>\u3002</p> <p>\u770b\u5f97\u51fa\u6765\u6211\u4eec\u9700\u8981\u9891\u7e41\u5730\u8fdb\u884c\u3010\u4ee4<code>power[l...r]</code>\u5168\u90e8\u52a0<code>x</code>\u3011\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u5f88\u81ea\u7136\u5730\u60f3\u5230\u5dee\u5206\u6570\u7ec4\uff08\u76f4\u63a5\u7b80\u5355\u7c97\u66b4\u6bcf\u6b21\u90fd\u904d\u5386\u52a0\u4e00\u904d\u7684\u8bdd\u4f1a\u8d85\u65f6\uff09</p> <p>\u5206\u6790\u5230\u8fd9\u91cc\uff0c\u53ef\u4ee5\u5199\u51fa<code>judge</code>\u51fd\u6570\u7684\u4f2a\u4ee3\u7801\uff1a</p> <pre><code>bool judge(vector&lt;long long&gt; diff, vector&lt;long long&gt; power, long long minPower, int k){ for(int i = 0; i &lt; power.size(); i++){\nif(i &gt; 0) power[i] = power[i-1] + diff[i];\n//\u57ce\u5e02i\u524d\u9762\u53ef\u80fd\u65b0\u5efa\u4e86\u4f9b\u7535\u7ad9\uff0c\u9700\u8981\u5148\u66f4\u65b0\u57ce\u5e02i\u7684\u7535\u91cf\nif(power[i] &lt; minPower){ long long x = minPower - power[i];\nif(k &gt; x) return false; //\u5df2\u7ecf\u4e0d\u591f\u5efa\u4e86\uff0cminPower\u592a\u5927\uff0c\u65e0\u6cd5\u8fbe\u5230\nelse{\n//\u4ee4power[i...i+2*r]\u5168\u90e8\u52a0x\ndiff[i] += x;\nif(i + 2 * r + 1 &lt; power.size()){\ndiff[i + 2 * r + 1] -= x;\n}\nk -= x;\n}\n}\n//\u66f4\u65b0\u57ce\u5e02i\u7684\u7535\u91cf\nif (i == 0)\npower[i] = diff[i];\nelse\npower[i] = power[i - 1] + diff[i];\n}\nreturn true; //\u53ef\u4ee5\u901a\u8fc7\u8d2a\u5fc3\u5730\u5efa\u4f9b\u7535\u7ad9\u4f7f\u5f97\u6240\u6709\u57ce\u5e02\u7535\u91cf\u90fd\u2265minPower\n}\n</code></pre> <p>\u5230\u8fd9\u91cc\u5176\u5b9e\u5df2\u7ecf\u57fa\u672c\u5199\u5b8c\u4e86\uff0c\u6211\u4eec\u5df2\u7ecf\u5199\u51fa\u4e86\u3010\u4e8c\u5206\u679a\u4e3e<code>minPower</code>\u3011+\u3010\u5224\u5b9a\u8fd9\u4e2a<code>minPower</code>\u662f\u5927\u4e86\u8fd8\u662f\u5c0f\u4e86\u3011\u4e24\u4e2a\u6838\u5fc3\u90e8\u5206\u3002</p> </li> </ul> <ul> <li> <p>\u8fd8\u5269\u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a<code>power</code>\u6570\u7ec4\u600e\u4e48\u6c42\uff1f</p> <p>\u7531\u9898\u610f\u77e5\uff0c\u57ce\u5e02<code>i</code>\u7684\u7535\u91cf<code>power[i]</code>\u5176\u5b9e\u5c31\u662f<code>stations[i-r...i+r]</code>\u7684\u533a\u95f4\u548c\uff0c\u5feb\u901f\u6c42\u533a\u95f4\u548c\uff0c\u90a3\u5c31\u7528\u5230\u524d\u7f00\u548c\u3002</p> <pre><code>long long sum[stations.size() + 1];\nsum[0] = 0;\nfor(int i = 1; i &lt;= stations.size(); i++){\nsum[i] = stations[i - 1] + sum[i - 1];  //\u8ba1\u7b97\u524d\u7f00\u548c\u6570\u7ec4\n}\nfor(int i = 0;i &lt; stations.size(); i++){\nint begin = 0 &gt; i - r ? 0 : i - r;\nint end = stations.size() - 1 &lt; i + r ? stations.size() - 1 : i + r;\n// \u8ba1\u7b97stations[i-r ... i+r]\u7684\u533a\u95f4\u548c\u4f5c\u4e3apower[i]\uff0c\u6ce8\u610f\u5de6\u53f3\u4e0d\u80fd\u8d8a\u754c\npower.push_back(sum[end + 1] - sum[begin]);\n}\n</code></pre> </li> </ul> </li> </ul>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#5","title":"5. \u65cb\u8f6c\u6570\u7ec4\u95ee\u9898","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_2","title":"\u601d\u8def","text":"<p>\u9898\u76ee\u7279\u70b9\u662f\u6240\u7ed9\u6570\u7ec4\u4e3a\u4e00\u4e2a\u5347\u5e8f\u6570\u7ec4\uff0c\u5206\u4e3a\u4e24\u6bb5\u8c03\u6362\u524d\u540e\u4f4d\u7f6e\u7684\u7ed3\u679c\uff0c\u7279\u70b9\u662f\u4e24\u6bb5\u5347\u5e8f\u6570\u7ec4\uff0c\u4e14\u6709<code>nums[0]&gt;nums[n-1]</code></p> <p></p> <ul> <li>\u5206\u6bb5\u5904\u7406\u6cd5<ul> <li>\u9996\u5148\u4e8c\u5206\u627e\u5230\u7b2c\u4e8c\u6bb5\u7684\u8d77\u59cb\u4e0b\u6807<code>k</code></li> <li>\u5404\u6bb5\u5404\u81ea\u8fdb\u884c\u4e8c\u5206\u641c\u7d22</li> </ul> </li> </ul>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_3","title":"\u9898\u76ee","text":"<ul> <li> <p>\u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\uff08\u4e0d\u542b\u91cd\u590d\u6570\u5b57\uff09</p> <p>\u53ea\u9700\u8981\u627e\u5230\u5206\u6bb5\u70b9<code>nums[k]</code>\u5373\u53ef</p> <p>\u7531\u4e8e<code>nums[0]&gt;nums[n-1]</code>\uff0c\u6545</p> <ul> <li>\u5f53<code>nums[mid]&lt;nums[r]</code>\u65f6\uff0c<code>mid</code>\u4e00\u5b9a\u4f4d\u4e8e\u7b2c\u4e8c\u6bb5\uff0c<code>k</code>\u53ef\u80fd\u5728<code>mid</code>\u5de6\u4fa7\uff0c\u4e5f\u53ef\u80fd\u5c31\u662f<code>mid</code>\uff0c\u56e0\u6b64\u9700\u8981<code>r = mid</code></li> </ul> <ul> <li>\u5f53<code>nums[mid]&gt;nums[r]</code>\u65f6\uff0c<code>mid</code>\u4e00\u5b9a\u4f4d\u4e8e\u7b2c\u4e00\u6bb5\uff0c<code>k</code>\u4e00\u5b9a\u5728<code>mid</code>\u53f3\u4fa7\uff0c\u56e0\u6b64\u9700\u8981<code>l = mid + 1</code></li> </ul> <ul> <li> <p>\u5f53<code>l == r</code>\u65f6\uff0c<code>l=r=mid</code>\u5373\u6240\u6c42\u4f4d\u7f6e\uff0c\u4e3a\u4e86\u8ba9\u5faa\u73af\u80fd\u7ec8\u6b62\uff0c\u5e94\u6267\u884c<code>l = mid + 1</code>\u540e\u8fd4\u56de<code>r</code>\uff0c\u6545\u8fd8\u9700\u8981\u52a0\u4e0a<code>nums[mid]==nums[r]</code>\u65f6<code>l = mid + 1</code>\uff0c\u5373\uff1a</p> <pre><code>int l = 0, r = nums.size() - 1;\nwhile(l &lt;= r){\nint mid = l + (r - l)/2;\nif(nums[mid] &lt; nums[r]) r = mid;\nelse l = mid + 1;\n}\n</code></pre> </li> </ul> <ul> <li>\u6700\u540e\u6240\u5f97<code>r</code>\u5373\u4e3a\u6240\u6c42<code>k</code></li> </ul> </li> </ul> <ul> <li> <p>\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\uff08\u4e0d\u542b\u91cd\u590d\u6570\u5b57\uff09</p> <ul> <li>\u627e\u5230\u7b2c\u4e8c\u6bb5\u7684\u8d77\u59cb\u4e0b\u6807<code>k</code></li> <li>\u5206\u4e3a\u524d\u540e\u4e24\u6bb5\u5404\u81ea\u8fdb\u884c\u4e8c\u5206\u67e5\u627e</li> </ul> <pre><code>class Solution {\npublic:\nint find(vector&lt;int&gt;&amp; nums, int l, int r, int x){\nwhile(l&lt;=r){\nint mid = l + (r-l)/2;\nif(nums[mid] == x) return mid;\nelse if(nums[mid] &lt; x) l = mid +1;\nelse r = mid - 1;\n}\nreturn -1;\n}\nint search(vector&lt;int&gt;&amp; nums, int target) {\nint l = 0, r = nums.size()-1;\nwhile(l&lt;=r){\nint mid = l + (r-l)/2;\nif(nums[mid] &gt;= nums[r]) l = mid + 1;\nelse r = mid;\n}\nint pos = find(nums, 0, r-1, target);\nif(pos == -1) pos = find(nums, r, nums.size()-1, target);\nreturn pos;\n}\n};\n</code></pre> </li> </ul> <ul> <li> <p>\u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c II\uff08\u542b\u91cd\u590d\u6570\u5b57\uff09</p> <p>\u7531\u4e8e\u542b\u91cd\u590d\u6570\u5b57\uff0c\u6211\u4eec\u5e76\u4e0d\u80fd\u9ed8\u8ba4<code>nums[mid]==nums[r]</code>\u65f6<code>mid</code>\u4e00\u5b9a\u5c31\u662f\u6700\u5c0f\u503c\u7684\u4e0b\u6807\u3002</p> <p>\u5f53<code>nums[mid] == nums[r]</code>\u65f6\uff1a</p> <ul> <li>\u60c5\u51b5\u4e00\uff1a<code>mid</code>\u548c<code>r</code>\u548c<code>k</code>\u4f4d\u4e8e\u7b2c\u4e8c\u6bb5\u7684\u540c\u4e00\u5904\u5e73\u53f0\uff0c<code>nums[r]</code>\u6070\u662f\u6700\u5c0f\u503c</li> <li>\u60c5\u51b5\u4e8c\uff1a<code>mid</code>\u548c<code>r</code>\u4f4d\u4e8e\u7b2c\u4e8c\u6bb5\u7684\u540c\u4e00\u5904\u5e73\u53f0\uff0c<code>k</code>\u4f4d\u4e8e\u8be5\u5e73\u53f0\u5de6\u4fa7</li> </ul> <p>\u6b64\u65f6\u4ee4<code>r--</code>\uff1a</p> <ul> <li>\u82e5\u4e3a\u60c5\u51b5\u4e00\uff0c\u5219nums[r]\u53ef\u80fd\u4ecd\u662f\u6700\u5c0f\u503c\uff0c\u4f1a\u7ee7\u7eed\u51cf1\u76f4\u5230\u8df3\u51fa\u5faa\u73af\uff1b\u6216nums[r]\u662f\u6700\u5927\u503c\uff0c\u5219\u63a5\u4e0b\u6765\u5fc5\u7136\u8df3\u51fa\u5faa\u73af\uff0cnums[l]\u4e3a\u7b54\u6848</li> <li>\u82e5\u4e3a\u60c5\u51b5\u4e8c\uff0cr\u53ef\u4ee5\u901a\u8fc7<code>r = mid -1</code>\u76f4\u63a5\u79fb\u5230\u5e73\u53f0\u5916\uff0c\u6216\u901a\u8fc7<code>r--</code>\u79fb\u5230\u5e73\u53f0\u5916\uff0c\u6700\u7ec8\u8f6c\u5316\u4e3a\u60c5\u51b51</li> </ul> <p>\u7efc\u4e0a\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f<code>r--</code>\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u4ee5\u53ca\u6700\u7ec8\u8fd4\u56de\u7684\u7b54\u6848\u5e94\u8be5\u662f<code>nums[l]</code></p> <pre><code>class Solution {\npublic:\nint findMin(vector&lt;int&gt;&amp; nums) {\nint l = 0, r = nums.size() - 1;\nwhile(l &lt;= r){\nint mid = l + (r - l)/2;\nif(nums[mid] &lt; nums[r]){\nr = mid;\n}\nelse if(nums[mid] &gt; nums[r]) {\nl = mid + 1;\n}\nelse if(nums[mid] == nums[r]){\n//mid\u548cr\u90fd\u4f4d\u4e8e\u7b2c\u4e8c\u6bb5\u7684\u540c\u4e00\u6bb5\u5e73\u53f0\uff0ck\u8981\u4e48\u5728\u540c\u4e00\u5e73\u53f0\uff0c\u8981\u4e48\u5728\u5e73\u53f0\u5de6\u8fb9\nr--;\n}\n}\nreturn nums[l];\n}\n};\n</code></pre> </li> </ul>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/","title":"\u6ed1\u52a8\u7a97\u53e3\u603b\u7ed3","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/#_2","title":"\u57fa\u7840\u601d\u8def","text":"<ol> <li>\u521d\u59cb\u5316\u7a97\u53e3<code>left = right = 0</code>\uff0c\u8868\u793a\u533a\u95f4<code>[left, right)</code>\uff0c\u6ce8\u610f\u5de6\u95ed\u53f3\u5f00\uff0c\u4ee5\u4fbf\u5904\u7406\u7a97\u53e3\u957f\u5ea6\u4e3a0\u7684\u60c5\u51b5\u3002</li> <li><code>right++</code>\u589e\u5927\u7a97\u53e3\uff0c\u76f4\u5230\u7a97\u53e3\u5185\u7684\u5143\u7d20\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6</li> <li><code>left++</code>\u7f29\u5c0f\u7a97\u53e3\uff0c\u76f4\u5230\u7a97\u53e3\u5185\u7684\u5143\u7d20\u4e0d\u518d\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u672c\u6b21\u7a97\u53e3\u8c03\u6574\u4e2d\u80fd\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u7a97\u53e3\u957f\u5ea6</li> <li>\u91cd\u590d2\u30013\uff0c\u76f4\u5230<code>right</code>\u5230\u8fbe\u5c3d\u5934\uff0c\u4e14\u7a97\u53e3\u4e5f\u7f29\u5c0f\u5230\u4e0d\u518d\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6</li> <li>\u59cb\u7ec8\u6ce8\u610f\uff0c\u7a97\u53e3\u662f\u5de6\u95ed\u53f3\u5f00\u7684\uff0c\u4e0b\u6807\u4e3a<code>right</code>\u7684\u5143\u7d20\u5e76\u4e0d\u5728\u7a97\u53e3\u4e2d\u3002</li> </ol>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/#_3","title":"\u5e38\u7528\u8f85\u52a9\u6570\u636e\u7ed3\u6784","text":"<p>\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7a97\u53e3\u6ed1\u52a8\u8fc7\u7a0b\u4e2d\u7a97\u53e3\u5185\u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u5982\u7a97\u53e3\u4e2d\u4e0d\u540c\u5b57\u7b26\u7684\u4e2a\u6570\u7b49\u7b49\u3002</p> <p>\u4fdd\u5b58\u8fd9\u4e9b\u4fe1\u606f\u5e38\u7528<code>unordered_map</code>\uff08\u67e5\u8be2\u662fO(1)\u7684\uff0c\u6bd4<code>map</code>\u5feb\uff09\u548c<code>set</code>\uff0c\u4e0b\u9762\u8bb0\u5f55\u4e00\u4e9b\u5e38\u7528\u64cd\u4f5c\uff1a</p> <pre><code>unordered_map&lt;char, int&gt; umap; //\u5efa\u7acb\u5b57\u7b26-\u6574\u578b\u7684\u6620\u5c04\n\n//\u8bb0\u5f55\u5b57\u7b26'p'\u7684\u4e2a\u6570\u4e3a2\numap['p'] = 2;\n//\u5224\u65ad\u54c8\u5e0c\u8868\u4e2d\u662f\u5426\u6709\u5b57\u7b26'p'\numap.count('p'); //\u82e5\u5b58\u5728\u8fd4\u56de1\uff0c\u5426\u5219\u8fd4\u56de0\n//\u5220\u9664\u5b57\u7b26'p'\u5bf9\u5e94\u7684\u952e\u503c\u5bf9\numap.erase('p');\n</code></pre> <pre><code>set&lt;int&gt; s; //\u6574\u578b\u96c6\u5408\uff0c\u63d2\u5165\u5176\u4e2d\u7684\u91cd\u590d\u5143\u7d20\u4f1a\u88ab\u81ea\u52a8\u8fc7\u6ee4\uff0c\u53ea\u4fdd\u75591\u4e2a\uff0c\u4e14\u9ed8\u8ba4\u5347\u5e8f\u6392\u5217\nset&lt;int, greater&lt;int&gt;&gt; s2; //\u964d\u5e8f\u6392\u5217\u7684\u6574\u578b\u96c6\u5408\n//\u63d2\u5165\u5143\u7d205\ns.insert(5);\n//\u5220\u9664\u5143\u7d205\ns.erase(5);\n//\u6e05\u7a7as\ns.clear();\n//\u5224\u65ad\u5143\u7d205\u662f\u5426\u5b58\u5728\ns.count(5);//\u5b58\u5728\u8fd4\u56de1\uff0c\u5426\u5219\u8fd4\u56de0\n//\u67e5\u627e\u5143\u7d205\u7684\u5bf9\u5e94\u8fed\u4ee3\u5668\nauto index = s.find(5); //\u82e5\u5143\u7d205\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de\u7684\u662fs.end()\n//\u904d\u5386s\nfor(auto it = s.begin(); it != s.end(); it++){\n...\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/#_4","title":"\u9898\u76ee","text":"<p>567. \u5b57\u7b26\u4e32\u7684\u6392\u5217</p> <p>\u8981\u6c42\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u5b57\u7b26\u76f8\u5bf9\u4e8es1\u7684\u5b57\u7b26\u53ea\u80fd\u5c11\u4e0d\u80fd\u591a\uff0c\u591a\u7684\u60c5\u51b5\u6709\u4e24\u79cd</p> <ul> <li>\u5728\u7a97\u53e3\u4f38\u5c55\u5230<code>right</code>\u7684\u8fc7\u7a0b\u4e2d\u78b0\u5230\u4e86s1\u4e2d\u4e0d\u5b58\u5728\u7684\u5b57\u7b26<code>if(!need.count(c))</code>\uff1a\u663e\u7136\u5f53\u524d\u6ed1\u52a8\u7a97\u53e3\u4e2d\u6240\u6709\u7684\u5b57\u7b26\u90fd\u53ea\u80fd\u4f5c\u5e9f\uff0c\u5e76\u4e14\u7a97\u53e3\u5e94\u8be5\u4ece<code>right+1</code>\u91cd\u65b0\u5f00\u59cb</li> <li>\u5728\u7a97\u53e3\u4f38\u5c55\u5230<code>right</code>\u7684\u8fc7\u7a0b\u4e2d\uff0c\u78b0\u5230\u4e86s1\u4e2d\u5b58\u5728\u4f46\u591a\u4f59\u7684\u5b57\u7b26<code>windows[c]&gt;need[c]</code>\uff1a\u9700\u8981\u6536\u7f29\u7a97\u53e3\u5de6\u8fb9\u76f4\u5230<code>windows[c]== need[c]</code>\u4e3a\u6b62\uff0c\u6ce8\u610f\u4e0d\u80fd\u50cf\u4e0a\u9762\u4e00\u6837\u5904\u7406\uff08\u80af\u5b9a\u6f0f\u89e3\uff09\uff0c\u4e5f\u4e0d\u80fd\u53ea\u6536\u7f29\u4e00\u4e2a\u5b57\u7b26\uff08\u4fdd\u8bc1\u4e0d\u4e86\u591a\u4f59\u7684\u5b57\u7b26\u88ab\u6e05\u51fa\u7a97\u53e3\uff09</li> </ul> <pre><code>class Solution {\npublic:\nbool checkInclusion(string s1, string s2) {\nmap&lt;char,int&gt; need, window;\nfor(int i = 0; i&lt;s1.size(); i++){\nneed[s1[i]] ++;\n}\nint valid = 0;\nint l = 0, r = 0;\nwhile( r &lt; s2.size() ){\nchar c = s2[r];\nr++; //\u6ce8\u610f\u8fd9\u91cc\u5df2\u7ecfr++\u4e86\uff0c\u5b83\u6307\u5411\u7684\u5b57\u7b26\u8981\u7b49\u5230\u4e0b\u4e00\u6b21\u5faa\u73af\u624d\u4f1a\u88ab\u7eb3\u5165\u7a97\u53e3\nif(need.count(c)){\nwindow[c]++;\nif(window[c] == need[c]){\nvalid ++;\n}\nelse if(window[c] &gt; need[c]){ //\u78b0\u5230\u4e86\u9700\u8981\u7684\u5b57\u7b26\uff0c\u4f46\u6570\u91cf\u591a\u4e86\nwhile(window[c] &gt; need[c]){ //\u6536\u7f29\u5230\u521a\u597d\u4e3a\u6b62\nif(window[s2[l]] == need[s2[l]]) valid--;\nwindow[s2[l]] --;\nl++;\n}\n}\n}\nelse{ //\u78b0\u5230\u4e86\u4e0d\u9700\u8981\u7684\u5b57\u7b26\uff0c\u6574\u4e2a\u7a97\u53e3\u4ece\u4e0b\u4e00\u4e2a\u5b57\u7b26\u91cd\u65b0\u5f00\u59cb\nl = r;\nvalid = 0;\nwindow.clear();\n}\n\nif(valid == need.size()){ //\u7a97\u53e3\u4e2d\u7684\u5b57\u7b26\u6ee1\u8db3\u6761\u4ef6\nreturn true;\n}\n}\nreturn false;\n}\n};\n</code></pre>"}]}